
STM32L476JG-SensorTile_ALLMEMS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b080  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800f210  0800f210  0000f210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800f7d8  0800f7d8  0000f7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800f7dc  0800f7dc  0000f7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000208  20000000  0800f7e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000027a0  20000208  0800f9e8  00010208  2**2
                  ALLOC
  7 .noinit       00000000  10000000  10000000  00000000  2**0
                  ALLOC
  8 .bss2         00000000  20000208  20000208  00010208  2**0
                  CONTENTS
  9 ._user_heap_stack 00003000  200029a8  200029a8  000129a8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY
 11 .debug_line   0002fe3b  00000000  00000000  00010236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0002c7b4  00000000  00000000  00040071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d9  00000000  00000000  0006c825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  00071f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120bf1  00000000  00000000  00073bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b48  00000000  00000000  001947c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0001c0ed  00000000  00000000  00196308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003205d  00000000  00000000  001b23f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e4452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d90  00000000  00000000  001e44a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000208 	.word	0x20000208
 80041ac:	00000000 	.word	0x00000000
 80041b0:	0800f1f4 	.word	0x0800f1f4

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	2000020c 	.word	0x2000020c
 80041cc:	0800f1f4 	.word	0x0800f1f4

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	; 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_dmul>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045f6:	bf1d      	ittte	ne
 80045f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045fc:	ea94 0f0c 	teqne	r4, ip
 8004600:	ea95 0f0c 	teqne	r5, ip
 8004604:	f000 f8de 	bleq	80047c4 <__aeabi_dmul+0x1dc>
 8004608:	442c      	add	r4, r5
 800460a:	ea81 0603 	eor.w	r6, r1, r3
 800460e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800461a:	bf18      	it	ne
 800461c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004628:	d038      	beq.n	800469c <__aeabi_dmul+0xb4>
 800462a:	fba0 ce02 	umull	ip, lr, r0, r2
 800462e:	f04f 0500 	mov.w	r5, #0
 8004632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800463a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004646:	f09c 0f00 	teq	ip, #0
 800464a:	bf18      	it	ne
 800464c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8004658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800465c:	d204      	bcs.n	8004668 <__aeabi_dmul+0x80>
 800465e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004662:	416d      	adcs	r5, r5
 8004664:	eb46 0606 	adc.w	r6, r6, r6
 8004668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800466c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800467c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004680:	bf88      	it	hi
 8004682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004686:	d81e      	bhi.n	80046c6 <__aeabi_dmul+0xde>
 8004688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800468c:	bf08      	it	eq
 800468e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004692:	f150 0000 	adcs.w	r0, r0, #0
 8004696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80046a0:	ea46 0101 	orr.w	r1, r6, r1
 80046a4:	ea40 0002 	orr.w	r0, r0, r2
 80046a8:	ea81 0103 	eor.w	r1, r1, r3
 80046ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80046b0:	bfc2      	ittt	gt
 80046b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80046b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80046ba:	bd70      	popgt	{r4, r5, r6, pc}
 80046bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80046c0:	f04f 0e00 	mov.w	lr, #0
 80046c4:	3c01      	subs	r4, #1
 80046c6:	f300 80ab 	bgt.w	8004820 <__aeabi_dmul+0x238>
 80046ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046ce:	bfde      	ittt	le
 80046d0:	2000      	movle	r0, #0
 80046d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046d6:	bd70      	pople	{r4, r5, r6, pc}
 80046d8:	f1c4 0400 	rsb	r4, r4, #0
 80046dc:	3c20      	subs	r4, #32
 80046de:	da35      	bge.n	800474c <__aeabi_dmul+0x164>
 80046e0:	340c      	adds	r4, #12
 80046e2:	dc1b      	bgt.n	800471c <__aeabi_dmul+0x134>
 80046e4:	f104 0414 	add.w	r4, r4, #20
 80046e8:	f1c4 0520 	rsb	r5, r4, #32
 80046ec:	fa00 f305 	lsl.w	r3, r0, r5
 80046f0:	fa20 f004 	lsr.w	r0, r0, r4
 80046f4:	fa01 f205 	lsl.w	r2, r1, r5
 80046f8:	ea40 0002 	orr.w	r0, r0, r2
 80046fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004708:	fa21 f604 	lsr.w	r6, r1, r4
 800470c:	eb42 0106 	adc.w	r1, r2, r6
 8004710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004714:	bf08      	it	eq
 8004716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f1c4 040c 	rsb	r4, r4, #12
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f304 	lsl.w	r3, r0, r4
 8004728:	fa20 f005 	lsr.w	r0, r0, r5
 800472c:	fa01 f204 	lsl.w	r2, r1, r4
 8004730:	ea40 0002 	orr.w	r0, r0, r2
 8004734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800473c:	f141 0100 	adc.w	r1, r1, #0
 8004740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004744:	bf08      	it	eq
 8004746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f1c4 0520 	rsb	r5, r4, #32
 8004750:	fa00 f205 	lsl.w	r2, r0, r5
 8004754:	ea4e 0e02 	orr.w	lr, lr, r2
 8004758:	fa20 f304 	lsr.w	r3, r0, r4
 800475c:	fa01 f205 	lsl.w	r2, r1, r5
 8004760:	ea43 0302 	orr.w	r3, r3, r2
 8004764:	fa21 f004 	lsr.w	r0, r1, r4
 8004768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800476c:	fa21 f204 	lsr.w	r2, r1, r4
 8004770:	ea20 0002 	bic.w	r0, r0, r2
 8004774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800477c:	bf08      	it	eq
 800477e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004782:	bd70      	pop	{r4, r5, r6, pc}
 8004784:	f094 0f00 	teq	r4, #0
 8004788:	d10f      	bne.n	80047aa <__aeabi_dmul+0x1c2>
 800478a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800478e:	0040      	lsls	r0, r0, #1
 8004790:	eb41 0101 	adc.w	r1, r1, r1
 8004794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004798:	bf08      	it	eq
 800479a:	3c01      	subeq	r4, #1
 800479c:	d0f7      	beq.n	800478e <__aeabi_dmul+0x1a6>
 800479e:	ea41 0106 	orr.w	r1, r1, r6
 80047a2:	f095 0f00 	teq	r5, #0
 80047a6:	bf18      	it	ne
 80047a8:	4770      	bxne	lr
 80047aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80047ae:	0052      	lsls	r2, r2, #1
 80047b0:	eb43 0303 	adc.w	r3, r3, r3
 80047b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047b8:	bf08      	it	eq
 80047ba:	3d01      	subeq	r5, #1
 80047bc:	d0f7      	beq.n	80047ae <__aeabi_dmul+0x1c6>
 80047be:	ea43 0306 	orr.w	r3, r3, r6
 80047c2:	4770      	bx	lr
 80047c4:	ea94 0f0c 	teq	r4, ip
 80047c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047cc:	bf18      	it	ne
 80047ce:	ea95 0f0c 	teqne	r5, ip
 80047d2:	d00c      	beq.n	80047ee <__aeabi_dmul+0x206>
 80047d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047d8:	bf18      	it	ne
 80047da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047de:	d1d1      	bne.n	8004784 <__aeabi_dmul+0x19c>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f04f 0000 	mov.w	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047f2:	bf06      	itte	eq
 80047f4:	4610      	moveq	r0, r2
 80047f6:	4619      	moveq	r1, r3
 80047f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047fc:	d019      	beq.n	8004832 <__aeabi_dmul+0x24a>
 80047fe:	ea94 0f0c 	teq	r4, ip
 8004802:	d102      	bne.n	800480a <__aeabi_dmul+0x222>
 8004804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004808:	d113      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800480a:	ea95 0f0c 	teq	r5, ip
 800480e:	d105      	bne.n	800481c <__aeabi_dmul+0x234>
 8004810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004814:	bf1c      	itt	ne
 8004816:	4610      	movne	r0, r2
 8004818:	4619      	movne	r1, r3
 800481a:	d10a      	bne.n	8004832 <__aeabi_dmul+0x24a>
 800481c:	ea81 0103 	eor.w	r1, r1, r3
 8004820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	bd70      	pop	{r4, r5, r6, pc}
 8004832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800483a:	bd70      	pop	{r4, r5, r6, pc}

0800483c <__aeabi_ddiv>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8004846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800484a:	bf1d      	ittte	ne
 800484c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004850:	ea94 0f0c 	teqne	r4, ip
 8004854:	ea95 0f0c 	teqne	r5, ip
 8004858:	f000 f8a7 	bleq	80049aa <__aeabi_ddiv+0x16e>
 800485c:	eba4 0405 	sub.w	r4, r4, r5
 8004860:	ea81 0e03 	eor.w	lr, r1, r3
 8004864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800486c:	f000 8088 	beq.w	8004980 <__aeabi_ddiv+0x144>
 8004870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8004878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800487c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800488c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004894:	429d      	cmp	r5, r3
 8004896:	bf08      	it	eq
 8004898:	4296      	cmpeq	r6, r2
 800489a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800489e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80048a2:	d202      	bcs.n	80048aa <__aeabi_ddiv+0x6e>
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	1ab6      	subs	r6, r6, r2
 80048ac:	eb65 0503 	sbc.w	r5, r5, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80048ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80048be:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048c6:	bf22      	ittt	cs
 80048c8:	1ab6      	subcs	r6, r6, r2
 80048ca:	4675      	movcs	r5, lr
 80048cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80048d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80048da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048de:	bf22      	ittt	cs
 80048e0:	1ab6      	subcs	r6, r6, r2
 80048e2:	4675      	movcs	r5, lr
 80048e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80048f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048f6:	bf22      	ittt	cs
 80048f8:	1ab6      	subcs	r6, r6, r2
 80048fa:	4675      	movcs	r5, lr
 80048fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	ea4f 0232 	mov.w	r2, r2, rrx
 8004906:	ebb6 0e02 	subs.w	lr, r6, r2
 800490a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800490e:	bf22      	ittt	cs
 8004910:	1ab6      	subcs	r6, r6, r2
 8004912:	4675      	movcs	r5, lr
 8004914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004918:	ea55 0e06 	orrs.w	lr, r5, r6
 800491c:	d018      	beq.n	8004950 <__aeabi_ddiv+0x114>
 800491e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800492a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800492e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800493a:	d1c0      	bne.n	80048be <__aeabi_ddiv+0x82>
 800493c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004940:	d10b      	bne.n	800495a <__aeabi_ddiv+0x11e>
 8004942:	ea41 0100 	orr.w	r1, r1, r0
 8004946:	f04f 0000 	mov.w	r0, #0
 800494a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800494e:	e7b6      	b.n	80048be <__aeabi_ddiv+0x82>
 8004950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004954:	bf04      	itt	eq
 8004956:	4301      	orreq	r1, r0
 8004958:	2000      	moveq	r0, #0
 800495a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800495e:	bf88      	it	hi
 8004960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004964:	f63f aeaf 	bhi.w	80046c6 <__aeabi_dmul+0xde>
 8004968:	ebb5 0c03 	subs.w	ip, r5, r3
 800496c:	bf04      	itt	eq
 800496e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004976:	f150 0000 	adcs.w	r0, r0, #0
 800497a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800498c:	bfc2      	ittt	gt
 800498e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004996:	bd70      	popgt	{r4, r5, r6, pc}
 8004998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800499c:	f04f 0e00 	mov.w	lr, #0
 80049a0:	3c01      	subs	r4, #1
 80049a2:	e690      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049a4:	ea45 0e06 	orr.w	lr, r5, r6
 80049a8:	e68d      	b.n	80046c6 <__aeabi_dmul+0xde>
 80049aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80049ae:	ea94 0f0c 	teq	r4, ip
 80049b2:	bf08      	it	eq
 80049b4:	ea95 0f0c 	teqeq	r5, ip
 80049b8:	f43f af3b 	beq.w	8004832 <__aeabi_dmul+0x24a>
 80049bc:	ea94 0f0c 	teq	r4, ip
 80049c0:	d10a      	bne.n	80049d8 <__aeabi_ddiv+0x19c>
 80049c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80049c6:	f47f af34 	bne.w	8004832 <__aeabi_dmul+0x24a>
 80049ca:	ea95 0f0c 	teq	r5, ip
 80049ce:	f47f af25 	bne.w	800481c <__aeabi_dmul+0x234>
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	e72c      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049d8:	ea95 0f0c 	teq	r5, ip
 80049dc:	d106      	bne.n	80049ec <__aeabi_ddiv+0x1b0>
 80049de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049e2:	f43f aefd 	beq.w	80047e0 <__aeabi_dmul+0x1f8>
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	e722      	b.n	8004832 <__aeabi_dmul+0x24a>
 80049ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049f0:	bf18      	it	ne
 80049f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049f6:	f47f aec5 	bne.w	8004784 <__aeabi_dmul+0x19c>
 80049fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049fe:	f47f af0d 	bne.w	800481c <__aeabi_dmul+0x234>
 8004a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004a06:	f47f aeeb 	bne.w	80047e0 <__aeabi_dmul+0x1f8>
 8004a0a:	e712      	b.n	8004832 <__aeabi_dmul+0x24a>

08004a0c <__gedf2>:
 8004a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a10:	e006      	b.n	8004a20 <__cmpdf2+0x4>
 8004a12:	bf00      	nop

08004a14 <__ledf2>:
 8004a14:	f04f 0c01 	mov.w	ip, #1
 8004a18:	e002      	b.n	8004a20 <__cmpdf2+0x4>
 8004a1a:	bf00      	nop

08004a1c <__cmpdf2>:
 8004a1c:	f04f 0c01 	mov.w	ip, #1
 8004a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a30:	bf18      	it	ne
 8004a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a36:	d01b      	beq.n	8004a70 <__cmpdf2+0x54>
 8004a38:	b001      	add	sp, #4
 8004a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a44:	ea91 0f03 	teqne	r1, r3
 8004a48:	bf02      	ittt	eq
 8004a4a:	ea90 0f02 	teqeq	r0, r2
 8004a4e:	2000      	moveq	r0, #0
 8004a50:	4770      	bxeq	lr
 8004a52:	f110 0f00 	cmn.w	r0, #0
 8004a56:	ea91 0f03 	teq	r1, r3
 8004a5a:	bf58      	it	pl
 8004a5c:	4299      	cmppl	r1, r3
 8004a5e:	bf08      	it	eq
 8004a60:	4290      	cmpeq	r0, r2
 8004a62:	bf2c      	ite	cs
 8004a64:	17d8      	asrcs	r0, r3, #31
 8004a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a6a:	f040 0001 	orr.w	r0, r0, #1
 8004a6e:	4770      	bx	lr
 8004a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a78:	d102      	bne.n	8004a80 <__cmpdf2+0x64>
 8004a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a7e:	d107      	bne.n	8004a90 <__cmpdf2+0x74>
 8004a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a88:	d1d6      	bne.n	8004a38 <__cmpdf2+0x1c>
 8004a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a8e:	d0d3      	beq.n	8004a38 <__cmpdf2+0x1c>
 8004a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <__aeabi_cdrcmple>:
 8004a98:	4684      	mov	ip, r0
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	4662      	mov	r2, ip
 8004a9e:	468c      	mov	ip, r1
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4663      	mov	r3, ip
 8004aa4:	e000      	b.n	8004aa8 <__aeabi_cdcmpeq>
 8004aa6:	bf00      	nop

08004aa8 <__aeabi_cdcmpeq>:
 8004aa8:	b501      	push	{r0, lr}
 8004aaa:	f7ff ffb7 	bl	8004a1c <__cmpdf2>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	bf48      	it	mi
 8004ab2:	f110 0f00 	cmnmi.w	r0, #0
 8004ab6:	bd01      	pop	{r0, pc}

08004ab8 <__aeabi_dcmpeq>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff fff4 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2001      	moveq	r0, #1
 8004ac4:	2000      	movne	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmplt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffea 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmple>:
 8004ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae4:	f7ff ffe0 	bl	8004aa8 <__aeabi_cdcmpeq>
 8004ae8:	bf94      	ite	ls
 8004aea:	2001      	movls	r0, #1
 8004aec:	2000      	movhi	r0, #0
 8004aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004af2:	bf00      	nop

08004af4 <__aeabi_dcmpge>:
 8004af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004af8:	f7ff ffce 	bl	8004a98 <__aeabi_cdrcmple>
 8004afc:	bf94      	ite	ls
 8004afe:	2001      	movls	r0, #1
 8004b00:	2000      	movhi	r0, #0
 8004b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b06:	bf00      	nop

08004b08 <__aeabi_dcmpgt>:
 8004b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004b0c:	f7ff ffc4 	bl	8004a98 <__aeabi_cdrcmple>
 8004b10:	bf34      	ite	cc
 8004b12:	2001      	movcc	r0, #1
 8004b14:	2000      	movcs	r0, #0
 8004b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8004b1a:	bf00      	nop

08004b1c <__aeabi_dcmpun>:
 8004b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b24:	d102      	bne.n	8004b2c <__aeabi_dcmpun+0x10>
 8004b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004b2a:	d10a      	bne.n	8004b42 <__aeabi_dcmpun+0x26>
 8004b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b34:	d102      	bne.n	8004b3c <__aeabi_dcmpun+0x20>
 8004b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b3a:	d102      	bne.n	8004b42 <__aeabi_dcmpun+0x26>
 8004b3c:	f04f 0000 	mov.w	r0, #0
 8004b40:	4770      	bx	lr
 8004b42:	f04f 0001 	mov.w	r0, #1
 8004b46:	4770      	bx	lr

08004b48 <__aeabi_d2iz>:
 8004b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004b50:	d215      	bcs.n	8004b7e <__aeabi_d2iz+0x36>
 8004b52:	d511      	bpl.n	8004b78 <__aeabi_d2iz+0x30>
 8004b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004b5c:	d912      	bls.n	8004b84 <__aeabi_d2iz+0x3c>
 8004b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8004b72:	bf18      	it	ne
 8004b74:	4240      	negne	r0, r0
 8004b76:	4770      	bx	lr
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	4770      	bx	lr
 8004b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004b82:	d105      	bne.n	8004b90 <__aeabi_d2iz+0x48>
 8004b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004b88:	bf08      	it	eq
 8004b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004b8e:	4770      	bx	lr
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop

08004b98 <__aeabi_d2f>:
 8004b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004ba0:	bf24      	itt	cs
 8004ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004baa:	d90d      	bls.n	8004bc8 <__aeabi_d2f+0x30>
 8004bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004bc0:	bf08      	it	eq
 8004bc2:	f020 0001 	biceq.w	r0, r0, #1
 8004bc6:	4770      	bx	lr
 8004bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004bcc:	d121      	bne.n	8004c12 <__aeabi_d2f+0x7a>
 8004bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004bd2:	bfbc      	itt	lt
 8004bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004bd8:	4770      	bxlt	lr
 8004bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004be2:	f1c2 0218 	rsb	r2, r2, #24
 8004be6:	f1c2 0c20 	rsb	ip, r2, #32
 8004bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8004bee:	fa20 f002 	lsr.w	r0, r0, r2
 8004bf2:	bf18      	it	ne
 8004bf4:	f040 0001 	orrne.w	r0, r0, #1
 8004bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004c04:	ea40 000c 	orr.w	r0, r0, ip
 8004c08:	fa23 f302 	lsr.w	r3, r3, r2
 8004c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c10:	e7cc      	b.n	8004bac <__aeabi_d2f+0x14>
 8004c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004c16:	d107      	bne.n	8004c28 <__aeabi_d2f+0x90>
 8004c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004c1c:	bf1e      	ittt	ne
 8004c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004c26:	4770      	bxne	lr
 8004c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c3e:	e003      	b.n	8004c48 <LoopCopyDataInit>

08004c40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c46:	3104      	adds	r1, #4

08004c48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c48:	480b      	ldr	r0, [pc, #44]	; (8004c78 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004c4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004c4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c50:	d3f6      	bcc.n	8004c40 <CopyDataInit>
	ldr	r2, =_sbss
 8004c52:	4a0b      	ldr	r2, [pc, #44]	; (8004c80 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c54:	e002      	b.n	8004c5c <LoopFillZerobss>

08004c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004c58:	f842 3b04 	str.w	r3, [r2], #4

08004c5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <LoopForever+0x16>)
	cmp	r2, r3
 8004c5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004c60:	d3f9      	bcc.n	8004c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c62:	f002 f9d7 	bl	8007014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c66:	f009 fe1b 	bl	800e8a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c6a:	f001 fa51 	bl	8006110 <main>

08004c6e <LoopForever>:

LoopForever:
    b LoopForever
 8004c6e:	e7fe      	b.n	8004c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c70:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004c74:	0800f7e0 	.word	0x0800f7e0
	ldr	r0, =_sdata
 8004c78:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c7c:	20000208 	.word	0x20000208
	ldr	r2, =_sbss
 8004c80:	20000208 	.word	0x20000208
	ldr	r3, = _ebss
 8004c84:	200029a8 	.word	0x200029a8

08004c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c88:	e7fe      	b.n	8004c88 <ADC1_2_IRQHandler>
	...

08004c8c <GAP_ConnectionComplete_CB>:
 * @param  uint16_t handle Connection handle
 * @retval None
 */
static void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004c8c:	4b03      	ldr	r3, [pc, #12]	; (8004c9c <GAP_ConnectionComplete_CB+0x10>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8004c92:	8099      	strh	r1, [r3, #4]

#ifdef ALLMEMS1_DEBUG_CONNECTION
  ALLMEMS1_PRINTF("\r\n>>>>>>CONNECTED %x:%x:%x:%x:%x:%x\r\n\r\n",addr[5],addr[4],addr[3],addr[2],addr[1],addr[0]);
#endif /* ALLMEMS1_DEBUG_CONNECTION */

  ConnectionBleStatus=0;
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <GAP_ConnectionComplete_CB+0x14>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
  


}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000224 	.word	0x20000224
 8004ca0:	20000870 	.word	0x20000870

08004ca4 <AccGyroMag_AttributeModified_CB>:
 * is subscribed or not to the Acc,Gyro and Mag service
 * @param uint8_t *att_data attribute data
 * @retval None
 */
static void AccGyroMag_AttributeModified_CB(uint8_t *att_data)
{
 8004ca4:	b500      	push	{lr}
 8004ca6:	b0c1      	sub	sp, #260	; 0x104
  if (att_data[0] == 01) {
 8004ca8:	7803      	ldrb	r3, [r0, #0]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d011      	beq.n	8004cd2 <AccGyroMag_AttributeModified_CB+0x2e>
    {
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
      /* Set the Capture Compare Register value */
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
    }
  } else if (att_data[0] == 0) {
 8004cae:	b32b      	cbz	r3, 8004cfc <AccGyroMag_AttributeModified_CB+0x58>
      /* Stopping Error */
      Error_Handler();
    }      
  }

    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <AccGyroMag_AttributeModified_CB+0x78>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f013 0f04 	tst.w	r3, #4
 8004cb8:	d02e      	beq.n	8004d18 <AccGyroMag_AttributeModified_CB+0x74>
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <AccGyroMag_AttributeModified_CB+0x7c>)
 8004cbc:	4919      	ldr	r1, [pc, #100]	; (8004d24 <AccGyroMag_AttributeModified_CB+0x80>)
 8004cbe:	4668      	mov	r0, sp
 8004cc0:	f009 ff28 	bl	800eb14 <siprintf>
 8004cc4:	4601      	mov	r1, r0
 8004cc6:	4668      	mov	r0, sp
 8004cc8:	f001 fe90 	bl	80069ec <CDC_Fill_Buffer>

}
 8004ccc:	b041      	add	sp, #260	; 0x104
 8004cce:	f85d fb04 	ldr.w	pc, [sp], #4
    W2ST_ON_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <AccGyroMag_AttributeModified_CB+0x78>)
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Start_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004cdc:	210c      	movs	r1, #12
 8004cde:	4812      	ldr	r0, [pc, #72]	; (8004d28 <AccGyroMag_AttributeModified_CB+0x84>)
 8004ce0:	f005 f9f6 	bl	800a0d0 <HAL_TIM_OC_Start_IT>
 8004ce4:	b938      	cbnz	r0, 8004cf6 <AccGyroMag_AttributeModified_CB+0x52>
      uint32_t uhCapture = __HAL_TIM_GET_COUNTER(&TimCCHandle);
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <AccGyroMag_AttributeModified_CB+0x84>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	6a53      	ldr	r3, [r2, #36]	; 0x24
      __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8004cec:	490f      	ldr	r1, [pc, #60]	; (8004d2c <AccGyroMag_AttributeModified_CB+0x88>)
 8004cee:	6809      	ldr	r1, [r1, #0]
 8004cf0:	440b      	add	r3, r1
 8004cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf4:	e7dc      	b.n	8004cb0 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004cf6:	f001 f99d 	bl	8006034 <Error_Handler>
 8004cfa:	e7f4      	b.n	8004ce6 <AccGyroMag_AttributeModified_CB+0x42>
    W2ST_OFF_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG);
 8004cfc:	4a07      	ldr	r2, [pc, #28]	; (8004d1c <AccGyroMag_AttributeModified_CB+0x78>)
 8004cfe:	6813      	ldr	r3, [r2, #0]
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	6013      	str	r3, [r2, #0]
    if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004d06:	210c      	movs	r1, #12
 8004d08:	4807      	ldr	r0, [pc, #28]	; (8004d28 <AccGyroMag_AttributeModified_CB+0x84>)
 8004d0a:	f005 fab3 	bl	800a274 <HAL_TIM_OC_Stop_IT>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d0ce      	beq.n	8004cb0 <AccGyroMag_AttributeModified_CB+0xc>
      Error_Handler();
 8004d12:	f001 f98f 	bl	8006034 <Error_Handler>
 8004d16:	e7cb      	b.n	8004cb0 <AccGyroMag_AttributeModified_CB+0xc>
    XPRINTF("--->Acc/Gyro/Mag=%s", W2ST_CHECK_CONNECTION(W2ST_CONNECT_ACC_GYRO_MAG) ? " ON\r\n" : " OFF\r\n\n");
 8004d18:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <AccGyroMag_AttributeModified_CB+0x8c>)
 8004d1a:	e7cf      	b.n	8004cbc <AccGyroMag_AttributeModified_CB+0x18>
 8004d1c:	20000870 	.word	0x20000870
 8004d20:	0800f278 	.word	0x0800f278
 8004d24:	0800f280 	.word	0x0800f280
 8004d28:	20000364 	.word	0x20000364
 8004d2c:	20000004 	.word	0x20000004
 8004d30:	0800f270 	.word	0x0800f270

08004d34 <GAP_DisconnectionComplete_CB>:
{
 8004d34:	b530      	push	{r4, r5, lr}
 8004d36:	b0c1      	sub	sp, #260	; 0x104
  connected = FALSE;
 8004d38:	2500      	movs	r5, #0
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <GAP_DisconnectionComplete_CB+0x48>)
 8004d3c:	601d      	str	r5, [r3, #0]
  XPRINTF("<<<<<<DISCONNECTED\r\n");
 8004d3e:	46ec      	mov	ip, sp
 8004d40:	4c0f      	ldr	r4, [pc, #60]	; (8004d80 <GAP_DisconnectionComplete_CB+0x4c>)
 8004d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d4c:	f84c 0b04 	str.w	r0, [ip], #4
 8004d50:	f88c 1000 	strb.w	r1, [ip]
 8004d54:	2114      	movs	r1, #20
 8004d56:	4668      	mov	r0, sp
 8004d58:	f001 fe48 	bl	80069ec <CDC_Fill_Buffer>
  set_connectable = TRUE;
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <GAP_DisconnectionComplete_CB+0x50>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
  ConnectionBleStatus=0;
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <GAP_DisconnectionComplete_CB+0x54>)
 8004d64:	601d      	str	r5, [r3, #0]
  if(HAL_TIM_OC_Stop_IT(&TimCCHandle, TIM_CHANNEL_4) != HAL_OK){
 8004d66:	210c      	movs	r1, #12
 8004d68:	4808      	ldr	r0, [pc, #32]	; (8004d8c <GAP_DisconnectionComplete_CB+0x58>)
 8004d6a:	f005 fa83 	bl	800a274 <HAL_TIM_OC_Stop_IT>
 8004d6e:	b908      	cbnz	r0, 8004d74 <GAP_DisconnectionComplete_CB+0x40>
}
 8004d70:	b041      	add	sp, #260	; 0x104
 8004d72:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8004d74:	f001 f95e 	bl	8006034 <Error_Handler>
}
 8004d78:	e7fa      	b.n	8004d70 <GAP_DisconnectionComplete_CB+0x3c>
 8004d7a:	bf00      	nop
 8004d7c:	20000224 	.word	0x20000224
 8004d80:	0800f294 	.word	0x0800f294
 8004d84:	20000000 	.word	0x20000000
 8004d88:	20000870 	.word	0x20000870
 8004d8c:	20000364 	.word	0x20000364

08004d90 <safe_aci_gatt_update_char_value>:
{
 8004d90:	b510      	push	{r4, lr}
 8004d92:	b082      	sub	sp, #8
  if (breath > 0) {
 8004d94:	4c09      	ldr	r4, [pc, #36]	; (8004dbc <safe_aci_gatt_update_char_value+0x2c>)
 8004d96:	68a4      	ldr	r4, [r4, #8]
 8004d98:	2c00      	cmp	r4, #0
 8004d9a:	dd05      	ble.n	8004da8 <safe_aci_gatt_update_char_value+0x18>
    breath--;
 8004d9c:	3c01      	subs	r4, #1
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <safe_aci_gatt_update_char_value+0x2c>)
 8004da0:	609c      	str	r4, [r3, #8]
  tBleStatus ret = BLE_STATUS_INSUFFICIENT_RESOURCES;
 8004da2:	2064      	movs	r0, #100	; 0x64
}
 8004da4:	b002      	add	sp, #8
 8004da6:	bd10      	pop	{r4, pc}
    ret = aci_gatt_update_char_value(servHandle,charHandle,charValOffset,charValueLen,charValue);
 8004da8:	9c04      	ldr	r4, [sp, #16]
 8004daa:	9400      	str	r4, [sp, #0]
 8004dac:	f006 f99d 	bl	800b0ea <aci_gatt_update_char_value>
    if (ret != BLE_STATUS_SUCCESS){
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d0f7      	beq.n	8004da4 <safe_aci_gatt_update_char_value+0x14>
      breath = ACC_BLUENRG_CONGESTION_SKIP;
 8004db4:	4b01      	ldr	r3, [pc, #4]	; (8004dbc <safe_aci_gatt_update_char_value+0x2c>)
 8004db6:	221e      	movs	r2, #30
 8004db8:	609a      	str	r2, [r3, #8]
 8004dba:	e7f3      	b.n	8004da4 <safe_aci_gatt_update_char_value+0x14>
 8004dbc:	20000224 	.word	0x20000224

08004dc0 <Add_HW_SW_ServW2ST_Service>:
{
 8004dc0:	b530      	push	{r4, r5, lr}
 8004dc2:	b0cb      	sub	sp, #300	; 0x12c
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8004dc4:	231b      	movs	r3, #27
 8004dc6:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004dca:	23c5      	movs	r3, #197	; 0xc5
 8004dcc:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004dd0:	23d5      	movs	r3, #213	; 0xd5
 8004dd2:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004dd6:	23a5      	movs	r3, #165	; 0xa5
 8004dd8:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004ddc:	2002      	movs	r0, #2
 8004dde:	f88d 011c 	strb.w	r0, [sp, #284]	; 0x11c
 8004de2:	2300      	movs	r3, #0
 8004de4:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004de8:	22b4      	movs	r2, #180	; 0xb4
 8004dea:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004dee:	229a      	movs	r2, #154	; 0x9a
 8004df0:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004df4:	22e1      	movs	r2, #225	; 0xe1
 8004df6:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004dfa:	2211      	movs	r2, #17
 8004dfc:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004e00:	2201      	movs	r2, #1
 8004e02:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004e06:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004e0a:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004e0e:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004e12:	f88d 3126 	strb.w	r3, [sp, #294]	; 0x126
 8004e16:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret = aci_gatt_add_serv(UUID_TYPE_128,  uuid, PRIMARY_SERVICE,
 8004e1a:	4b35      	ldr	r3, [pc, #212]	; (8004ef0 <Add_HW_SW_ServW2ST_Service+0x130>)
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	230d      	movs	r3, #13
 8004e20:	a946      	add	r1, sp, #280	; 0x118
 8004e22:	f006 f8b7 	bl	800af94 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e26:	2800      	cmp	r0, #0
 8004e28:	d13e      	bne.n	8004ea8 <Add_HW_SW_ServW2ST_Service+0xe8>
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8004e2a:	231b      	movs	r3, #27
 8004e2c:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004e30:	23c5      	movs	r3, #197	; 0xc5
 8004e32:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
 8004e36:	23d5      	movs	r3, #213	; 0xd5
 8004e38:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004e3c:	23a5      	movs	r3, #165	; 0xa5
 8004e3e:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
 8004e42:	2102      	movs	r1, #2
 8004e44:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
 8004e4e:	2236      	movs	r2, #54	; 0x36
 8004e50:	f88d 211e 	strb.w	r2, [sp, #286]	; 0x11e
 8004e54:	22ac      	movs	r2, #172	; 0xac
 8004e56:	f88d 211f 	strb.w	r2, [sp, #287]	; 0x11f
 8004e5a:	22e1      	movs	r2, #225	; 0xe1
 8004e5c:	f88d 2120 	strb.w	r2, [sp, #288]	; 0x120
 8004e60:	2211      	movs	r2, #17
 8004e62:	f88d 2121 	strb.w	r2, [sp, #289]	; 0x121
 8004e66:	2201      	movs	r2, #1
 8004e68:	f88d 2122 	strb.w	r2, [sp, #290]	; 0x122
 8004e6c:	f88d 3123 	strb.w	r3, [sp, #291]	; 0x123
 8004e70:	f88d 3124 	strb.w	r3, [sp, #292]	; 0x124
 8004e74:	f88d 3125 	strb.w	r3, [sp, #293]	; 0x125
 8004e78:	22e0      	movs	r2, #224	; 0xe0
 8004e7a:	f88d 2126 	strb.w	r2, [sp, #294]	; 0x126
 8004e7e:	f88d 3127 	strb.w	r3, [sp, #295]	; 0x127
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, uuid, 2+3*3*2,
 8004e82:	481c      	ldr	r0, [pc, #112]	; (8004ef4 <Add_HW_SW_ServW2ST_Service+0x134>)
 8004e84:	f100 020e 	add.w	r2, r0, #14
 8004e88:	9205      	str	r2, [sp, #20]
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	9203      	str	r2, [sp, #12]
 8004e90:	2404      	movs	r4, #4
 8004e92:	9402      	str	r4, [sp, #8]
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	9200      	str	r2, [sp, #0]
 8004e98:	2314      	movs	r3, #20
 8004e9a:	aa46      	add	r2, sp, #280	; 0x118
 8004e9c:	8980      	ldrh	r0, [r0, #12]
 8004e9e:	f006 f8be 	bl	800b01e <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) {
 8004ea2:	b9a0      	cbnz	r0, 8004ece <Add_HW_SW_ServW2ST_Service+0x10e>
}
 8004ea4:	b04b      	add	sp, #300	; 0x12c
 8004ea6:	bd30      	pop	{r4, r5, pc}
	  XPRINTF("Error Creating Service\r\n");
 8004ea8:	f10d 0c18 	add.w	ip, sp, #24
 8004eac:	4c12      	ldr	r4, [pc, #72]	; (8004ef8 <Add_HW_SW_ServW2ST_Service+0x138>)
 8004eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004eb4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004eb8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004ebc:	f88c 2000 	strb.w	r2, [ip]
 8004ec0:	2118      	movs	r1, #24
 8004ec2:	eb0d 0001 	add.w	r0, sp, r1
 8004ec6:	f001 fd91 	bl	80069ec <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004eca:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004ecc:	e7ea      	b.n	8004ea4 <Add_HW_SW_ServW2ST_Service+0xe4>
	  XPRINTF("Error Creating Characterstic\r\n");
 8004ece:	ac06      	add	r4, sp, #24
 8004ed0:	4d0a      	ldr	r5, [pc, #40]	; (8004efc <Add_HW_SW_ServW2ST_Service+0x13c>)
 8004ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004eda:	c407      	stmia	r4!, {r0, r1, r2}
 8004edc:	f824 3b02 	strh.w	r3, [r4], #2
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	7023      	strb	r3, [r4, #0]
 8004ee4:	211e      	movs	r1, #30
 8004ee6:	a806      	add	r0, sp, #24
 8004ee8:	f001 fd80 	bl	80069ec <CDC_Fill_Buffer>
  return BLE_STATUS_ERROR;
 8004eec:	2047      	movs	r0, #71	; 0x47
    goto fail;
 8004eee:	e7d9      	b.n	8004ea4 <Add_HW_SW_ServW2ST_Service+0xe4>
 8004ef0:	20000230 	.word	0x20000230
 8004ef4:	20000224 	.word	0x20000224
 8004ef8:	0800f2ac 	.word	0x0800f2ac
 8004efc:	0800f2c8 	.word	0x0800f2c8

08004f00 <AccGyroMag_Update>:
{  
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	b0c8      	sub	sp, #288	; 0x120
 8004f04:	4606      	mov	r6, r0
 8004f06:	460d      	mov	r5, r1
 8004f08:	4614      	mov	r4, r2
  STORE_LE_16(buff   ,(HAL_GetTick()>>3));
 8004f0a:	f002 f8ed 	bl	80070e8 <HAL_GetTick>
 8004f0e:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 8004f12:	f88d 010c 	strb.w	r0, [sp, #268]	; 0x10c
 8004f16:	f002 f8e7 	bl	80070e8 <HAL_GetTick>
 8004f1a:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8004f1e:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
  STORE_LE_16(buff+2 ,Acc->x);
 8004f22:	6833      	ldr	r3, [r6, #0]
 8004f24:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
 8004f28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f2c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
  STORE_LE_16(buff+4 ,Acc->y);
 8004f30:	6873      	ldr	r3, [r6, #4]
 8004f32:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
 8004f36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f3a:	f88d 3111 	strb.w	r3, [sp, #273]	; 0x111
  STORE_LE_16(buff+6 ,Acc->z);
 8004f3e:	68b3      	ldr	r3, [r6, #8]
 8004f40:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
 8004f44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f48:	f88d 3113 	strb.w	r3, [sp, #275]	; 0x113
  STORE_LE_16(buff+8 ,Gyro->x*10);
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004f52:	0052      	lsls	r2, r2, #1
 8004f54:	f88d 2114 	strb.w	r2, [sp, #276]	; 0x114
 8004f58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f5c:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004f60:	f88d 3115 	strb.w	r3, [sp, #277]	; 0x115
  STORE_LE_16(buff+10,Gyro->y*10);
 8004f64:	686b      	ldr	r3, [r5, #4]
 8004f66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004f6a:	0052      	lsls	r2, r2, #1
 8004f6c:	f88d 2116 	strb.w	r2, [sp, #278]	; 0x116
 8004f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f74:	f3c3 13c7 	ubfx	r3, r3, #7, #8
 8004f78:	f88d 3117 	strb.w	r3, [sp, #279]	; 0x117
  STORE_LE_16(buff+12,Gyro->z);
 8004f7c:	68ab      	ldr	r3, [r5, #8]
 8004f7e:	f88d 3118 	strb.w	r3, [sp, #280]	; 0x118
 8004f82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f86:	f88d 3119 	strb.w	r3, [sp, #281]	; 0x119
  STORE_LE_16(buff+14,Mag->x);
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f88d 311a 	strb.w	r3, [sp, #282]	; 0x11a
 8004f90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004f94:	f88d 311b 	strb.w	r3, [sp, #283]	; 0x11b
  STORE_LE_16(buff+16,Mag->y);
 8004f98:	6863      	ldr	r3, [r4, #4]
 8004f9a:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
 8004f9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004fa2:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
  STORE_LE_16(buff+18,Mag->z);
 8004fa6:	68a3      	ldr	r3, [r4, #8]
 8004fa8:	f88d 311e 	strb.w	r3, [sp, #286]	; 0x11e
 8004fac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004fb0:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
  ret = ACI_GATT_UPDATE_CHAR_VALUE(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+3*3*2, buff);
 8004fb4:	480e      	ldr	r0, [pc, #56]	; (8004ff0 <AccGyroMag_Update+0xf0>)
 8004fb6:	ab43      	add	r3, sp, #268	; 0x10c
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	2314      	movs	r3, #20
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	89c1      	ldrh	r1, [r0, #14]
 8004fc0:	8980      	ldrh	r0, [r0, #12]
 8004fc2:	f7ff fee5 	bl	8004d90 <safe_aci_gatt_update_char_value>
  if (ret != BLE_STATUS_SUCCESS){
 8004fc6:	b908      	cbnz	r0, 8004fcc <AccGyroMag_Update+0xcc>
}
 8004fc8:	b048      	add	sp, #288	; 0x120
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
      XPRINTF("Error Updating Acc/Gyro/Mag Char\r\n");
 8004fcc:	ac03      	add	r4, sp, #12
 8004fce:	4d09      	ldr	r5, [pc, #36]	; (8004ff4 <AccGyroMag_Update+0xf4>)
 8004fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	f824 3b02 	strh.w	r3, [r4], #2
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	7023      	strb	r3, [r4, #0]
 8004fe2:	2122      	movs	r1, #34	; 0x22
 8004fe4:	a803      	add	r0, sp, #12
 8004fe6:	f001 fd01 	bl	80069ec <CDC_Fill_Buffer>
    return BLE_STATUS_ERROR;
 8004fea:	2047      	movs	r0, #71	; 0x47
 8004fec:	e7ec      	b.n	8004fc8 <AccGyroMag_Update+0xc8>
 8004fee:	bf00      	nop
 8004ff0:	20000224 	.word	0x20000224
 8004ff4:	0800f2e8 	.word	0x0800f2e8

08004ff8 <setConnectable>:
{  
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	b092      	sub	sp, #72	; 0x48
  char local_name[8] = {AD_TYPE_COMPLETE_LOCAL_NAME,NodeName[1],NodeName[2],NodeName[3],NodeName[4],NodeName[5],NodeName[6],NodeName[7]};
 8004ffc:	2609      	movs	r6, #9
 8004ffe:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8005002:	4b37      	ldr	r3, [pc, #220]	; (80050e0 <setConnectable+0xe8>)
 8005004:	f893 e001 	ldrb.w	lr, [r3, #1]
 8005008:	f88d e041 	strb.w	lr, [sp, #65]	; 0x41
 800500c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8005010:	f88d c042 	strb.w	ip, [sp, #66]	; 0x42
 8005014:	78dc      	ldrb	r4, [r3, #3]
 8005016:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
 800501a:	7918      	ldrb	r0, [r3, #4]
 800501c:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
 8005020:	7959      	ldrb	r1, [r3, #5]
 8005022:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
 8005026:	799a      	ldrb	r2, [r3, #6]
 8005028:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
 800502c:	79db      	ldrb	r3, [r3, #7]
 800502e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
  manuf_data[0 ] = 8U;
 8005032:	2508      	movs	r5, #8
 8005034:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
  manuf_data[1 ] = 0x09U;
 8005038:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  manuf_data[2 ] = NodeName[1];/* Complete Name */
 800503c:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
  manuf_data[3 ] = NodeName[2];
 8005040:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
  manuf_data[4 ] = NodeName[3];
 8005044:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
  manuf_data[5 ] = NodeName[4];
 8005048:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
  manuf_data[6 ] = NodeName[5];
 800504c:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
  manuf_data[7 ] = NodeName[6];
 8005050:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
  manuf_data[8 ] = NodeName[7];           
 8005054:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  manuf_data[9 ] = 15U;
 8005058:	230f      	movs	r3, #15
 800505a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  manuf_data[10] = 0xFFU;
 800505e:	23ff      	movs	r3, #255	; 0xff
 8005060:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  manuf_data[11] = 0x30U;/* STM Manufacter AD */
 8005064:	2330      	movs	r3, #48	; 0x30
 8005066:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  manuf_data[12] = 0x00U;
 800506a:	2400      	movs	r4, #0
 800506c:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  manuf_data[13] = 0x02U;
 8005070:	2302      	movs	r3, #2
 8005072:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  manuf_data[14] = 0x02U; /* Board Type */
 8005076:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
  manuf_data[15] = 0x08U; /* Firmware ID */
 800507a:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  manuf_data[16] = 0x00U;
 800507e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  manuf_data[17] = 0x00U;
 8005082:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  manuf_data[18] = 0x00U;
 8005086:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  manuf_data[19] = bdaddr[5];
 800508a:	4b16      	ldr	r3, [pc, #88]	; (80050e4 <setConnectable+0xec>)
 800508c:	795a      	ldrb	r2, [r3, #5]
 800508e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  manuf_data[20] = bdaddr[4];
 8005092:	791a      	ldrb	r2, [r3, #4]
 8005094:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  manuf_data[21] = bdaddr[3];
 8005098:	78da      	ldrb	r2, [r3, #3]
 800509a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  manuf_data[22] = bdaddr[2];
 800509e:	789a      	ldrb	r2, [r3, #2]
 80050a0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
  manuf_data[23] = bdaddr[1];
 80050a4:	785a      	ldrb	r2, [r3, #1]
 80050a6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
  manuf_data[24] = bdaddr[0];
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  hci_le_set_scan_resp_data(0,NULL);
 80050b0:	4621      	mov	r1, r4
 80050b2:	4620      	mov	r0, r4
 80050b4:	f006 f992 	bl	800b3dc <hci_le_set_scan_resp_data>
  aci_gap_set_discoverable(ADV_IND, 0, 0,
 80050b8:	9406      	str	r4, [sp, #24]
 80050ba:	9405      	str	r4, [sp, #20]
 80050bc:	9404      	str	r4, [sp, #16]
 80050be:	9403      	str	r4, [sp, #12]
 80050c0:	ab10      	add	r3, sp, #64	; 0x40
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	9501      	str	r5, [sp, #4]
 80050c6:	9400      	str	r4, [sp, #0]
 80050c8:	2301      	movs	r3, #1
 80050ca:	4622      	mov	r2, r4
 80050cc:	4621      	mov	r1, r4
 80050ce:	4620      	mov	r0, r4
 80050d0:	f005 fe68 	bl	800ada4 <aci_gap_set_discoverable>
  aci_gap_update_adv_data(25, manuf_data);
 80050d4:	a909      	add	r1, sp, #36	; 0x24
 80050d6:	2019      	movs	r0, #25
 80050d8:	f005 ff0b 	bl	800aef2 <aci_gap_update_adv_data>
}
 80050dc:	b012      	add	sp, #72	; 0x48
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	200006fc 	.word	0x200006fc
 80050e4:	20000338 	.word	0x20000338

080050e8 <Read_Request_CB>:
{
 80050e8:	b508      	push	{r3, lr}
  if(connection_handle != 0)
 80050ea:	4b03      	ldr	r3, [pc, #12]	; (80050f8 <Read_Request_CB+0x10>)
 80050ec:	8898      	ldrh	r0, [r3, #4]
 80050ee:	b900      	cbnz	r0, 80050f2 <Read_Request_CB+0xa>
}
 80050f0:	bd08      	pop	{r3, pc}
    aci_gatt_allow_read(connection_handle);
 80050f2:	f006 f832 	bl	800b15a <aci_gatt_allow_read>
}
 80050f6:	e7fb      	b.n	80050f0 <Read_Request_CB+0x8>
 80050f8:	20000224 	.word	0x20000224

080050fc <Attribute_Modified_CB>:
{
 80050fc:	b508      	push	{r3, lr}
    	if(attr_handle == AccGyroMagCharHandle + 2) {
 80050fe:	4b05      	ldr	r3, [pc, #20]	; (8005114 <Attribute_Modified_CB+0x18>)
 8005100:	89db      	ldrh	r3, [r3, #14]
 8005102:	3302      	adds	r3, #2
 8005104:	4298      	cmp	r0, r3
 8005106:	d000      	beq.n	800510a <Attribute_Modified_CB+0xe>
}
 8005108:	bd08      	pop	{r3, pc}
      AccGyroMag_AttributeModified_CB(att_data);
 800510a:	4608      	mov	r0, r1
 800510c:	f7ff fdca 	bl	8004ca4 <AccGyroMag_AttributeModified_CB>
}
 8005110:	e7fa      	b.n	8005108 <Attribute_Modified_CB+0xc>
 8005112:	bf00      	nop
 8005114:	20000224 	.word	0x20000224

08005118 <HCI_Event_CB>:
 *         parsed.
 * @param  void *pckt Pointer to the ACI packet
 * @retval None
 */
void HCI_Event_CB(void *pckt)
{
 8005118:	b530      	push	{r4, r5, lr}
 800511a:	b0c1      	sub	sp, #260	; 0x104
 800511c:	4605      	mov	r5, r0
  hci_uart_pckt *hci_pckt = pckt;
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  XPRINTF("HCI_Event_CB\r\n\r\n");
 800511e:	46ec      	mov	ip, sp
 8005120:	4c1d      	ldr	r4, [pc, #116]	; (8005198 <HCI_Event_CB+0x80>)
 8005122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	f88c 3000 	strb.w	r3, [ip]
 800512e:	2110      	movs	r1, #16
 8005130:	4668      	mov	r0, sp
 8005132:	f001 fc5b 	bl	80069ec <CDC_Fill_Buffer>

  if(hci_pckt->type != HCI_EVENT_PKT) {
 8005136:	782b      	ldrb	r3, [r5, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d106      	bne.n	800514a <HCI_Event_CB+0x32>
    return;
  }
  
  switch(event_pckt->evt){
 800513c:	786b      	ldrb	r3, [r5, #1]
 800513e:	2b3e      	cmp	r3, #62	; 0x3e
 8005140:	d008      	beq.n	8005154 <HCI_Event_CB+0x3c>
 8005142:	2bff      	cmp	r3, #255	; 0xff
 8005144:	d010      	beq.n	8005168 <HCI_Event_CB+0x50>
 8005146:	2b05      	cmp	r3, #5
 8005148:	d001      	beq.n	800514e <HCI_Event_CB+0x36>
        break;
      }
    }
    break;
  }
}
 800514a:	b041      	add	sp, #260	; 0x104
 800514c:	bd30      	pop	{r4, r5, pc}
      GAP_DisconnectionComplete_CB();
 800514e:	f7ff fdf1 	bl	8004d34 <GAP_DisconnectionComplete_CB>
    break;
 8005152:	e7fa      	b.n	800514a <HCI_Event_CB+0x32>
      switch(evt->subevent){
 8005154:	78eb      	ldrb	r3, [r5, #3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d1f7      	bne.n	800514a <HCI_Event_CB+0x32>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800515a:	f8b5 1005 	ldrh.w	r1, [r5, #5]
 800515e:	f105 0009 	add.w	r0, r5, #9
 8005162:	f7ff fd93 	bl	8004c8c <GAP_ConnectionComplete_CB>
        break;
 8005166:	e7f0      	b.n	800514a <HCI_Event_CB+0x32>
      switch(blue_evt->ecode){
 8005168:	f8b5 3003 	ldrh.w	r3, [r5, #3]
 800516c:	f640 4201 	movw	r2, #3073	; 0xc01
 8005170:	4293      	cmp	r3, r2
 8005172:	d008      	beq.n	8005186 <HCI_Event_CB+0x6e>
 8005174:	f640 4214 	movw	r2, #3092	; 0xc14
 8005178:	4293      	cmp	r3, r2
 800517a:	d1e6      	bne.n	800514a <HCI_Event_CB+0x32>
          Read_Request_CB(pr->attr_handle);                    
 800517c:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8005180:	f7ff ffb2 	bl	80050e8 <Read_Request_CB>
        break;
 8005184:	e7e1      	b.n	800514a <HCI_Event_CB+0x32>
          Attribute_Modified_CB(evt->attr_handle, evt->att_data,evt->data_length);
 8005186:	7a6a      	ldrb	r2, [r5, #9]
 8005188:	f105 010c 	add.w	r1, r5, #12
 800518c:	f8b5 0007 	ldrh.w	r0, [r5, #7]
 8005190:	f7ff ffb4 	bl	80050fc <Attribute_Modified_CB>
        break;
 8005194:	e7d9      	b.n	800514a <HCI_Event_CB+0x32>
 8005196:	bf00      	nop
 8005198:	0800f30c 	.word	0x0800f30c

0800519c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b0c9      	sub	sp, #292	; 0x124
  GPIO_InitTypeDef GPIO_InitStruct;
  
  HAL_PWREx_EnableVddIO2();
 80051a0:	f002 ff12 	bl	8007fc8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051a4:	4b2a      	ldr	r3, [pc, #168]	; (8005250 <HCI_TL_SPI_Init+0xb4>)
 80051a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051b0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80051b4:	9200      	str	r2, [sp, #0]
 80051b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ba:	f042 0204 	orr.w	r2, r2, #4
 80051be:	64da      	str	r2, [r3, #76]	; 0x4c
 80051c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c2:	f002 0204 	and.w	r2, r2, #4
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051cc:	f042 0202 	orr.w	r2, r2, #2
 80051d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80051d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	9302      	str	r3, [sp, #8]
 80051da:	9b02      	ldr	r3, [sp, #8]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80051dc:	4e1d      	ldr	r6, [pc, #116]	; (8005254 <HCI_TL_SPI_Init+0xb8>)
 80051de:	2201      	movs	r2, #1
 80051e0:	2104      	movs	r1, #4
 80051e2:	4630      	mov	r0, r6
 80051e4:	f002 f97f 	bl	80074e6 <HAL_GPIO_WritePin>
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80051e8:	2320      	movs	r3, #32
 80051ea:	9343      	str	r3, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HCI_TL_SPI_Init+0xbc>)
 80051ee:	9344      	str	r3, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f0:	2400      	movs	r4, #0
 80051f2:	9445      	str	r4, [sp, #276]	; 0x114
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80051f4:	a943      	add	r1, sp, #268	; 0x10c
 80051f6:	4819      	ldr	r0, [pc, #100]	; (800525c <HCI_TL_SPI_Init+0xc0>)
 80051f8:	f001 ffe8 	bl	80071cc <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80051fc:	2501      	movs	r5, #1
 80051fe:	9543      	str	r5, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005200:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005204:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8005206:	a943      	add	r1, sp, #268	; 0x10c
 8005208:	4815      	ldr	r0, [pc, #84]	; (8005260 <HCI_TL_SPI_Init+0xc4>)
 800520a:	f001 ffdf 	bl	80071cc <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800520e:	2704      	movs	r7, #4
 8005210:	9743      	str	r7, [sp, #268]	; 0x10c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005212:	9544      	str	r5, [sp, #272]	; 0x110
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	9445      	str	r4, [sp, #276]	; 0x114
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005216:	9446      	str	r4, [sp, #280]	; 0x118
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005218:	a943      	add	r1, sp, #268	; 0x10c
 800521a:	4630      	mov	r0, r6
 800521c:	f001 ffd6 	bl	80071cc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005220:	462a      	mov	r2, r5
 8005222:	4639      	mov	r1, r7
 8005224:	4630      	mov	r0, r6
 8005226:	f002 f95e 	bl	80074e6 <HAL_GPIO_WritePin>

  XPRINTF("\r\nIntialised HCI SPI.\r\n");
 800522a:	f10d 0c0c 	add.w	ip, sp, #12
 800522e:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <HCI_TL_SPI_Init+0xc8>)
 8005230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005236:	e894 0003 	ldmia.w	r4, {r0, r1}
 800523a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800523e:	2117      	movs	r1, #23
 8005240:	a803      	add	r0, sp, #12
 8005242:	f001 fbd3 	bl	80069ec <CDC_Fill_Buffer>
    
  return BSP_SPI1_Init();
 8005246:	f001 fe77 	bl	8006f38 <BSP_SPI1_Init>
}
 800524a:	b049      	add	sp, #292	; 0x124
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000
 8005254:	48000400 	.word	0x48000400
 8005258:	10110000 	.word	0x10110000
 800525c:	48000800 	.word	0x48000800
 8005260:	48001c00 	.word	0x48001c00
 8005264:	0800f320 	.word	0x0800f320

08005268 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8005268:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800526a:	2120      	movs	r1, #32
 800526c:	4806      	ldr	r0, [pc, #24]	; (8005288 <HCI_TL_SPI_DeInit+0x20>)
 800526e:	f002 f89b 	bl	80073a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8005272:	2104      	movs	r1, #4
 8005274:	4805      	ldr	r0, [pc, #20]	; (800528c <HCI_TL_SPI_DeInit+0x24>)
 8005276:	f002 f897 	bl	80073a8 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800527a:	2101      	movs	r1, #1
 800527c:	4804      	ldr	r0, [pc, #16]	; (8005290 <HCI_TL_SPI_DeInit+0x28>)
 800527e:	f002 f893 	bl	80073a8 <HAL_GPIO_DeInit>
  return 0;
}
 8005282:	2000      	movs	r0, #0
 8005284:	bd08      	pop	{r3, pc}
 8005286:	bf00      	nop
 8005288:	48000800 	.word	0x48000800
 800528c:	48000400 	.word	0x48000400
 8005290:	48001c00 	.word	0x48001c00

08005294 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8005294:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8005296:	4c09      	ldr	r4, [pc, #36]	; (80052bc <HCI_TL_SPI_Reset+0x28>)
 8005298:	2200      	movs	r2, #0
 800529a:	2101      	movs	r1, #1
 800529c:	4620      	mov	r0, r4
 800529e:	f002 f922 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80052a2:	2005      	movs	r0, #5
 80052a4:	f000 fe90 	bl	8005fc8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80052a8:	2201      	movs	r2, #1
 80052aa:	4611      	mov	r1, r2
 80052ac:	4620      	mov	r0, r4
 80052ae:	f002 f91a 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80052b2:	2005      	movs	r0, #5
 80052b4:	f000 fe88 	bl	8005fc8 <HAL_Delay>
  return 0;
}  
 80052b8:	2000      	movs	r0, #0
 80052ba:	bd10      	pop	{r4, pc}
 80052bc:	48001c00 	.word	0x48001c00

080052c0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	4606      	mov	r6, r0
 80052c6:	460d      	mov	r5, r1
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 80052c8:	23ff      	movs	r3, #255	; 0xff
 80052ca:	f88d 300f 	strb.w	r3, [sp, #15]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <HCI_TL_SPI_Receive+0x84>)
 80052d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052d4:	9002      	str	r0, [sp, #8]
 80052d6:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80052da:	2200      	movs	r2, #0
 80052dc:	2104      	movs	r1, #4
 80052de:	481a      	ldr	r0, [pc, #104]	; (8005348 <HCI_TL_SPI_Receive+0x88>)
 80052e0:	f002 f901 	bl	80074e6 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80052e4:	2205      	movs	r2, #5
 80052e6:	4669      	mov	r1, sp
 80052e8:	a802      	add	r0, sp, #8
 80052ea:	f001 fde9 	bl	8006ec0 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 80052ee:	f89d 3000 	ldrb.w	r3, [sp]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d008      	beq.n	8005308 <HCI_TL_SPI_Receive+0x48>
  uint8_t len = 0;
 80052f6:	2400      	movs	r4, #0
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80052f8:	2201      	movs	r2, #1
 80052fa:	2104      	movs	r1, #4
 80052fc:	4812      	ldr	r0, [pc, #72]	; (8005348 <HCI_TL_SPI_Receive+0x88>)
 80052fe:	f002 f8f2 	bl	80074e6 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8005302:	4620      	mov	r0, r4
 8005304:	b004      	add	sp, #16
 8005306:	bd70      	pop	{r4, r5, r6, pc}
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8005308:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800530c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if(byte_count > 0) {
 8005310:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8005314:	d014      	beq.n	8005340 <HCI_TL_SPI_Receive+0x80>
      if (byte_count > size){
 8005316:	42ab      	cmp	r3, r5
 8005318:	d800      	bhi.n	800531c <HCI_TL_SPI_Receive+0x5c>
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800531a:	461d      	mov	r5, r3
      for(len = 0; len < byte_count; len++)
 800531c:	2400      	movs	r4, #0
 800531e:	e00b      	b.n	8005338 <HCI_TL_SPI_Receive+0x78>
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8005320:	2201      	movs	r2, #1
 8005322:	f10d 010e 	add.w	r1, sp, #14
 8005326:	f10d 000f 	add.w	r0, sp, #15
 800532a:	f001 fdc9 	bl	8006ec0 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800532e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005332:	5533      	strb	r3, [r6, r4]
      for(len = 0; len < byte_count; len++)
 8005334:	3401      	adds	r4, #1
 8005336:	b2e4      	uxtb	r4, r4
 8005338:	b2a3      	uxth	r3, r4
 800533a:	42ab      	cmp	r3, r5
 800533c:	d3f0      	bcc.n	8005320 <HCI_TL_SPI_Receive+0x60>
 800533e:	e7db      	b.n	80052f8 <HCI_TL_SPI_Receive+0x38>
  uint8_t len = 0;
 8005340:	2400      	movs	r4, #0
 8005342:	e7d9      	b.n	80052f8 <HCI_TL_SPI_Receive+0x38>
 8005344:	0800f210 	.word	0x0800f210
 8005348:	48000400 	.word	0x48000400

0800534c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	b085      	sub	sp, #20
 8005350:	4607      	mov	r7, r0
 8005352:	460e      	mov	r6, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005354:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <HCI_TL_SPI_Send+0x7c>)
 8005356:	e893 0003 	ldmia.w	r3, {r0, r1}
 800535a:	9002      	str	r0, [sp, #8]
 800535c:	f88d 100c 	strb.w	r1, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8005360:	f001 fec2 	bl	80070e8 <HAL_GetTick>
 8005364:	4605      	mov	r5, r0
 8005366:	e011      	b.n	800538c <HCI_TL_SPI_Send+0x40>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8005368:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800536c:	42b3      	cmp	r3, r6
 800536e:	d21e      	bcs.n	80053ae <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 8005370:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8005374:	2201      	movs	r2, #1
 8005376:	2104      	movs	r1, #4
 8005378:	4814      	ldr	r0, [pc, #80]	; (80053cc <HCI_TL_SPI_Send+0x80>)
 800537a:	f002 f8b4 	bl	80074e6 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800537e:	f001 feb3 	bl	80070e8 <HAL_GetTick>
 8005382:	1b40      	subs	r0, r0, r5
 8005384:	280f      	cmp	r0, #15
 8005386:	d819      	bhi.n	80053bc <HCI_TL_SPI_Send+0x70>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8005388:	2c00      	cmp	r4, #0
 800538a:	da19      	bge.n	80053c0 <HCI_TL_SPI_Send+0x74>
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800538c:	2200      	movs	r2, #0
 800538e:	2104      	movs	r1, #4
 8005390:	480e      	ldr	r0, [pc, #56]	; (80053cc <HCI_TL_SPI_Send+0x80>)
 8005392:	f002 f8a8 	bl	80074e6 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8005396:	2205      	movs	r2, #5
 8005398:	4669      	mov	r1, sp
 800539a:	a802      	add	r0, sp, #8
 800539c:	f001 fd90 	bl	8006ec0 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80053a0:	f89d 3000 	ldrb.w	r3, [sp]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d0df      	beq.n	8005368 <HCI_TL_SPI_Send+0x1c>
      result = -1;
 80053a8:	f04f 34ff 	mov.w	r4, #4294967295
 80053ac:	e7e2      	b.n	8005374 <HCI_TL_SPI_Send+0x28>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80053ae:	4632      	mov	r2, r6
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <HCI_TL_SPI_Send+0x84>)
 80053b2:	4638      	mov	r0, r7
 80053b4:	f001 fd84 	bl	8006ec0 <BSP_SPI1_SendRecv>
    result = 0;
 80053b8:	2400      	movs	r4, #0
 80053ba:	e7db      	b.n	8005374 <HCI_TL_SPI_Send+0x28>
      result = -3;
 80053bc:	f06f 0402 	mvn.w	r4, #2
  
  return result;
}
 80053c0:	4620      	mov	r0, r4
 80053c2:	b005      	add	sp, #20
 80053c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c6:	bf00      	nop
 80053c8:	0800f218 	.word	0x0800f218
 80053cc:	48000400 	.word	0x48000400
 80053d0:	20000238 	.word	0x20000238

080053d4 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80053d4:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80053d6:	2120      	movs	r1, #32
 80053d8:	4803      	ldr	r0, [pc, #12]	; (80053e8 <IsDataAvailable+0x14>)
 80053da:	f002 f87d 	bl	80074d8 <HAL_GPIO_ReadPin>
} 
 80053de:	2801      	cmp	r0, #1
 80053e0:	bf14      	ite	ne
 80053e2:	2000      	movne	r0, #0
 80053e4:	2001      	moveq	r0, #1
 80053e6:	bd08      	pop	{r3, pc}
 80053e8:	48000800 	.word	0x48000800

080053ec <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 80053ec:	b500      	push	{lr}
 80053ee:	b089      	sub	sp, #36	; 0x24
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <hci_tl_lowlevel_init+0x38>)
 80053f2:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <hci_tl_lowlevel_init+0x3c>)
 80053f6:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <hci_tl_lowlevel_init+0x40>)
 80053fa:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80053fc:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <hci_tl_lowlevel_init+0x44>)
 80053fe:	9304      	str	r3, [sp, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <hci_tl_lowlevel_init+0x48>)
 8005402:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
 8005404:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <hci_tl_lowlevel_init+0x4c>)
 8005406:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 8005408:	a801      	add	r0, sp, #4
 800540a:	f006 f8a7 	bl	800b55c <hci_register_io_bus>
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  //HAL_EXTI_GetHandle(&hexti5, EXTI_LINE_5);
  //HAL_EXTI_RegisterCallback(&hexti5, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0x03, 0x00);
 800540e:	2200      	movs	r2, #0
 8005410:	2103      	movs	r1, #3
 8005412:	2017      	movs	r0, #23
 8005414:	f001 fe80 	bl	8007118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005418:	2017      	movs	r0, #23
 800541a:	f001 feb5 	bl	8007188 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800541e:	b009      	add	sp, #36	; 0x24
 8005420:	f85d fb04 	ldr.w	pc, [sp], #4
 8005424:	0800519d 	.word	0x0800519d
 8005428:	08005269 	.word	0x08005269
 800542c:	0800534d 	.word	0x0800534d
 8005430:	080052c1 	.word	0x080052c1
 8005434:	08005295 	.word	0x08005295
 8005438:	08006eed 	.word	0x08006eed

0800543c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800543c:	b508      	push	{r3, lr}
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 800543e:	f7ff ffc9 	bl	80053d4 <IsDataAvailable>
 8005442:	b120      	cbz	r0, 800544e <hci_tl_lowlevel_isr+0x12>
  {        
    if(hci_notify_asynch_evt(NULL)) {
 8005444:	2000      	movs	r0, #0
 8005446:	f006 f963 	bl	800b710 <hci_notify_asynch_evt>
 800544a:	2800      	cmp	r0, #0
 800544c:	d0f7      	beq.n	800543e <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 800544e:	bd08      	pop	{r3, pc}

08005450 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8005450:	b510      	push	{r4, lr}
 8005452:	b0ba      	sub	sp, #232	; 0xe8
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005454:	2400      	movs	r4, #0
 8005456:	9435      	str	r4, [sp, #212]	; 0xd4
 8005458:	9436      	str	r4, [sp, #216]	; 0xd8
 800545a:	9437      	str	r4, [sp, #220]	; 0xdc
 800545c:	9438      	str	r4, [sp, #224]	; 0xe0
 800545e:	9439      	str	r4, [sp, #228]	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005460:	2244      	movs	r2, #68	; 0x44
 8005462:	4621      	mov	r1, r4
 8005464:	a824      	add	r0, sp, #144	; 0x90
 8005466:	f009 fa5d 	bl	800e924 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800546a:	2288      	movs	r2, #136	; 0x88
 800546c:	4621      	mov	r1, r4
 800546e:	a802      	add	r0, sp, #8
 8005470:	f009 fa58 	bl	800e924 <memset>
  
  __HAL_RCC_PWR_CLK_ENABLE();
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <SystemClock_Config+0xd0>)
 8005476:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800547c:	659a      	str	r2, [r3, #88]	; 0x58
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	9b01      	ldr	r3, [sp, #4]
  HAL_PWR_EnableBkUpAccess();
 8005488:	f002 fd86 	bl	8007f98 <HAL_PWR_EnableBkUpAccess>
  
  /* Enable the LSE Oscilator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 800548c:	2304      	movs	r3, #4
 800548e:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005490:	2301      	movs	r3, #1
 8005492:	9326      	str	r3, [sp, #152]	; 0x98
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8005494:	a824      	add	r0, sp, #144	; 0x90
 8005496:	f002 fe41 	bl	800811c <HAL_RCC_OscConfig>
 800549a:	b100      	cbz	r0, 800549e <SystemClock_Config+0x4e>
    while(1);
 800549c:	e7fe      	b.n	800549c <SystemClock_Config+0x4c>
  }
  
  /* Enable the CSS interrupt in case LSE signal is corrupted or not present */
  HAL_RCCEx_DisableLSECSS();
 800549e:	f003 fd8f 	bl	8008fc0 <HAL_RCCEx_DisableLSECSS>
  
  /* Enable MSI Oscillator and activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_MSI;
 80054a2:	2310      	movs	r3, #16
 80054a4:	9324      	str	r3, [sp, #144]	; 0x90
  RCC_OscInitStruct.MSIState            = RCC_MSI_ON;
 80054a6:	2301      	movs	r3, #1
 80054a8:	932a      	str	r3, [sp, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80054aa:	2200      	movs	r2, #0
 80054ac:	9228      	str	r2, [sp, #160]	; 0xa0
  RCC_OscInitStruct.MSIClockRange       = RCC_MSIRANGE_11;
 80054ae:	22b0      	movs	r2, #176	; 0xb0
 80054b0:	922c      	str	r2, [sp, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80054b2:	2202      	movs	r2, #2
 80054b4:	922e      	str	r2, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_MSI;
 80054b6:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM            = 6;
 80054b8:	2306      	movs	r3, #6
 80054ba:	9330      	str	r3, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN            = 40;
 80054bc:	2328      	movs	r3, #40	; 0x28
 80054be:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP            = 7;
 80054c0:	2307      	movs	r3, #7
 80054c2:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ            = 4;
 80054c4:	2304      	movs	r3, #4
 80054c6:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLR            = 4;
 80054c8:	9334      	str	r3, [sp, #208]	; 0xd0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80054ca:	a824      	add	r0, sp, #144	; 0x90
 80054cc:	f002 fe26 	bl	800811c <HAL_RCC_OscConfig>
 80054d0:	b100      	cbz	r0, 80054d4 <SystemClock_Config+0x84>
    while(1);
 80054d2:	e7fe      	b.n	80054d2 <SystemClock_Config+0x82>
  }
  
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054d8:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054de:	9323      	str	r3, [sp, #140]	; 0x8c
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054e0:	a802      	add	r0, sp, #8
 80054e2:	f003 fb43 	bl	8008b6c <HAL_RCCEx_PeriphCLKConfig>
 80054e6:	b100      	cbz	r0, 80054ea <SystemClock_Config+0x9a>
  {
    while(1);
 80054e8:	e7fe      	b.n	80054e8 <SystemClock_Config+0x98>
  }
  
  /* Enable MSI Auto-calibration through LSE */
  HAL_RCCEx_EnableMSIPLLMode();
 80054ea:	f003 fd77 	bl	8008fdc <HAL_RCCEx_EnableMSIPLLMode>
  
  /* Select MSI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80054ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80054f4:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80054f8:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80054fa:	a802      	add	r0, sp, #8
 80054fc:	f003 fb36 	bl	8008b6c <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005500:	230f      	movs	r3, #15
 8005502:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005504:	2303      	movs	r3, #3
 8005506:	9336      	str	r3, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005508:	2300      	movs	r3, #0
 800550a:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800550c:	9338      	str	r3, [sp, #224]	; 0xe0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800550e:	9339      	str	r3, [sp, #228]	; 0xe4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK){
 8005510:	2104      	movs	r1, #4
 8005512:	a835      	add	r0, sp, #212	; 0xd4
 8005514:	f003 f918 	bl	8008748 <HAL_RCC_ClockConfig>
 8005518:	b100      	cbz	r0, 800551c <SystemClock_Config+0xcc>
    while(1);
 800551a:	e7fe      	b.n	800551a <SystemClock_Config+0xca>
  }
}
 800551c:	b03a      	add	sp, #232	; 0xe8
 800551e:	bd10      	pop	{r4, pc}
 8005520:	40021000 	.word	0x40021000

08005524 <BSP_LSM303AGR_WriteReg_Acc>:
{
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	460d      	mov	r5, r1
 800552a:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 800552c:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_ACC_CS_LOW();
 8005530:	2200      	movs	r2, #0
 8005532:	2110      	movs	r1, #16
 8005534:	480f      	ldr	r0, [pc, #60]	; (8005574 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 8005536:	f001 ffd6 	bl	80074e6 <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 800553a:	2101      	movs	r1, #1
 800553c:	f10d 0007 	add.w	r0, sp, #7
 8005540:	f001 fcac 	bl	8006e9c <BSP_SPI2_Send>
 8005544:	2801      	cmp	r0, #1
 8005546:	d00f      	beq.n	8005568 <BSP_LSM303AGR_WriteReg_Acc+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8005548:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 800554c:	4621      	mov	r1, r4
 800554e:	4628      	mov	r0, r5
 8005550:	f001 fca4 	bl	8006e9c <BSP_SPI2_Send>
 8005554:	42a0      	cmp	r0, r4
 8005556:	d109      	bne.n	800556c <BSP_LSM303AGR_WriteReg_Acc+0x48>
  LSM_ACC_CS_HIGH();
 8005558:	2201      	movs	r2, #1
 800555a:	2110      	movs	r1, #16
 800555c:	4805      	ldr	r0, [pc, #20]	; (8005574 <BSP_LSM303AGR_WriteReg_Acc+0x50>)
 800555e:	f001 ffc2 	bl	80074e6 <HAL_GPIO_WritePin>
}
 8005562:	4630      	mov	r0, r6
 8005564:	b002      	add	sp, #8
 8005566:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 8005568:	2600      	movs	r6, #0
 800556a:	e7ef      	b.n	800554c <BSP_LSM303AGR_WriteReg_Acc+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800556c:	f06f 0605 	mvn.w	r6, #5
 8005570:	e7f2      	b.n	8005558 <BSP_LSM303AGR_WriteReg_Acc+0x34>
 8005572:	bf00      	nop
 8005574:	48000800 	.word	0x48000800

08005578 <startAcc>:
static void startAcc() {
 8005578:	b500      	push	{lr}
 800557a:	b085      	sub	sp, #20
	CTRL_REG1_A[0] = 0x57;
 800557c:	2357      	movs	r3, #87	; 0x57
 800557e:	f88d 3008 	strb.w	r3, [sp, #8]
	BSP_LSM303AGR_WriteReg_Acc(0x20,CTRL_REG1_A,1);
 8005582:	2201      	movs	r2, #1
 8005584:	a902      	add	r1, sp, #8
 8005586:	2020      	movs	r0, #32
 8005588:	f7ff ffcc 	bl	8005524 <BSP_LSM303AGR_WriteReg_Acc>
	CTRL_REG4_A[0] = 0x81;
 800558c:	2381      	movs	r3, #129	; 0x81
 800558e:	f88d 3000 	strb.w	r3, [sp]
	BSP_LSM303AGR_WriteReg_Acc(0x23,CTRL_REG4_A,1);
 8005592:	2201      	movs	r2, #1
 8005594:	4669      	mov	r1, sp
 8005596:	2023      	movs	r0, #35	; 0x23
 8005598:	f7ff ffc4 	bl	8005524 <BSP_LSM303AGR_WriteReg_Acc>
}
 800559c:	b005      	add	sp, #20
 800559e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080055a4 <BSP_LSM303AGR_WriteReg_Mag>:
{
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	460d      	mov	r5, r1
 80055aa:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 80055ac:	f88d 0007 	strb.w	r0, [sp, #7]
  LSM_MAG_CS_LOW();
 80055b0:	2200      	movs	r2, #0
 80055b2:	2102      	movs	r1, #2
 80055b4:	480f      	ldr	r0, [pc, #60]	; (80055f4 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 80055b6:	f001 ff96 	bl	80074e6 <HAL_GPIO_WritePin>
  if (BSP_SPI2_Send(&dataReg, 1) != 1)
 80055ba:	2101      	movs	r1, #1
 80055bc:	f10d 0007 	add.w	r0, sp, #7
 80055c0:	f001 fc6c 	bl	8006e9c <BSP_SPI2_Send>
 80055c4:	2801      	cmp	r0, #1
 80055c6:	d00f      	beq.n	80055e8 <BSP_LSM303AGR_WriteReg_Mag+0x44>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055c8:	f06f 0605 	mvn.w	r6, #5
  if (BSP_SPI2_Send(pdata, len) != len)
 80055cc:	4621      	mov	r1, r4
 80055ce:	4628      	mov	r0, r5
 80055d0:	f001 fc64 	bl	8006e9c <BSP_SPI2_Send>
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d109      	bne.n	80055ec <BSP_LSM303AGR_WriteReg_Mag+0x48>
  LSM_MAG_CS_HIGH();
 80055d8:	2201      	movs	r2, #1
 80055da:	2102      	movs	r1, #2
 80055dc:	4805      	ldr	r0, [pc, #20]	; (80055f4 <BSP_LSM303AGR_WriteReg_Mag+0x50>)
 80055de:	f001 ff82 	bl	80074e6 <HAL_GPIO_WritePin>
}
 80055e2:	4630      	mov	r0, r6
 80055e4:	b002      	add	sp, #8
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = BSP_ERROR_NONE;
 80055e8:	2600      	movs	r6, #0
 80055ea:	e7ef      	b.n	80055cc <BSP_LSM303AGR_WriteReg_Mag+0x28>
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 80055ec:	f06f 0605 	mvn.w	r6, #5
 80055f0:	e7f2      	b.n	80055d8 <BSP_LSM303AGR_WriteReg_Mag+0x34>
 80055f2:	bf00      	nop
 80055f4:	48000400 	.word	0x48000400

080055f8 <startMag>:
static void startMag() {
 80055f8:	b500      	push	{lr}
 80055fa:	b087      	sub	sp, #28
	CFG_REG_A_M[0] = 0x8C;
 80055fc:	238c      	movs	r3, #140	; 0x8c
 80055fe:	f88d 3010 	strb.w	r3, [sp, #16]
	BSP_LSM303AGR_WriteReg_Mag(0x60U,CFG_REG_A_M,1);
 8005602:	2201      	movs	r2, #1
 8005604:	a904      	add	r1, sp, #16
 8005606:	2060      	movs	r0, #96	; 0x60
 8005608:	f7ff ffcc 	bl	80055a4 <BSP_LSM303AGR_WriteReg_Mag>
	CFG_REG_B_M[0] = 0x03;
 800560c:	2303      	movs	r3, #3
 800560e:	f88d 3008 	strb.w	r3, [sp, #8]
	BSP_LSM303AGR_WriteReg_Mag(0x61U,CFG_REG_B_M,1);
 8005612:	2201      	movs	r2, #1
 8005614:	a902      	add	r1, sp, #8
 8005616:	2061      	movs	r0, #97	; 0x61
 8005618:	f7ff ffc4 	bl	80055a4 <BSP_LSM303AGR_WriteReg_Mag>
	CFG_REG_C_M[0] = 0x10;
 800561c:	2310      	movs	r3, #16
 800561e:	f88d 3000 	strb.w	r3, [sp]
	BSP_LSM303AGR_WriteReg_Mag(0x62U,CFG_REG_C_M,1);
 8005622:	2201      	movs	r2, #1
 8005624:	4669      	mov	r1, sp
 8005626:	2062      	movs	r0, #98	; 0x62
 8005628:	f7ff ffbc 	bl	80055a4 <BSP_LSM303AGR_WriteReg_Mag>
}
 800562c:	b007      	add	sp, #28
 800562e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005634 <Init_BlueNRG_Stack>:
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b0d3      	sub	sp, #332	; 0x14c
  char customName[8] = "CSys704";
 8005638:	4a6c      	ldr	r2, [pc, #432]	; (80057ec <Init_BlueNRG_Stack+0x1b8>)
 800563a:	ab4e      	add	r3, sp, #312	; 0x138
 800563c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005640:	e883 0003 	stmia.w	r3, {r0, r1}
  for(int i=0; i<7; i++)
 8005644:	2300      	movs	r3, #0
 8005646:	2b06      	cmp	r3, #6
 8005648:	dc08      	bgt.n	800565c <Init_BlueNRG_Stack+0x28>
    BoardName[i]= customName[i];
 800564a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 800564e:	446a      	add	r2, sp
 8005650:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8005654:	f802 1c08 	strb.w	r1, [r2, #-8]
  for(int i=0; i<7; i++)
 8005658:	3301      	adds	r3, #1
 800565a:	e7f4      	b.n	8005646 <Init_BlueNRG_Stack+0x12>
  BoardName[7]= 0;
 800565c:	2100      	movs	r1, #0
 800565e:	f88d 1147 	strb.w	r1, [sp, #327]	; 0x147
  hci_init(HCI_Event_CB, NULL);
 8005662:	4863      	ldr	r0, [pc, #396]	; (80057f0 <Init_BlueNRG_Stack+0x1bc>)
 8005664:	f005 ff50 	bl	800b508 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8005668:	f50d 7197 	add.w	r1, sp, #302	; 0x12e
 800566c:	a84c      	add	r0, sp, #304	; 0x130
 800566e:	f005 fe32 	bl	800b2d6 <getBlueNRGVersion>
  aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, 6, &data_len_out, bdaddr);
 8005672:	4c60      	ldr	r4, [pc, #384]	; (80057f4 <Init_BlueNRG_Stack+0x1c0>)
 8005674:	4623      	mov	r3, r4
 8005676:	f20d 1231 	addw	r2, sp, #305	; 0x131
 800567a:	2106      	movs	r1, #6
 800567c:	2080      	movs	r0, #128	; 0x80
 800567e:	f005 fdc6 	bl	800b20e <aci_hal_read_config_data>
  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8005682:	7963      	ldrb	r3, [r4, #5]
 8005684:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005688:	2bc0      	cmp	r3, #192	; 0xc0
 800568a:	d016      	beq.n	80056ba <Init_BlueNRG_Stack+0x86>
    XPRINTF("\r\nStatic Random address not well formed.\r\n");
 800568c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8005690:	4c59      	ldr	r4, [pc, #356]	; (80057f8 <Init_BlueNRG_Stack+0x1c4>)
 8005692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800569a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800569e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80056a2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80056a6:	f82c 2b02 	strh.w	r2, [ip], #2
 80056aa:	0c12      	lsrs	r2, r2, #16
 80056ac:	f88c 2000 	strb.w	r2, [ip]
 80056b0:	212a      	movs	r1, #42	; 0x2a
 80056b2:	a80b      	add	r0, sp, #44	; 0x2c
 80056b4:	f001 f99a 	bl	80069ec <CDC_Fill_Buffer>
    while(1);
 80056b8:	e7fe      	b.n	80056b8 <Init_BlueNRG_Stack+0x84>
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, data_len_out,
 80056ba:	4a4e      	ldr	r2, [pc, #312]	; (80057f4 <Init_BlueNRG_Stack+0x1c0>)
 80056bc:	f89d 1131 	ldrb.w	r1, [sp, #305]	; 0x131
 80056c0:	2000      	movs	r0, #0
 80056c2:	f005 fd71 	bl	800b1a8 <aci_hal_write_config_data>
  hci_reset();
 80056c6:	f005 fe30 	bl	800b32a <hci_reset>
  ret = aci_gatt_init();    
 80056ca:	f005 fc42 	bl	800af52 <aci_gatt_init>
  if(ret){
 80056ce:	bb38      	cbnz	r0, 8005720 <Init_BlueNRG_Stack+0xec>
  ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80056d0:	f50d 7399 	add.w	r3, sp, #306	; 0x132
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	ab4d      	add	r3, sp, #308	; 0x134
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	f50d 739b 	add.w	r3, sp, #310	; 0x136
 80056de:	2207      	movs	r2, #7
 80056e0:	2100      	movs	r1, #0
 80056e2:	2001      	movs	r0, #1
 80056e4:	f005 fb26 	bl	800ad34 <aci_gap_init_IDB05A1>
  if(ret != BLE_STATUS_SUCCESS){
 80056e8:	bb48      	cbnz	r0, 800573e <Init_BlueNRG_Stack+0x10a>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 80056ea:	ab50      	add	r3, sp, #320	; 0x140
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	2307      	movs	r3, #7
 80056f0:	2200      	movs	r2, #0
 80056f2:	f8bd 1134 	ldrh.w	r1, [sp, #308]	; 0x134
 80056f6:	f8bd 0136 	ldrh.w	r0, [sp, #310]	; 0x136
 80056fa:	f005 fcf6 	bl	800b0ea <aci_gatt_update_char_value>
  if(ret){
 80056fe:	b348      	cbz	r0, 8005754 <Init_BlueNRG_Stack+0x120>
     XPRINTF("\r\naci_gatt_update_char_value failed\r\n");
 8005700:	ac0b      	add	r4, sp, #44	; 0x2c
 8005702:	4d3e      	ldr	r5, [pc, #248]	; (80057fc <Init_BlueNRG_Stack+0x1c8>)
 8005704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005710:	f844 0b04 	str.w	r0, [r4], #4
 8005714:	8021      	strh	r1, [r4, #0]
 8005716:	2125      	movs	r1, #37	; 0x25
 8005718:	a80b      	add	r0, sp, #44	; 0x2c
 800571a:	f001 f967 	bl	80069ec <CDC_Fill_Buffer>
    while(1);
 800571e:	e7fe      	b.n	800571e <Init_BlueNRG_Stack+0xea>
     XPRINTF("\r\nGATT_Init failed\r\n");
 8005720:	ac0b      	add	r4, sp, #44	; 0x2c
 8005722:	4d37      	ldr	r5, [pc, #220]	; (8005800 <Init_BlueNRG_Stack+0x1cc>)
 8005724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800572c:	f844 0b04 	str.w	r0, [r4], #4
 8005730:	7021      	strb	r1, [r4, #0]
 8005732:	2114      	movs	r1, #20
 8005734:	a80b      	add	r0, sp, #44	; 0x2c
 8005736:	f001 f959 	bl	80069ec <CDC_Fill_Buffer>
}
 800573a:	b053      	add	sp, #332	; 0x14c
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     XPRINTF("\r\nGAP_Init failed\r\n");
 800573e:	ac0b      	add	r4, sp, #44	; 0x2c
 8005740:	4d30      	ldr	r5, [pc, #192]	; (8005804 <Init_BlueNRG_Stack+0x1d0>)
 8005742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	2113      	movs	r1, #19
 800574c:	a80b      	add	r0, sp, #44	; 0x2c
 800574e:	f001 f94d 	bl	80069ec <CDC_Fill_Buffer>
     goto fail;
 8005752:	e7f2      	b.n	800573a <Init_BlueNRG_Stack+0x106>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8005754:	2001      	movs	r0, #1
 8005756:	9003      	str	r0, [sp, #12]
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <Init_BlueNRG_Stack+0x1d4>)
 800575a:	9302      	str	r3, [sp, #8]
 800575c:	2100      	movs	r1, #0
 800575e:	9101      	str	r1, [sp, #4]
 8005760:	2310      	movs	r3, #16
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2307      	movs	r3, #7
 8005766:	460a      	mov	r2, r1
 8005768:	f005 fb7c 	bl	800ae64 <aci_gap_set_auth_requirement>
  if (ret != BLE_STATUS_SUCCESS) {
 800576c:	2800      	cmp	r0, #0
 800576e:	d12d      	bne.n	80057cc <Init_BlueNRG_Stack+0x198>
  XPRINTF("SERVER: BLE Stack Initialized \r\n"
 8005770:	f89d 2130 	ldrb.w	r2, [sp, #304]	; 0x130
 8005774:	f8bd 112e 	ldrh.w	r1, [sp, #302]	; 0x12e
 8005778:	f001 000f 	and.w	r0, r1, #15
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <Init_BlueNRG_Stack+0x1c0>)
 800577e:	795c      	ldrb	r4, [r3, #5]
 8005780:	791f      	ldrb	r7, [r3, #4]
 8005782:	f893 e003 	ldrb.w	lr, [r3, #3]
 8005786:	789d      	ldrb	r5, [r3, #2]
 8005788:	785e      	ldrb	r6, [r3, #1]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	9309      	str	r3, [sp, #36]	; 0x24
 800578e:	9608      	str	r6, [sp, #32]
 8005790:	9507      	str	r5, [sp, #28]
 8005792:	f8cd e018 	str.w	lr, [sp, #24]
 8005796:	9705      	str	r7, [sp, #20]
 8005798:	9404      	str	r4, [sp, #16]
 800579a:	ab50      	add	r3, sp, #320	; 0x140
 800579c:	9303      	str	r3, [sp, #12]
 800579e:	3061      	adds	r0, #97	; 0x61
 80057a0:	9002      	str	r0, [sp, #8]
 80057a2:	f3c1 1303 	ubfx	r3, r1, #4, #4
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	0a09      	lsrs	r1, r1, #8
 80057aa:	9100      	str	r1, [sp, #0]
 80057ac:	f002 030f 	and.w	r3, r2, #15
 80057b0:	0912      	lsrs	r2, r2, #4
 80057b2:	4916      	ldr	r1, [pc, #88]	; (800580c <Init_BlueNRG_Stack+0x1d8>)
 80057b4:	a80b      	add	r0, sp, #44	; 0x2c
 80057b6:	f009 f9ad 	bl	800eb14 <siprintf>
 80057ba:	4601      	mov	r1, r0
 80057bc:	a80b      	add	r0, sp, #44	; 0x2c
 80057be:	f001 f915 	bl	80069ec <CDC_Fill_Buffer>
  aci_hal_set_tx_power_level(1,4);
 80057c2:	2104      	movs	r1, #4
 80057c4:	2001      	movs	r0, #1
 80057c6:	f005 fd5e 	bl	800b286 <aci_hal_set_tx_power_level>
  return;
 80057ca:	e7b6      	b.n	800573a <Init_BlueNRG_Stack+0x106>
     XPRINTF("\r\nGAP setting Authentication failed\r\n");
 80057cc:	ac0b      	add	r4, sp, #44	; 0x2c
 80057ce:	4d10      	ldr	r5, [pc, #64]	; (8005810 <Init_BlueNRG_Stack+0x1dc>)
 80057d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057dc:	f844 0b04 	str.w	r0, [r4], #4
 80057e0:	8021      	strh	r1, [r4, #0]
 80057e2:	2125      	movs	r1, #37	; 0x25
 80057e4:	a80b      	add	r0, sp, #44	; 0x2c
 80057e6:	f001 f901 	bl	80069ec <CDC_Fill_Buffer>
     goto fail;
 80057ea:	e7a6      	b.n	800573a <Init_BlueNRG_Stack+0x106>
 80057ec:	0800f454 	.word	0x0800f454
 80057f0:	08005119 	.word	0x08005119
 80057f4:	20000338 	.word	0x20000338
 80057f8:	0800f338 	.word	0x0800f338
 80057fc:	0800f390 	.word	0x0800f390
 8005800:	0800f364 	.word	0x0800f364
 8005804:	0800f37c 	.word	0x0800f37c
 8005808:	0001e240 	.word	0x0001e240
 800580c:	0800f3e0 	.word	0x0800f3e0
 8005810:	0800f3b8 	.word	0x0800f3b8

08005814 <Init_BlueNRG_Custom_Services>:
{
 8005814:	b510      	push	{r4, lr}
 8005816:	b0c0      	sub	sp, #256	; 0x100
  ret = Add_HW_SW_ServW2ST_Service();
 8005818:	f7ff fad2 	bl	8004dc0 <Add_HW_SW_ServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS)
 800581c:	b998      	cbnz	r0, 8005846 <Init_BlueNRG_Custom_Services+0x32>
     XPRINTF("HW & SW Service W2ST added successfully\r\n");
 800581e:	46ec      	mov	ip, sp
 8005820:	4c11      	ldr	r4, [pc, #68]	; (8005868 <Init_BlueNRG_Custom_Services+0x54>)
 8005822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005824:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800582a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800582e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005832:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005836:	f8ac 2000 	strh.w	r2, [ip]
 800583a:	2129      	movs	r1, #41	; 0x29
 800583c:	4668      	mov	r0, sp
 800583e:	f001 f8d5 	bl	80069ec <CDC_Fill_Buffer>
}
 8005842:	b040      	add	sp, #256	; 0x100
 8005844:	bd10      	pop	{r4, pc}
     XPRINTF("\r\nError while adding HW & SW Service W2ST\r\n");
 8005846:	46ec      	mov	ip, sp
 8005848:	4c08      	ldr	r4, [pc, #32]	; (800586c <Init_BlueNRG_Custom_Services+0x58>)
 800584a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800584c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005852:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8005856:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800585a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800585e:	212b      	movs	r1, #43	; 0x2b
 8005860:	4668      	mov	r0, sp
 8005862:	f001 f8c3 	bl	80069ec <CDC_Fill_Buffer>
}
 8005866:	e7ec      	b.n	8005842 <Init_BlueNRG_Custom_Services+0x2e>
 8005868:	0800f45c 	.word	0x0800f45c
 800586c:	0800f488 	.word	0x0800f488

08005870 <SendMotionData>:
{
 8005870:	b508      	push	{r3, lr}
  AccGyroMag_Update(&ACC_Value,(BSP_MOTION_SENSOR_Axes_t*)&COMP_Value,&MAG_Value);
 8005872:	4804      	ldr	r0, [pc, #16]	; (8005884 <SendMotionData+0x14>)
 8005874:	f100 0208 	add.w	r2, r0, #8
 8005878:	f100 0114 	add.w	r1, r0, #20
 800587c:	3020      	adds	r0, #32
 800587e:	f7ff fb3f 	bl	8004f00 <AccGyroMag_Update>
}
 8005882:	bd08      	pop	{r3, pc}
 8005884:	20000338 	.word	0x20000338

08005888 <HAL_TIM_OC_DelayElapsedCallback>:
{
 8005888:	b508      	push	{r3, lr}
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800588a:	7f03      	ldrb	r3, [r0, #28]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d000      	beq.n	8005892 <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
 8005890:	bd08      	pop	{r3, pc}
     uhCapture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8005892:	210c      	movs	r1, #12
 8005894:	f004 f9e4 	bl	8009c60 <HAL_TIM_ReadCapturedValue>
    __HAL_TIM_SET_COMPARE(&TimCCHandle, TIM_CHANNEL_4, (uhCapture + uhCCR4_Val));
 8005898:	4b04      	ldr	r3, [pc, #16]	; (80058ac <HAL_TIM_OC_DelayElapsedCallback+0x24>)
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	4904      	ldr	r1, [pc, #16]	; (80058b0 <HAL_TIM_OC_DelayElapsedCallback+0x28>)
 800589e:	6809      	ldr	r1, [r1, #0]
 80058a0:	4408      	add	r0, r1
 80058a2:	6410      	str	r0, [r2, #64]	; 0x40
    SendAccGyroMag=1;
 80058a4:	2201      	movs	r2, #1
 80058a6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80058a8:	e7f2      	b.n	8005890 <HAL_TIM_OC_DelayElapsedCallback+0x8>
 80058aa:	bf00      	nop
 80058ac:	20000338 	.word	0x20000338
 80058b0:	20000004 	.word	0x20000004

080058b4 <HAL_TIM_PeriodElapsedCallback>:
{
 80058b4:	b508      	push	{r3, lr}
  if(htim == (&TimEnvHandle)) {
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058b8:	4298      	cmp	r0, r3
 80058ba:	d003      	beq.n	80058c4 <HAL_TIM_PeriodElapsedCallback+0x10>
    } else if(htim == (&TimHandle)) {
 80058bc:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80058be:	4298      	cmp	r0, r3
 80058c0:	d005      	beq.n	80058ce <HAL_TIM_PeriodElapsedCallback+0x1a>
}
 80058c2:	bd08      	pop	{r3, pc}
	  ReadSensor=1;
 80058c4:	3b7c      	subs	r3, #124	; 0x7c
 80058c6:	2201      	movs	r2, #1
 80058c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80058cc:	e7f9      	b.n	80058c2 <HAL_TIM_PeriodElapsedCallback+0xe>
      CDC_TIM_PeriodElapsedCallback(htim);
 80058ce:	f001 f8ad 	bl	8006a2c <CDC_TIM_PeriodElapsedCallback>
}
 80058d2:	e7f6      	b.n	80058c2 <HAL_TIM_PeriodElapsedCallback+0xe>
 80058d4:	200003b4 	.word	0x200003b4
 80058d8:	20000878 	.word	0x20000878

080058dc <Sensor_IO_SPI_CS_Init_All>:
{
 80058dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e0:	b08b      	sub	sp, #44	; 0x2c
  BSP_LSM6DSM_CS_GPIO_CLK_ENABLE();
 80058e2:	4b72      	ldr	r3, [pc, #456]	; (8005aac <Sensor_IO_SPI_CS_Init_All+0x1d0>)
 80058e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e6:	f042 0202 	orr.w	r2, r2, #2
 80058ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80058ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ee:	f002 0202 	and.w	r2, r2, #2
 80058f2:	9200      	str	r2, [sp, #0]
 80058f4:	9a00      	ldr	r2, [sp, #0]
  BSP_LSM303AGR_M_CS_GPIO_CLK_ENABLE();
 80058f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058f8:	f042 0202 	orr.w	r2, r2, #2
 80058fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80058fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005900:	f002 0202 	and.w	r2, r2, #2
 8005904:	9201      	str	r2, [sp, #4]
 8005906:	9a01      	ldr	r2, [sp, #4]
  BSP_LSM303AGR_X_CS_GPIO_CLK_ENABLE();
 8005908:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800590a:	f042 0204 	orr.w	r2, r2, #4
 800590e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005912:	f002 0204 	and.w	r2, r2, #4
 8005916:	9202      	str	r2, [sp, #8]
 8005918:	9a02      	ldr	r2, [sp, #8]
  BSP_LPS22HB_CS_GPIO_CLK_ENABLE();
 800591a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	64da      	str	r2, [r3, #76]	; 0x4c
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	9303      	str	r3, [sp, #12]
 800592a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800592c:	4d60      	ldr	r5, [pc, #384]	; (8005ab0 <Sensor_IO_SPI_CS_Init_All+0x1d4>)
 800592e:	2201      	movs	r2, #1
 8005930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005934:	4628      	mov	r0, r5
 8005936:	f001 fdd6 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 800593a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8005ab4 <Sensor_IO_SPI_CS_Init_All+0x1d8>
 800593e:	2201      	movs	r2, #1
 8005940:	2110      	movs	r1, #16
 8005942:	4640      	mov	r0, r8
 8005944:	f001 fdcf 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 8005948:	2201      	movs	r2, #1
 800594a:	2102      	movs	r1, #2
 800594c:	4628      	mov	r0, r5
 800594e:	f001 fdca 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005952:	2201      	movs	r2, #1
 8005954:	2108      	movs	r1, #8
 8005956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800595a:	f001 fdc4 	bl	80074e6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800595e:	2303      	movs	r3, #3
 8005960:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2600      	movs	r6, #0
 8005964:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005966:	2401      	movs	r4, #1
 8005968:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = BSP_LSM6DSM_CS_PIN;
 800596a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800596e:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(BSP_LSM6DSM_CS_PORT, &GPIO_InitStruct);
 8005972:	a905      	add	r1, sp, #20
 8005974:	4628      	mov	r0, r5
 8005976:	f001 fc29 	bl	80071cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 800597a:	4622      	mov	r2, r4
 800597c:	4649      	mov	r1, r9
 800597e:	4628      	mov	r0, r5
 8005980:	f001 fdb1 	bl	80074e6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_X_CS_PIN;
 8005984:	2710      	movs	r7, #16
 8005986:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_X_CS_PORT, &GPIO_InitStruct);
 8005988:	a905      	add	r1, sp, #20
 800598a:	4640      	mov	r0, r8
 800598c:	f001 fc1e 	bl	80071cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN,GPIO_PIN_SET);
 8005990:	4622      	mov	r2, r4
 8005992:	4639      	mov	r1, r7
 8005994:	4640      	mov	r0, r8
 8005996:	f001 fda6 	bl	80074e6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LSM303AGR_M_CS_PIN;
 800599a:	f04f 0b02 	mov.w	fp, #2
 800599e:	f8cd b014 	str.w	fp, [sp, #20]
  HAL_GPIO_Init(BSP_LSM303AGR_M_CS_PORT, &GPIO_InitStruct);
 80059a2:	a905      	add	r1, sp, #20
 80059a4:	4628      	mov	r0, r5
 80059a6:	f001 fc11 	bl	80071cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN,GPIO_PIN_SET);
 80059aa:	4622      	mov	r2, r4
 80059ac:	4659      	mov	r1, fp
 80059ae:	4628      	mov	r0, r5
 80059b0:	f001 fd99 	bl	80074e6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BSP_LPS22HB_CS_PIN;
 80059b4:	f04f 0a08 	mov.w	sl, #8
 80059b8:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(BSP_LPS22HB_CS_PORT, &GPIO_InitStruct);
 80059bc:	a905      	add	r1, sp, #20
 80059be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059c2:	f001 fc03 	bl	80071cc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 80059c6:	4622      	mov	r2, r4
 80059c8:	4651      	mov	r1, sl
 80059ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ce:	f001 fd8a 	bl	80074e6 <HAL_GPIO_WritePin>
  	 if(BSP_SPI2_Init() == BSP_ERROR_NONE)
 80059d2:	f001 fb05 	bl	8006fe0 <BSP_SPI2_Init>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 80059d6:	4632      	mov	r2, r6
 80059d8:	4659      	mov	r1, fp
 80059da:	4628      	mov	r0, r5
 80059dc:	f001 fd83 	bl	80074e6 <HAL_GPIO_WritePin>
  inData[0] = (0x62U);
 80059e0:	2362      	movs	r3, #98	; 0x62
 80059e2:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80059e6:	4621      	mov	r1, r4
 80059e8:	eb0d 0007 	add.w	r0, sp, r7
 80059ec:	f001 fa56 	bl	8006e9c <BSP_SPI2_Send>
  inData[0] = 0x20;
 80059f0:	2320      	movs	r3, #32
 80059f2:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 80059f6:	4621      	mov	r1, r4
 80059f8:	eb0d 0007 	add.w	r0, sp, r7
 80059fc:	f001 fa4e 	bl	8006e9c <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005a00:	4622      	mov	r2, r4
 8005a02:	4659      	mov	r1, fp
 8005a04:	4628      	mov	r0, r5
 8005a06:	f001 fd6e 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_RESET);
 8005a0a:	4632      	mov	r2, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f001 fd69 	bl	80074e6 <HAL_GPIO_WritePin>
  inData[0] = (0x23U);
 8005a14:	2323      	movs	r3, #35	; 0x23
 8005a16:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	eb0d 0007 	add.w	r0, sp, r7
 8005a20:	f001 fa3c 	bl	8006e9c <BSP_SPI2_Send>
  inData[0] = 0x01;
 8005a24:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a28:	4621      	mov	r1, r4
 8005a2a:	eb0d 0007 	add.w	r0, sp, r7
 8005a2e:	f001 fa35 	bl	8006e9c <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM303AGR_X_CS_PORT, BSP_LSM303AGR_X_CS_PIN, GPIO_PIN_SET);
 8005a32:	4622      	mov	r2, r4
 8005a34:	4639      	mov	r1, r7
 8005a36:	4640      	mov	r0, r8
 8005a38:	f001 fd55 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_RESET);
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4651      	mov	r1, sl
 8005a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a44:	f001 fd4f 	bl	80074e6 <HAL_GPIO_WritePin>
  inData[0] = (0x10U);
 8005a48:	f88d 7010 	strb.w	r7, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	eb0d 0007 	add.w	r0, sp, r7
 8005a52:	f001 fa23 	bl	8006e9c <BSP_SPI2_Send>
  inData[0] = 0x01;
 8005a56:	f88d 4010 	strb.w	r4, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	eb0d 0007 	add.w	r0, sp, r7
 8005a60:	f001 fa1c 	bl	8006e9c <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LPS22HB_CS_PORT, BSP_LPS22HB_CS_PIN, GPIO_PIN_SET);
 8005a64:	4622      	mov	r2, r4
 8005a66:	4651      	mov	r1, sl
 8005a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a6c:	f001 fd3b 	bl	80074e6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_RESET);
 8005a70:	4632      	mov	r2, r6
 8005a72:	4649      	mov	r1, r9
 8005a74:	4628      	mov	r0, r5
 8005a76:	f001 fd36 	bl	80074e6 <HAL_GPIO_WritePin>
  inData[0] = (0x12U);
 8005a7a:	2312      	movs	r3, #18
 8005a7c:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a80:	4621      	mov	r1, r4
 8005a82:	eb0d 0007 	add.w	r0, sp, r7
 8005a86:	f001 fa09 	bl	8006e9c <BSP_SPI2_Send>
  inData[0] = 0x0C;
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f88d 3010 	strb.w	r3, [sp, #16]
  BSP_SPI2_Send(inData,1);
 8005a90:	4621      	mov	r1, r4
 8005a92:	eb0d 0007 	add.w	r0, sp, r7
 8005a96:	f001 fa01 	bl	8006e9c <BSP_SPI2_Send>
  HAL_GPIO_WritePin(BSP_LSM6DSM_CS_PORT, BSP_LSM6DSM_CS_PIN, GPIO_PIN_SET);
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f001 fd21 	bl	80074e6 <HAL_GPIO_WritePin>
}
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	b00b      	add	sp, #44	; 0x2c
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	48000400 	.word	0x48000400
 8005ab4:	48000800 	.word	0x48000800

08005ab8 <LSM303AGR_SPI_Read_nBytes>:
{
 8005ab8:	b410      	push	{r4}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005aba:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005abc:	6804      	ldr	r4, [r0, #0]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	6023      	str	r3, [r4, #0]
  while (nBytesToRead > 1U)
 8005ac6:	2a01      	cmp	r2, #1
 8005ac8:	d90a      	bls.n	8005ae0 <LSM303AGR_SPI_Read_nBytes+0x28>
    if (xSpiHandle->Instance->SR & SPI_FLAG_RXNE)
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	689c      	ldr	r4, [r3, #8]
 8005ace:	f014 0f01 	tst.w	r4, #1
 8005ad2:	d0f8      	beq.n	8005ac6 <LSM303AGR_SPI_Read_nBytes+0xe>
      *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005ad4:	7b1b      	ldrb	r3, [r3, #12]
 8005ad6:	f801 3b01 	strb.w	r3, [r1], #1
      nBytesToRead--;
 8005ada:	3a01      	subs	r2, #1
 8005adc:	b292      	uxth	r2, r2
 8005ade:	e7f2      	b.n	8005ac6 <LSM303AGR_SPI_Read_nBytes+0xe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005ae8:	6802      	ldr	r2, [r0, #0]
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005af2:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005af4:	6803      	ldr	r3, [r0, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	f012 0f01 	tst.w	r2, #1
 8005afc:	d0fa      	beq.n	8005af4 <LSM303AGR_SPI_Read_nBytes+0x3c>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005afe:	7b1b      	ldrb	r3, [r3, #12]
 8005b00:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b02:	6803      	ldr	r3, [r0, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b0a:	d1fa      	bne.n	8005b02 <LSM303AGR_SPI_Read_nBytes+0x4a>
}
 8005b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LSM303AGR_SPI_Read>:
  __ASM volatile ("cpsid i" : : : "memory");
 8005b12:	b672      	cpsid	i
  __HAL_SPI_ENABLE(xSpiHandle);
 8005b14:	6802      	ldr	r2, [r0, #0]
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1c:	6013      	str	r3, [r2, #0]
  __asm("dsb\n");
 8005b1e:	f3bf 8f4f 	dsb	sy
  __asm("dsb\n");
 8005b22:	f3bf 8f4f 	dsb	sy
  __HAL_SPI_DISABLE(xSpiHandle);
 8005b26:	6802      	ldr	r2, [r0, #0]
 8005b28:	6813      	ldr	r3, [r2, #0]
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b30:	b662      	cpsie	i
  while ((xSpiHandle->Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	f012 0f01 	tst.w	r2, #1
 8005b3a:	d0fa      	beq.n	8005b32 <LSM303AGR_SPI_Read+0x20>
  *val = *(__IO uint8_t *) &xSpiHandle->Instance->DR;
 8005b3c:	7b1b      	ldrb	r3, [r3, #12]
 8005b3e:	700b      	strb	r3, [r1, #0]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b40:	6803      	ldr	r3, [r0, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b48:	d1fa      	bne.n	8005b40 <LSM303AGR_SPI_Read+0x2e>
}
 8005b4a:	4770      	bx	lr

08005b4c <LSM303AGR_SPI_Write>:
  while ((xSpiHandle->Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8005b4c:	6803      	ldr	r3, [r0, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	f012 0f02 	tst.w	r2, #2
 8005b54:	d0fa      	beq.n	8005b4c <LSM303AGR_SPI_Write>
  *((__IO uint8_t*) &xSpiHandle->Instance->DR) = val;
 8005b56:	7319      	strb	r1, [r3, #12]
  while ((xSpiHandle->Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 8005b58:	6803      	ldr	r3, [r0, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8005b60:	d1fa      	bne.n	8005b58 <LSM303AGR_SPI_Write+0xc>
  while ((xSpiHandle->Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005b68:	d1fb      	bne.n	8005b62 <LSM303AGR_SPI_Write+0x16>
}
 8005b6a:	4770      	bx	lr

08005b6c <BSP_LSM303AGR_ReadReg_Mag>:
{
 8005b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6e:	460d      	mov	r5, r1
 8005b70:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005b72:	b2c7      	uxtb	r7, r0
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_RESET);
 8005b74:	2200      	movs	r2, #0
 8005b76:	2102      	movs	r1, #2
 8005b78:	4818      	ldr	r0, [pc, #96]	; (8005bdc <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005b7a:	f001 fcb4 	bl	80074e6 <HAL_GPIO_WritePin>
  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005b7e:	4e18      	ldr	r6, [pc, #96]	; (8005be0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005b80:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8005b84:	4630      	mov	r0, r6
 8005b86:	f7ff ffe1 	bl	8005b4c <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005b8a:	6832      	ldr	r2, [r6, #0]
 8005b8c:	6813      	ldr	r3, [r2, #0]
 8005b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b92:	6013      	str	r3, [r2, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005b94:	6832      	ldr	r2, [r6, #0]
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9c:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8005b9e:	2c01      	cmp	r4, #1
 8005ba0:	d916      	bls.n	8005bd0 <BSP_LSM303AGR_ReadReg_Mag+0x64>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	f7ff ff86 	bl	8005ab8 <LSM303AGR_SPI_Read_nBytes>
  HAL_GPIO_WritePin(BSP_LSM303AGR_M_CS_PORT, BSP_LSM303AGR_M_CS_PIN, GPIO_PIN_SET);
 8005bac:	2201      	movs	r2, #1
 8005bae:	2102      	movs	r1, #2
 8005bb0:	480a      	ldr	r0, [pc, #40]	; (8005bdc <BSP_LSM303AGR_ReadReg_Mag+0x70>)
 8005bb2:	f001 fc98 	bl	80074e6 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005bb8:	6811      	ldr	r1, [r2, #0]
 8005bba:	680b      	ldr	r3, [r1, #0]
 8005bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bc0:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	6813      	ldr	r3, [r2, #0]
 8005bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bca:	6013      	str	r3, [r2, #0]
}
 8005bcc:	2000      	movs	r0, #0
 8005bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4803      	ldr	r0, [pc, #12]	; (8005be0 <BSP_LSM303AGR_ReadReg_Mag+0x74>)
 8005bd4:	f7ff ff9d 	bl	8005b12 <LSM303AGR_SPI_Read>
 8005bd8:	e7e8      	b.n	8005bac <BSP_LSM303AGR_ReadReg_Mag+0x40>
 8005bda:	bf00      	nop
 8005bdc:	48000400 	.word	0x48000400
 8005be0:	200025dc 	.word	0x200025dc

08005be4 <readMag>:
static void readMag() {
 8005be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be8:	b08c      	sub	sp, #48	; 0x30
 8005bea:	af00      	add	r7, sp, #0
	int16_t ARR_X_M[samples];
 8005bec:	4b4e      	ldr	r3, [pc, #312]	; (8005d28 <readMag+0x144>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	3307      	adds	r3, #7
 8005bf4:	f023 0307 	bic.w	r3, r3, #7
 8005bf8:	ebad 0d03 	sub.w	sp, sp, r3
 8005bfc:	466d      	mov	r5, sp
	int16_t ARR_Y_M[samples];
 8005bfe:	ebad 0d03 	sub.w	sp, sp, r3
 8005c02:	466e      	mov	r6, sp
	int16_t ARR_Z_M[samples];
 8005c04:	ebad 0d03 	sub.w	sp, sp, r3
 8005c08:	46e8      	mov	r8, sp
	for (int i = 0; i < samples; i++) {
 8005c0a:	2400      	movs	r4, #0
 8005c0c:	e050      	b.n	8005cb0 <readMag+0xcc>
		BSP_LSM303AGR_ReadReg_Mag(0x68,OUTX_L_M,1); // OUTX_L_REG_M
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f107 0120 	add.w	r1, r7, #32
 8005c14:	2068      	movs	r0, #104	; 0x68
 8005c16:	f7ff ffa9 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		BSP_LSM303AGR_ReadReg_Mag(0x69,OUTX_H_M,1); // OUTX_H_REG_M
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005c20:	2069      	movs	r0, #105	; 0x69
 8005c22:	f7ff ffa3 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		BSP_LSM303AGR_ReadReg_Mag(0x6A,OUTY_L_M,1); // OUTY_L_REG_M
 8005c26:	2201      	movs	r2, #1
 8005c28:	f107 0110 	add.w	r1, r7, #16
 8005c2c:	206a      	movs	r0, #106	; 0x6a
 8005c2e:	f7ff ff9d 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		BSP_LSM303AGR_ReadReg_Mag(0x6B,OUTY_H_M,1); // OUTY_H_REG_M
 8005c32:	2201      	movs	r2, #1
 8005c34:	f107 0118 	add.w	r1, r7, #24
 8005c38:	206b      	movs	r0, #107	; 0x6b
 8005c3a:	f7ff ff97 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		BSP_LSM303AGR_ReadReg_Mag(0x6C,OUTZ_L_M,1); // OUTZ_L_REG_M
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4639      	mov	r1, r7
 8005c42:	206c      	movs	r0, #108	; 0x6c
 8005c44:	f7ff ff92 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		BSP_LSM303AGR_ReadReg_Mag(0x6D,OUTZ_H_M,1); // OUTZ_H_REG_M
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f107 0108 	add.w	r1, r7, #8
 8005c4e:	206d      	movs	r0, #109	; 0x6d
 8005c50:	f7ff ff8c 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
		OUTX_M = *OUTX_H_M;
 8005c54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005c58:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <readMag+0x148>)
 8005c5a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		OUTX_M = OUTX_M << 8;
 8005c5e:	0212      	lsls	r2, r2, #8
 8005c60:	b212      	sxth	r2, r2
 8005c62:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		OUTX_M = OUTX_M | *OUTX_L_M;
 8005c66:	f897 1020 	ldrb.w	r1, [r7, #32]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		OUTY_M = *OUTY_H_M;
 8005c70:	7e39      	ldrb	r1, [r7, #24]
 8005c72:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
		OUTY_M = OUTY_M << 8;
 8005c76:	0209      	lsls	r1, r1, #8
 8005c78:	b209      	sxth	r1, r1
 8005c7a:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
		OUTY_M = OUTY_M | *OUTY_L_M;
 8005c7e:	7c38      	ldrb	r0, [r7, #16]
 8005c80:	4301      	orrs	r1, r0
 8005c82:	f8a3 10ce 	strh.w	r1, [r3, #206]	; 0xce
		OUTZ_M = *OUTZ_H_M;
 8005c86:	7a39      	ldrb	r1, [r7, #8]
 8005c88:	f8a3 10d0 	strh.w	r1, [r3, #208]	; 0xd0
		OUTZ_M = OUTZ_M << 8;
 8005c8c:	0209      	lsls	r1, r1, #8
 8005c8e:	b209      	sxth	r1, r1
 8005c90:	f8a3 10d0 	strh.w	r1, [r3, #208]	; 0xd0
		OUTZ_M = OUTZ_M | *OUTZ_L_M;
 8005c94:	7838      	ldrb	r0, [r7, #0]
 8005c96:	4301      	orrs	r1, r0
 8005c98:	f8a3 10d0 	strh.w	r1, [r3, #208]	; 0xd0
		ARR_X_M[i] = OUTX_M;
 8005c9c:	f825 2014 	strh.w	r2, [r5, r4, lsl #1]
		ARR_Y_M[i] = OUTY_M;
 8005ca0:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	; 0xce
 8005ca4:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
		ARR_Z_M[i] = OUTZ_M;
 8005ca8:	b20b      	sxth	r3, r1
 8005caa:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
	for (int i = 0; i < samples; i++) {
 8005cae:	3401      	adds	r4, #1
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <readMag+0x144>)
 8005cb2:	6859      	ldr	r1, [r3, #4]
 8005cb4:	428c      	cmp	r4, r1
 8005cb6:	dbaa      	blt.n	8005c0e <readMag+0x2a>
	for (int i = 0; i < samples; i++) {
 8005cb8:	2200      	movs	r2, #0
 8005cba:	e025      	b.n	8005d08 <readMag+0x124>
		AVG_X_M += ARR_X_M[i];
 8005cbc:	f935 3012 	ldrsh.w	r3, [r5, r2, lsl #1]
 8005cc0:	ee07 3a90 	vmov	s15, r3
 8005cc4:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <readMag+0x148>)
 8005cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8005cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cd2:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		AVG_Y_M += ARR_Y_M[i];
 8005cd6:	f936 0012 	ldrsh.w	r0, [r6, r2, lsl #1]
 8005cda:	ee07 0a90 	vmov	s15, r0
 8005cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ce2:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8005ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cea:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		AVG_Z_M += ARR_Z_M[i];
 8005cee:	f938 0012 	ldrsh.w	r0, [r8, r2, lsl #1]
 8005cf2:	ee07 0a90 	vmov	s15, r0
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8005cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d02:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	for (int i = 0; i < samples; i++) {
 8005d06:	3201      	adds	r2, #1
 8005d08:	428a      	cmp	r2, r1
 8005d0a:	dbd7      	blt.n	8005cbc <readMag+0xd8>
	MAG_Value.x = OUTX_M;
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <readMag+0x148>)
 8005d0e:	f9b3 20cc 	ldrsh.w	r2, [r3, #204]	; 0xcc
 8005d12:	609a      	str	r2, [r3, #8]
	MAG_Value.y = OUTY_M;
 8005d14:	f9b3 20ce 	ldrsh.w	r2, [r3, #206]	; 0xce
 8005d18:	60da      	str	r2, [r3, #12]
	MAG_Value.z = OUTZ_M;
 8005d1a:	f9b3 20d0 	ldrsh.w	r2, [r3, #208]	; 0xd0
 8005d1e:	611a      	str	r2, [r3, #16]
}
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	20000004 	.word	0x20000004
 8005d2c:	20000338 	.word	0x20000338

08005d30 <BSP_LSM303AGR_ReadReg_Acc>:
{
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	460d      	mov	r5, r1
 8005d34:	4614      	mov	r4, r2
  uint8_t dataReg = (uint8_t)Reg;
 8005d36:	b2c6      	uxtb	r6, r0
  LSM_ACC_CS_LOW();
 8005d38:	2200      	movs	r2, #0
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	481c      	ldr	r0, [pc, #112]	; (8005db0 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005d3e:	f001 fbd2 	bl	80074e6 <HAL_GPIO_WritePin>
  if (len > 1) {
 8005d42:	2c01      	cmp	r4, #1
 8005d44:	d928      	bls.n	8005d98 <BSP_LSM303AGR_ReadReg_Acc+0x68>
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80 | 0x40);
 8005d46:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
 8005d4a:	481a      	ldr	r0, [pc, #104]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d4c:	f7ff fefe 	bl	8005b4c <LSM303AGR_SPI_Write>
  __HAL_SPI_DISABLE(&hbusspi2);
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d52:	6811      	ldr	r1, [r2, #0]
 8005d54:	680b      	ldr	r3, [r1, #0]
 8005d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5a:	600b      	str	r3, [r1, #0]
  SPI_1LINE_RX(&hbusspi2);
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d64:	6013      	str	r3, [r2, #0]
  if (len > 1)
 8005d66:	2c01      	cmp	r4, #1
 8005d68:	d91c      	bls.n	8005da4 <BSP_LSM303AGR_ReadReg_Acc+0x74>
    LSM303AGR_SPI_Read_nBytes(&hbusspi2, (pdata), len);
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4811      	ldr	r0, [pc, #68]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d70:	f7ff fea2 	bl	8005ab8 <LSM303AGR_SPI_Read_nBytes>
  LSM_ACC_CS_HIGH();
 8005d74:	2201      	movs	r2, #1
 8005d76:	2110      	movs	r1, #16
 8005d78:	480d      	ldr	r0, [pc, #52]	; (8005db0 <BSP_LSM303AGR_ReadReg_Acc+0x80>)
 8005d7a:	f001 fbb4 	bl	80074e6 <HAL_GPIO_WritePin>
  SPI_1LINE_TX(&hbusspi2);
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d80:	6811      	ldr	r1, [r2, #0]
 8005d82:	680b      	ldr	r3, [r1, #0]
 8005d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d88:	600b      	str	r3, [r1, #0]
  __HAL_SPI_ENABLE(&hbusspi2);
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	6813      	ldr	r3, [r2, #0]
 8005d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	2000      	movs	r0, #0
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
	  LSM303AGR_SPI_Write(&hbusspi2, (dataReg) | 0x80);
 8005d98:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8005d9c:	4805      	ldr	r0, [pc, #20]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005d9e:	f7ff fed5 	bl	8005b4c <LSM303AGR_SPI_Write>
 8005da2:	e7d5      	b.n	8005d50 <BSP_LSM303AGR_ReadReg_Acc+0x20>
    LSM303AGR_SPI_Read(&hbusspi2, (pdata));
 8005da4:	4629      	mov	r1, r5
 8005da6:	4803      	ldr	r0, [pc, #12]	; (8005db4 <BSP_LSM303AGR_ReadReg_Acc+0x84>)
 8005da8:	f7ff feb3 	bl	8005b12 <LSM303AGR_SPI_Read>
 8005dac:	e7e2      	b.n	8005d74 <BSP_LSM303AGR_ReadReg_Acc+0x44>
 8005dae:	bf00      	nop
 8005db0:	48000800 	.word	0x48000800
 8005db4:	200025dc 	.word	0x200025dc

08005db8 <InitLSM>:
static void InitLSM() {
 8005db8:	b510      	push	{r4, lr}
 8005dba:	b0c4      	sub	sp, #272	; 0x110
	Sensor_IO_SPI_CS_Init_All();
 8005dbc:	f7ff fd8e 	bl	80058dc <Sensor_IO_SPI_CS_Init_All>
	inData[0] = 0x01;
 8005dc0:	2401      	movs	r4, #1
 8005dc2:	f88d 4104 	strb.w	r4, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Acc(0x23,inData,1);
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	a941      	add	r1, sp, #260	; 0x104
 8005dca:	2023      	movs	r0, #35	; 0x23
 8005dcc:	f7ff fbaa 	bl	8005524 <BSP_LSM303AGR_WriteReg_Acc>
	inData[0] = 0x20;
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	f88d 3104 	strb.w	r3, [sp, #260]	; 0x104
	BSP_LSM303AGR_WriteReg_Mag(0x62U,inData,1);
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	a941      	add	r1, sp, #260	; 0x104
 8005dda:	2062      	movs	r0, #98	; 0x62
 8005ddc:	f7ff fbe2 	bl	80055a4 <BSP_LSM303AGR_WriteReg_Mag>
	BSP_LSM303AGR_ReadReg_Mag(0x4F,inData,1);
 8005de0:	4622      	mov	r2, r4
 8005de2:	a941      	add	r1, sp, #260	; 0x104
 8005de4:	204f      	movs	r0, #79	; 0x4f
 8005de6:	f7ff fec1 	bl	8005b6c <BSP_LSM303AGR_ReadReg_Mag>
	XPRINTF("IAM Mag= %d,%d",inData[0],inData[1]);
 8005dea:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005dee:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005df2:	490d      	ldr	r1, [pc, #52]	; (8005e28 <InitLSM+0x70>)
 8005df4:	a801      	add	r0, sp, #4
 8005df6:	f008 fe8d 	bl	800eb14 <siprintf>
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	a801      	add	r0, sp, #4
 8005dfe:	f000 fdf5 	bl	80069ec <CDC_Fill_Buffer>
	BSP_LSM303AGR_ReadReg_Acc(0x0F,inData,1);
 8005e02:	4622      	mov	r2, r4
 8005e04:	a941      	add	r1, sp, #260	; 0x104
 8005e06:	200f      	movs	r0, #15
 8005e08:	f7ff ff92 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
	XPRINTF("IAM Acc= %d,%d",inData[0],inData[1]);
 8005e0c:	f89d 3105 	ldrb.w	r3, [sp, #261]	; 0x105
 8005e10:	f89d 2104 	ldrb.w	r2, [sp, #260]	; 0x104
 8005e14:	4905      	ldr	r1, [pc, #20]	; (8005e2c <InitLSM+0x74>)
 8005e16:	a801      	add	r0, sp, #4
 8005e18:	f008 fe7c 	bl	800eb14 <siprintf>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	a801      	add	r0, sp, #4
 8005e20:	f000 fde4 	bl	80069ec <CDC_Fill_Buffer>
}
 8005e24:	b044      	add	sp, #272	; 0x110
 8005e26:	bd10      	pop	{r4, pc}
 8005e28:	0800f4b4 	.word	0x0800f4b4
 8005e2c:	0800f4c4 	.word	0x0800f4c4

08005e30 <readAcc>:
static void readAcc() {
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af00      	add	r7, sp, #0
	int16_t ARR_X_A[samples];
 8005e38:	4b61      	ldr	r3, [pc, #388]	; (8005fc0 <readAcc+0x190>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	3307      	adds	r3, #7
 8005e40:	f023 0307 	bic.w	r3, r3, #7
 8005e44:	ebad 0d03 	sub.w	sp, sp, r3
 8005e48:	46e8      	mov	r8, sp
	int16_t ARR_Y_A[samples];
 8005e4a:	ebad 0d03 	sub.w	sp, sp, r3
 8005e4e:	46e9      	mov	r9, sp
	int16_t ARR_Z_A[samples];
 8005e50:	ebad 0d03 	sub.w	sp, sp, r3
 8005e54:	46ea      	mov	sl, sp
	for (int i = 0; i < samples; i++) {
 8005e56:	2500      	movs	r5, #0
 8005e58:	e072      	b.n	8005f40 <readAcc+0x110>
		BSP_LSM303AGR_ReadReg_Acc(0x28,OUTX_L_A,1); // OUT_X_L_A
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f107 0120 	add.w	r1, r7, #32
 8005e60:	2028      	movs	r0, #40	; 0x28
 8005e62:	f7ff ff65 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		BSP_LSM303AGR_ReadReg_Acc(0x29,OUTX_H_A,1); // OUT_X_H_A
 8005e66:	2201      	movs	r2, #1
 8005e68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005e6c:	2029      	movs	r0, #41	; 0x29
 8005e6e:	f7ff ff5f 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		BSP_LSM303AGR_ReadReg_Acc(0x2A,OUTY_L_A,1); // OUT_Y_L_A
 8005e72:	2201      	movs	r2, #1
 8005e74:	f107 0110 	add.w	r1, r7, #16
 8005e78:	202a      	movs	r0, #42	; 0x2a
 8005e7a:	f7ff ff59 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		BSP_LSM303AGR_ReadReg_Acc(0x2B,OUTY_H_A,1); // OUT_Y_H_A
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f107 0118 	add.w	r1, r7, #24
 8005e84:	202b      	movs	r0, #43	; 0x2b
 8005e86:	f7ff ff53 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		BSP_LSM303AGR_ReadReg_Acc(0x2C,OUTZ_L_A,1); // OUT_Z_L_A
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	202c      	movs	r0, #44	; 0x2c
 8005e90:	f7ff ff4e 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		BSP_LSM303AGR_ReadReg_Acc(0x2D,OUTZ_H_A,1); // OUT_Z_H_A
 8005e94:	2201      	movs	r2, #1
 8005e96:	f107 0108 	add.w	r1, r7, #8
 8005e9a:	202d      	movs	r0, #45	; 0x2d
 8005e9c:	f7ff ff48 	bl	8005d30 <BSP_LSM303AGR_ReadReg_Acc>
		OUTX_A = *OUTX_H_A;
 8005ea0:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8005ea4:	4c47      	ldr	r4, [pc, #284]	; (8005fc4 <readAcc+0x194>)
 8005ea6:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
		OUTX_A = OUTX_A << 8;
 8005eaa:	0200      	lsls	r0, r0, #8
 8005eac:	b200      	sxth	r0, r0
 8005eae:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
		OUTX_A = OUTX_A | *OUTX_L_A;
 8005eb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005eb6:	4318      	orrs	r0, r3
 8005eb8:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
		OUTX_A = OUTX_A * (4.0 / 1023);
 8005ebc:	f7fe fb2a 	bl	8004514 <__aeabi_i2d>
 8005ec0:	a33d      	add	r3, pc, #244	; (adr r3, 8005fb8 <readAcc+0x188>)
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	f7fe fb8f 	bl	80045e8 <__aeabi_dmul>
 8005eca:	f7fe fe3d 	bl	8004b48 <__aeabi_d2iz>
 8005ece:	b206      	sxth	r6, r0
 8005ed0:	f8a4 60e0 	strh.w	r6, [r4, #224]	; 0xe0
		OUTY_A = *OUTY_H_A;
 8005ed4:	7e38      	ldrb	r0, [r7, #24]
 8005ed6:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
		OUTY_A = OUTY_A << 8;
 8005eda:	0200      	lsls	r0, r0, #8
 8005edc:	b200      	sxth	r0, r0
 8005ede:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
		OUTY_A = OUTY_A | *OUTY_L_A;
 8005ee2:	7c3b      	ldrb	r3, [r7, #16]
 8005ee4:	4318      	orrs	r0, r3
 8005ee6:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
		OUTY_A = OUTY_A * (4.0 / 1023);
 8005eea:	f7fe fb13 	bl	8004514 <__aeabi_i2d>
 8005eee:	a332      	add	r3, pc, #200	; (adr r3, 8005fb8 <readAcc+0x188>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fe fb78 	bl	80045e8 <__aeabi_dmul>
 8005ef8:	f7fe fe26 	bl	8004b48 <__aeabi_d2iz>
 8005efc:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
		OUTZ_A = *OUTZ_H_A;
 8005f00:	7a38      	ldrb	r0, [r7, #8]
 8005f02:	f8a4 00e4 	strh.w	r0, [r4, #228]	; 0xe4
		OUTZ_A = OUTZ_A << 8;
 8005f06:	0200      	lsls	r0, r0, #8
 8005f08:	b200      	sxth	r0, r0
 8005f0a:	f8a4 00e4 	strh.w	r0, [r4, #228]	; 0xe4
		OUTZ_A = OUTZ_A | *OUTZ_L_A;
 8005f0e:	783b      	ldrb	r3, [r7, #0]
 8005f10:	4318      	orrs	r0, r3
 8005f12:	f8a4 00e4 	strh.w	r0, [r4, #228]	; 0xe4
		OUTZ_A = OUTZ_A * (4.0 / 1023);
 8005f16:	f7fe fafd 	bl	8004514 <__aeabi_i2d>
 8005f1a:	a327      	add	r3, pc, #156	; (adr r3, 8005fb8 <readAcc+0x188>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f7fe fb62 	bl	80045e8 <__aeabi_dmul>
 8005f24:	f7fe fe10 	bl	8004b48 <__aeabi_d2iz>
 8005f28:	f8a4 00e4 	strh.w	r0, [r4, #228]	; 0xe4
		ARR_X_A[i] = OUTX_A;
 8005f2c:	f828 6015 	strh.w	r6, [r8, r5, lsl #1]
		ARR_Y_A[i] = OUTY_A;
 8005f30:	f9b4 30e2 	ldrsh.w	r3, [r4, #226]	; 0xe2
 8005f34:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
		ARR_Z_A[i] = OUTZ_A;
 8005f38:	b203      	sxth	r3, r0
 8005f3a:	f82a 3015 	strh.w	r3, [sl, r5, lsl #1]
	for (int i = 0; i < samples; i++) {
 8005f3e:	3501      	adds	r5, #1
 8005f40:	4b1f      	ldr	r3, [pc, #124]	; (8005fc0 <readAcc+0x190>)
 8005f42:	6859      	ldr	r1, [r3, #4]
 8005f44:	428d      	cmp	r5, r1
 8005f46:	db88      	blt.n	8005e5a <readAcc+0x2a>
	for (int i = 0; i < samples; i++) {
 8005f48:	2200      	movs	r2, #0
 8005f4a:	e025      	b.n	8005f98 <readAcc+0x168>
		AVG_X_A += ARR_X_A[i];
 8005f4c:	f938 3012 	ldrsh.w	r3, [r8, r2, lsl #1]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <readAcc+0x194>)
 8005f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f5a:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8005f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f62:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		AVG_Y_A += ARR_Y_A[i];
 8005f66:	f939 0012 	ldrsh.w	r0, [r9, r2, lsl #1]
 8005f6a:	ee07 0a90 	vmov	s15, r0
 8005f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f72:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8005f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f7a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		AVG_Z_A += ARR_Z_A[i];
 8005f7e:	f93a 0012 	ldrsh.w	r0, [sl, r2, lsl #1]
 8005f82:	ee07 0a90 	vmov	s15, r0
 8005f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8005f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f92:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	for (int i = 0; i < samples; i++) {
 8005f96:	3201      	adds	r2, #1
 8005f98:	428a      	cmp	r2, r1
 8005f9a:	dbd7      	blt.n	8005f4c <readAcc+0x11c>
	ACC_Value.x = OUTX_A;
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <readAcc+0x194>)
 8005f9e:	f9b3 20e0 	ldrsh.w	r2, [r3, #224]	; 0xe0
 8005fa2:	621a      	str	r2, [r3, #32]
	ACC_Value.y = OUTY_A;
 8005fa4:	f9b3 20e2 	ldrsh.w	r2, [r3, #226]	; 0xe2
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24
	ACC_Value.z = OUTZ_A;
 8005faa:	f9b3 20e4 	ldrsh.w	r2, [r3, #228]	; 0xe4
 8005fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005fb0:	3730      	adds	r7, #48	; 0x30
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	00401004 	.word	0x00401004
 8005fbc:	3f700401 	.word	0x3f700401
 8005fc0:	20000004 	.word	0x20000004
 8005fc4:	20000338 	.word	0x20000338

08005fc8 <HAL_Delay>:
  * @note This is a user implementation using WFI state
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8005fce:	f001 f88b 	bl	80070e8 <HAL_GetTick>
 8005fd2:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay){
 8005fd4:	e000      	b.n	8005fd8 <HAL_Delay+0x10>
    __WFI();
 8005fd6:	bf30      	wfi
  while((HAL_GetTick() - tickstart) < Delay){
 8005fd8:	f001 f886 	bl	80070e8 <HAL_GetTick>
 8005fdc:	1b00      	subs	r0, r0, r4
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	4298      	cmp	r0, r3
 8005fe2:	d3f8      	bcc.n	8005fd6 <HAL_Delay+0xe>
  }
}
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <InitTargetPlatform>:
{
 8005fe8:	b510      	push	{r4, lr}
  HAL_PWREx_EnableVddUSB();
 8005fea:	f001 ffe5 	bl	8007fb8 <HAL_PWREx_EnableVddUSB>
  USBD_Init(&USBD_Device, &VCP_Desc, 0);
 8005fee:	4c0d      	ldr	r4, [pc, #52]	; (8006024 <InitTargetPlatform+0x3c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	490d      	ldr	r1, [pc, #52]	; (8006028 <InitTargetPlatform+0x40>)
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f005 fddb 	bl	800bbb0 <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 8005ffa:	490c      	ldr	r1, [pc, #48]	; (800602c <InitTargetPlatform+0x44>)
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f005 fdee 	bl	800bbde <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 8006002:	490b      	ldr	r1, [pc, #44]	; (8006030 <InitTargetPlatform+0x48>)
 8006004:	4620      	mov	r0, r4
 8006006:	f005 fd9e 	bl	800bb46 <USBD_CDC_RegisterInterface>
  USBD_Start(&USBD_Device);
 800600a:	4620      	mov	r0, r4
 800600c:	f005 fdfe 	bl	800bc0c <USBD_Start>
  HAL_Delay(5000);
 8006010:	f241 3088 	movw	r0, #5000	; 0x1388
 8006014:	f7ff ffd8 	bl	8005fc8 <HAL_Delay>
  BSP_LED_Init( LED1 );
 8006018:	2000      	movs	r0, #0
 800601a:	f000 fe9d 	bl	8006d58 <BSP_LED_Init>
  InitLSM(); //N4S
 800601e:	f7ff fecb 	bl	8005db8 <InitLSM>
}
 8006022:	bd10      	pop	{r4, pc}
 8006024:	2000042c 	.word	0x2000042c
 8006028:	20000060 	.word	0x20000060
 800602c:	20000168 	.word	0x20000168
 8006030:	20000018 	.word	0x20000018

08006034 <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1){
 8006034:	e7fe      	b.n	8006034 <Error_Handler>
	...

08006038 <InitTimers>:
{
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	b089      	sub	sp, #36	; 0x24
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1);
 800603c:	4f2e      	ldr	r7, [pc, #184]	; (80060f8 <InitTimers+0xc0>)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	4e2e      	ldr	r6, [pc, #184]	; (80060fc <InitTimers+0xc4>)
 8006042:	fba6 2303 	umull	r2, r3, r6, r3
 8006046:	0b5b      	lsrs	r3, r3, #13
 8006048:	3b01      	subs	r3, #1
  TimEnvHandle.Instance = TIM4;
 800604a:	4c2d      	ldr	r4, [pc, #180]	; (8006100 <InitTimers+0xc8>)
 800604c:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <InitTimers+0xcc>)
 800604e:	67e2      	str	r2, [r4, #124]	; 0x7c
  TimEnvHandle.Init.Period = 655;
 8006050:	f240 228f 	movw	r2, #655	; 0x28f
 8006054:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  TimEnvHandle.Init.Prescaler = uwPrescalerValue;
 8006058:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  TimEnvHandle.Init.ClockDivision = 0;
 800605c:	2500      	movs	r5, #0
 800605e:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  TimEnvHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006062:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  if(HAL_TIM_Base_Init(&TimEnvHandle) != HAL_OK) {
 8006066:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800606a:	f003 ff47 	bl	8009efc <HAL_TIM_Base_Init>
  uwPrescalerValue = (uint32_t) ((SystemCoreClock / 10000) - 1); 
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	fba6 2303 	umull	r2, r3, r6, r3
 8006074:	0b5b      	lsrs	r3, r3, #13
 8006076:	3b01      	subs	r3, #1
  TimCCHandle.Instance = TIM1;  
 8006078:	4a23      	ldr	r2, [pc, #140]	; (8006108 <InitTimers+0xd0>)
 800607a:	62e2      	str	r2, [r4, #44]	; 0x2c
  TimCCHandle.Init.Period        = 65535;
 800607c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006080:	63a2      	str	r2, [r4, #56]	; 0x38
  TimCCHandle.Init.Prescaler     = uwPrescalerValue;
 8006082:	6323      	str	r3, [r4, #48]	; 0x30
  TimCCHandle.Init.ClockDivision = 0;
 8006084:	63e5      	str	r5, [r4, #60]	; 0x3c
  TimCCHandle.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8006086:	6365      	str	r5, [r4, #52]	; 0x34
  if(HAL_TIM_OC_Init(&TimCCHandle) != HAL_OK)
 8006088:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800608c:	f003 ff66 	bl	8009f5c <HAL_TIM_OC_Init>
 8006090:	bb40      	cbnz	r0, 80060e4 <InitTimers+0xac>
  sConfig.OCMode     = TIM_OCMODE_TOGGLE;
 8006092:	2330      	movs	r3, #48	; 0x30
 8006094:	9301      	str	r3, [sp, #4]
  sConfig.OCPolarity = TIM_OCPOLARITY_LOW;
 8006096:	2302      	movs	r3, #2
 8006098:	9303      	str	r3, [sp, #12]
  sConfig.Pulse = DEFAULT_uhCCR1_Val;
 800609a:	2364      	movs	r3, #100	; 0x64
 800609c:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_1) != HAL_OK)
 800609e:	2200      	movs	r2, #0
 80060a0:	a901      	add	r1, sp, #4
 80060a2:	481a      	ldr	r0, [pc, #104]	; (800610c <InitTimers+0xd4>)
 80060a4:	f003 ffd0 	bl	800a048 <HAL_TIM_OC_ConfigChannel>
 80060a8:	b9f0      	cbnz	r0, 80060e8 <InitTimers+0xb0>
  sConfig.Pulse = DEFAULT_uhCCR2_Val;
 80060aa:	23c8      	movs	r3, #200	; 0xc8
 80060ac:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_2) != HAL_OK)
 80060ae:	2204      	movs	r2, #4
 80060b0:	eb0d 0102 	add.w	r1, sp, r2
 80060b4:	4815      	ldr	r0, [pc, #84]	; (800610c <InitTimers+0xd4>)
 80060b6:	f003 ffc7 	bl	800a048 <HAL_TIM_OC_ConfigChannel>
 80060ba:	b9b8      	cbnz	r0, 80060ec <InitTimers+0xb4>
  sConfig.Pulse = DEFAULT_uhCCR3_Val;
 80060bc:	f240 2371 	movw	r3, #625	; 0x271
 80060c0:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_3) != HAL_OK)
 80060c2:	2208      	movs	r2, #8
 80060c4:	a901      	add	r1, sp, #4
 80060c6:	4811      	ldr	r0, [pc, #68]	; (800610c <InitTimers+0xd4>)
 80060c8:	f003 ffbe 	bl	800a048 <HAL_TIM_OC_ConfigChannel>
 80060cc:	b980      	cbnz	r0, 80060f0 <InitTimers+0xb8>
  sConfig.Pulse = DEFAULT_uhCCR4_Val;
 80060ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80060d2:	9302      	str	r3, [sp, #8]
  if(HAL_TIM_OC_ConfigChannel(&TimCCHandle, &sConfig, TIM_CHANNEL_4) != HAL_OK)
 80060d4:	220c      	movs	r2, #12
 80060d6:	a901      	add	r1, sp, #4
 80060d8:	480c      	ldr	r0, [pc, #48]	; (800610c <InitTimers+0xd4>)
 80060da:	f003 ffb5 	bl	800a048 <HAL_TIM_OC_ConfigChannel>
 80060de:	b948      	cbnz	r0, 80060f4 <InitTimers+0xbc>
}
 80060e0:	b009      	add	sp, #36	; 0x24
 80060e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80060e4:	f7ff ffa6 	bl	8006034 <Error_Handler>
    Error_Handler();
 80060e8:	f7ff ffa4 	bl	8006034 <Error_Handler>
    Error_Handler();
 80060ec:	f7ff ffa2 	bl	8006034 <Error_Handler>
    Error_Handler();
 80060f0:	f7ff ffa0 	bl	8006034 <Error_Handler>
    Error_Handler();
 80060f4:	f7ff ff9e 	bl	8006034 <Error_Handler>
 80060f8:	20000084 	.word	0x20000084
 80060fc:	d1b71759 	.word	0xd1b71759
 8006100:	20000338 	.word	0x20000338
 8006104:	40000800 	.word	0x40000800
 8006108:	40012c00 	.word	0x40012c00
 800610c:	20000364 	.word	0x20000364

08006110 <main>:
{
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 8006118:	f000 ffca 	bl	80070b0 <HAL_Init>
  SystemClock_Config();
 800611c:	f7ff f998 	bl	8005450 <SystemClock_Config>
  InitTargetPlatform();
 8006120:	f7ff ff62 	bl	8005fe8 <InitTargetPlatform>
  Init_BlueNRG_Stack();
 8006124:	f7ff fa86 	bl	8005634 <Init_BlueNRG_Stack>
  Init_BlueNRG_Custom_Services();
 8006128:	f7ff fb74 	bl	8005814 <Init_BlueNRG_Custom_Services>
  InitTimers();
 800612c:	f7ff ff84 	bl	8006038 <InitTimers>
  if(HAL_TIM_Base_Start_IT(&TimEnvHandle) != HAL_OK){
 8006130:	48d5      	ldr	r0, [pc, #852]	; (8006488 <main+0x378>)
 8006132:	f003 fd4f 	bl	8009bd4 <HAL_TIM_Base_Start_IT>
 8006136:	b108      	cbz	r0, 800613c <main+0x2c>
    Error_Handler();
 8006138:	f7ff ff7c 	bl	8006034 <Error_Handler>
  connected = FALSE;
 800613c:	4bd3      	ldr	r3, [pc, #844]	; (800648c <main+0x37c>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
  NodeName[1] = 'S';
 8006142:	4bd3      	ldr	r3, [pc, #844]	; (8006490 <main+0x380>)
 8006144:	2253      	movs	r2, #83	; 0x53
 8006146:	f883 23c5 	strb.w	r2, [r3, #965]	; 0x3c5
  NodeName[2] = 'C';
 800614a:	2243      	movs	r2, #67	; 0x43
 800614c:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
  NodeName[3] = 'H';
 8006150:	2248      	movs	r2, #72	; 0x48
 8006152:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
  NodeName[4] = 'O';
 8006156:	224f      	movs	r2, #79	; 0x4f
 8006158:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
  NodeName[5] = '4';
 800615c:	2234      	movs	r2, #52	; 0x34
 800615e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
  NodeName[6] = '1';
 8006162:	2231      	movs	r2, #49	; 0x31
 8006164:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
  NodeName[7] = '3';
 8006168:	2233      	movs	r2, #51	; 0x33
 800616a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
  startMag();
 800616e:	f7ff fa43 	bl	80055f8 <startMag>
  startAcc();
 8006172:	f7ff fa01 	bl	8005578 <startAcc>
 8006176:	e2a2      	b.n	80066be <main+0x5ae>
          if(!(HAL_GetTick()&0x3FF)) {
 8006178:	f000 ffb6 	bl	80070e8 <HAL_GetTick>
 800617c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006180:	2800      	cmp	r0, #0
 8006182:	f040 82a1 	bne.w	80066c8 <main+0x5b8>
        	  BSP_LED_Toggle(LED1);
 8006186:	f000 fe27 	bl	8006dd8 <BSP_LED_Toggle>
 800618a:	e29d      	b.n	80066c8 <main+0x5b8>
      setConnectable();
 800618c:	f7fe ff34 	bl	8004ff8 <setConnectable>
      set_connectable = FALSE;
 8006190:	4bc0      	ldr	r3, [pc, #768]	; (8006494 <main+0x384>)
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e29c      	b.n	80066d2 <main+0x5c2>
      HCI_ProcessEvent=0;
 8006198:	4bbd      	ldr	r3, [pc, #756]	; (8006490 <main+0x380>)
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
      hci_user_evt_proc();
 80061a0:	f005 fa94 	bl	800b6cc <hci_user_evt_proc>
 80061a4:	e29b      	b.n	80066de <main+0x5ce>
    	ReadSensor=0;
 80061a6:	4cba      	ldr	r4, [pc, #744]	; (8006490 <main+0x380>)
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    	readMag();
 80061ae:	f7ff fd19 	bl	8005be4 <readMag>
    	readAcc();
 80061b2:	f7ff fe3d 	bl	8005e30 <readAcc>
		AVG_X_M /= samples;
 80061b6:	4bb8      	ldr	r3, [pc, #736]	; (8006498 <main+0x388>)
 80061b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80061bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061c0:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 80061c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c8:	ed84 7a35 	vstr	s14, [r4, #212]	; 0xd4
		AVG_Y_M /= samples;
 80061cc:	edd4 6a36 	vldr	s13, [r4, #216]	; 0xd8
 80061d0:	ee86 8aa7 	vdiv.f32	s16, s13, s15
 80061d4:	ed84 8a36 	vstr	s16, [r4, #216]	; 0xd8
		AVG_Z_M /= samples;
 80061d8:	ed94 6a37 	vldr	s12, [r4, #220]	; 0xdc
 80061dc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80061e0:	edc4 6a37 	vstr	s13, [r4, #220]	; 0xdc
		AVG_X_A /= samples;
 80061e4:	ed94 6a3a 	vldr	s12, [r4, #232]	; 0xe8
 80061e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80061ec:	edc4 6a3a 	vstr	s13, [r4, #232]	; 0xe8
		AVG_Y_A /= samples;
 80061f0:	ed94 6a3b 	vldr	s12, [r4, #236]	; 0xec
 80061f4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80061f8:	edc4 6a3b 	vstr	s13, [r4, #236]	; 0xec
		AVG_Z_A /= samples;
 80061fc:	ed94 6a3c 	vldr	s12, [r4, #240]	; 0xf0
 8006200:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006204:	edc4 6a3c 	vstr	s13, [r4, #240]	; 0xf0
		if (init == 0) {
 8006208:	f8d4 33d0 	ldr.w	r3, [r4, #976]	; 0x3d0
 800620c:	b93b      	cbnz	r3, 800621e <main+0x10e>
			x_position = 0;
 800620e:	2100      	movs	r1, #0
 8006210:	f8c4 13d4 	str.w	r1, [r4, #980]	; 0x3d4
			y_position = 0;
 8006214:	f8c4 13d8 	str.w	r1, [r4, #984]	; 0x3d8
			init++;
 8006218:	3301      	adds	r3, #1
 800621a:	f8c4 33d0 	str.w	r3, [r4, #976]	; 0x3d0
		if (count == 0) {
 800621e:	4b9c      	ldr	r3, [pc, #624]	; (8006490 <main+0x380>)
 8006220:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006224:	2b00      	cmp	r3, #0
 8006226:	d04e      	beq.n	80062c6 <main+0x1b6>
		HAL_current_tick = HAL_GetTick();
 8006228:	f000 ff5e 	bl	80070e8 <HAL_GetTick>
 800622c:	f8df a260 	ldr.w	sl, [pc, #608]	; 8006490 <main+0x380>
 8006230:	f8ca 03e4 	str.w	r0, [sl, #996]	; 0x3e4
		float PITCH_A = atan(-AVG_X_A/sqrt(pow(AVG_Y_A, 2) + pow(AVG_Z_A, 2))) * 180/pi;
 8006234:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
 8006238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800623c:	f7fe f97c 	bl	8004538 <__aeabi_f2d>
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	f04f 0800 	mov.w	r8, #0
 8006248:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 800624c:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
 8006250:	f7fe f972 	bl	8004538 <__aeabi_f2d>
 8006254:	4642      	mov	r2, r8
 8006256:	464b      	mov	r3, r9
 8006258:	f006 fbfc 	bl	800ca54 <pow>
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	f8da 00f0 	ldr.w	r0, [sl, #240]	; 0xf0
 8006264:	f7fe f968 	bl	8004538 <__aeabi_f2d>
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	f006 fbf2 	bl	800ca54 <pow>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4630      	mov	r0, r6
 8006276:	4639      	mov	r1, r7
 8006278:	f7fe f800 	bl	800427c <__adddf3>
 800627c:	f006 fc52 	bl	800cb24 <sqrt>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4620      	mov	r0, r4
 8006286:	4629      	mov	r1, r5
 8006288:	f7fe fad8 	bl	800483c <__aeabi_ddiv>
 800628c:	f006 f9c0 	bl	800c610 <atan>
 8006290:	2200      	movs	r2, #0
 8006292:	4b82      	ldr	r3, [pc, #520]	; (800649c <main+0x38c>)
 8006294:	f7fe f9a8 	bl	80045e8 <__aeabi_dmul>
 8006298:	a379      	add	r3, pc, #484	; (adr r3, 8006480 <main+0x370>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f7fe facd 	bl	800483c <__aeabi_ddiv>
 80062a2:	f7fe fc79 	bl	8004b98 <__aeabi_d2f>
 80062a6:	ee07 0a10 	vmov	s14, r0
		if (PITCH_A > 2 && step_taken == 0) {
 80062aa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80062ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b6:	dd28      	ble.n	800630a <main+0x1fa>
 80062b8:	f8da 33e8 	ldr.w	r3, [sl, #1000]	; 0x3e8
 80062bc:	bb2b      	cbnz	r3, 800630a <main+0x1fa>
			step_taken = 1;
 80062be:	2201      	movs	r2, #1
 80062c0:	f8ca 23e8 	str.w	r2, [sl, #1000]	; 0x3e8
 80062c4:	e025      	b.n	8006312 <main+0x202>
			initial_angle = (atan2(AVG_Y_M, AVG_X_M)) * 180/pi;
 80062c6:	ee17 0a10 	vmov	r0, s14
 80062ca:	f7fe f935 	bl	8004538 <__aeabi_f2d>
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	ee18 0a10 	vmov	r0, s16
 80062d6:	f7fe f92f 	bl	8004538 <__aeabi_f2d>
 80062da:	4622      	mov	r2, r4
 80062dc:	462b      	mov	r3, r5
 80062de:	f006 fbb7 	bl	800ca50 <atan2>
 80062e2:	2200      	movs	r2, #0
 80062e4:	4b6d      	ldr	r3, [pc, #436]	; (800649c <main+0x38c>)
 80062e6:	f7fe f97f 	bl	80045e8 <__aeabi_dmul>
 80062ea:	a365      	add	r3, pc, #404	; (adr r3, 8006480 <main+0x370>)
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f7fe faa4 	bl	800483c <__aeabi_ddiv>
 80062f4:	f7fe fc50 	bl	8004b98 <__aeabi_d2f>
 80062f8:	4b65      	ldr	r3, [pc, #404]	; (8006490 <main+0x380>)
 80062fa:	f8c3 03e0 	str.w	r0, [r3, #992]	; 0x3e0
			count++;
 80062fe:	f8d3 23dc 	ldr.w	r2, [r3, #988]	; 0x3dc
 8006302:	3201      	adds	r2, #1
 8006304:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
 8006308:	e78e      	b.n	8006228 <main+0x118>
			step_taken = 0;
 800630a:	4b61      	ldr	r3, [pc, #388]	; (8006490 <main+0x380>)
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
		if ((HAL_current_tick - HAL_prev_tick) > 200 && step_taken == 1) { // delay of 200ms
 8006312:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <main+0x380>)
 8006314:	f8d2 33e4 	ldr.w	r3, [r2, #996]	; 0x3e4
 8006318:	f8d2 23ec 	ldr.w	r2, [r2, #1004]	; 0x3ec
 800631c:	1a9b      	subs	r3, r3, r2
 800631e:	2bc8      	cmp	r3, #200	; 0xc8
 8006320:	d904      	bls.n	800632c <main+0x21c>
 8006322:	4b5b      	ldr	r3, [pc, #364]	; (8006490 <main+0x380>)
 8006324:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8006328:	2b01      	cmp	r3, #1
 800632a:	d013      	beq.n	8006354 <main+0x244>
    	COMP_Value.x = (int)x_position;
 800632c:	4b58      	ldr	r3, [pc, #352]	; (8006490 <main+0x380>)
 800632e:	edd3 7af5 	vldr	s15, [r3, #980]	; 0x3d4
 8006332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006336:	edc3 7a05 	vstr	s15, [r3, #20]
    	COMP_Value.y = (int)y_position;
 800633a:	edd3 7af6 	vldr	s15, [r3, #984]	; 0x3d8
 800633e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006342:	edc3 7a06 	vstr	s15, [r3, #24]
    	COMP_Value.Heading = (int)angle;
 8006346:	edd3 7afd 	vldr	s15, [r3, #1012]	; 0x3f4
 800634a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800634e:	edc3 7a07 	vstr	s15, [r3, #28]
 8006352:	e1ca      	b.n	80066ea <main+0x5da>
			step_taken = 0;
 8006354:	4b4e      	ldr	r3, [pc, #312]	; (8006490 <main+0x380>)
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
			angle = initial_angle - yaw_m;
 800635c:	edd3 7af8 	vldr	s15, [r3, #992]	; 0x3e0
 8006360:	ed93 7afc 	vldr	s14, [r3, #1008]	; 0x3f0
 8006364:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006368:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
			if (angle < 0) {
 800636c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006374:	d47a      	bmi.n	800646c <main+0x35c>
			if (angle <= 90 & angle > 0) {
 8006376:	4b46      	ldr	r3, [pc, #280]	; (8006490 <main+0x380>)
 8006378:	ed93 8afd 	vldr	s16, [r3, #1012]	; 0x3f4
 800637c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80064a8 <main+0x398>
 8006380:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	bf94      	ite	ls
 800638a:	2301      	movls	r3, #1
 800638c:	2300      	movhi	r3, #0
 800638e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	bfd8      	it	le
 800639c:	2300      	movle	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 8084 	beq.w	80064ac <main+0x39c>
				x_position = x_position - step * cos(angle / 90);
 80063a4:	4b3c      	ldr	r3, [pc, #240]	; (8006498 <main+0x388>)
 80063a6:	6898      	ldr	r0, [r3, #8]
 80063a8:	f7fe f8c6 	bl	8004538 <__aeabi_f2d>
 80063ac:	4604      	mov	r4, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80064a8 <main+0x398>
 80063b4:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80063b8:	ee17 0a90 	vmov	r0, s15
 80063bc:	f7fe f8bc 	bl	8004538 <__aeabi_f2d>
 80063c0:	4606      	mov	r6, r0
 80063c2:	460f      	mov	r7, r1
 80063c4:	f006 fab4 	bl	800c930 <cos>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4620      	mov	r0, r4
 80063ce:	4629      	mov	r1, r5
 80063d0:	f7fe f90a 	bl	80045e8 <__aeabi_dmul>
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8006490 <main+0x380>
 80063dc:	f8da 03d4 	ldr.w	r0, [sl, #980]	; 0x3d4
 80063e0:	f7fe f8aa 	bl	8004538 <__aeabi_f2d>
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	f7fd ff46 	bl	8004278 <__aeabi_dsub>
 80063ec:	f7fe fbd4 	bl	8004b98 <__aeabi_d2f>
 80063f0:	f8ca 03d4 	str.w	r0, [sl, #980]	; 0x3d4
				y_position = y_position + step * sin(angle / 90);
 80063f4:	4630      	mov	r0, r6
 80063f6:	4639      	mov	r1, r7
 80063f8:	f006 fae4 	bl	800c9c4 <sin>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4620      	mov	r0, r4
 8006402:	4629      	mov	r1, r5
 8006404:	f7fe f8f0 	bl	80045e8 <__aeabi_dmul>
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	f8da 03d8 	ldr.w	r0, [sl, #984]	; 0x3d8
 8006410:	f7fe f892 	bl	8004538 <__aeabi_f2d>
 8006414:	4622      	mov	r2, r4
 8006416:	462b      	mov	r3, r5
 8006418:	f7fd ff30 	bl	800427c <__adddf3>
 800641c:	f7fe fbbc 	bl	8004b98 <__aeabi_d2f>
 8006420:	f8ca 03d8 	str.w	r0, [sl, #984]	; 0x3d8
			yaw_m = (atan2(AVG_Y_M, AVG_X_M)) * 180/pi;
 8006424:	4c1a      	ldr	r4, [pc, #104]	; (8006490 <main+0x380>)
 8006426:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 800642a:	f7fe f885 	bl	8004538 <__aeabi_f2d>
 800642e:	4606      	mov	r6, r0
 8006430:	460f      	mov	r7, r1
 8006432:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8006436:	f7fe f87f 	bl	8004538 <__aeabi_f2d>
 800643a:	4632      	mov	r2, r6
 800643c:	463b      	mov	r3, r7
 800643e:	f006 fb07 	bl	800ca50 <atan2>
 8006442:	2200      	movs	r2, #0
 8006444:	4b15      	ldr	r3, [pc, #84]	; (800649c <main+0x38c>)
 8006446:	f7fe f8cf 	bl	80045e8 <__aeabi_dmul>
 800644a:	a30d      	add	r3, pc, #52	; (adr r3, 8006480 <main+0x370>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fe f9f4 	bl	800483c <__aeabi_ddiv>
 8006454:	f7fe fba0 	bl	8004b98 <__aeabi_d2f>
 8006458:	f8c4 03f0 	str.w	r0, [r4, #1008]	; 0x3f0
			HAL_prev_tick = HAL_current_tick;
 800645c:	f8d4 33e4 	ldr.w	r3, [r4, #996]	; 0x3e4
 8006460:	f8c4 33ec 	str.w	r3, [r4, #1004]	; 0x3ec
			step_taken = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c4 33e8 	str.w	r3, [r4, #1000]	; 0x3e8
 800646a:	e75f      	b.n	800632c <main+0x21c>
				angle = angle + 360;
 800646c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80064a0 <main+0x390>
 8006470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006474:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 8006478:	e77d      	b.n	8006376 <main+0x266>
 800647a:	bf00      	nop
 800647c:	f3af 8000 	nop.w
 8006480:	49249249 	.word	0x49249249
 8006484:	40092492 	.word	0x40092492
 8006488:	200003b4 	.word	0x200003b4
 800648c:	20000224 	.word	0x20000224
 8006490:	20000338 	.word	0x20000338
 8006494:	20000000 	.word	0x20000000
 8006498:	20000004 	.word	0x20000004
 800649c:	40668000 	.word	0x40668000
 80064a0:	43b40000 	.word	0x43b40000
 80064a4:	43340000 	.word	0x43340000
 80064a8:	42b40000 	.word	0x42b40000
			} else if (angle <= 180 & angle > 90) {
 80064ac:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 80064a4 <main+0x394>
 80064b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80064b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b8:	bf94      	ite	ls
 80064ba:	2301      	movls	r3, #1
 80064bc:	2300      	movhi	r3, #0
 80064be:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80064a8 <main+0x398>
 80064c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80064c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	bfd8      	it	le
 80064d0:	2300      	movle	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d040      	beq.n	8006558 <main+0x448>
				x_position = x_position - step * cos(angle / 90);
 80064d6:	4b87      	ldr	r3, [pc, #540]	; (80066f4 <main+0x5e4>)
 80064d8:	6898      	ldr	r0, [r3, #8]
 80064da:	f7fe f82d 	bl	8004538 <__aeabi_f2d>
 80064de:	4604      	mov	r4, r0
 80064e0:	460d      	mov	r5, r1
 80064e2:	eddf 7a85 	vldr	s15, [pc, #532]	; 80066f8 <main+0x5e8>
 80064e6:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80064ea:	ee17 0a90 	vmov	r0, s15
 80064ee:	f7fe f823 	bl	8004538 <__aeabi_f2d>
 80064f2:	4606      	mov	r6, r0
 80064f4:	460f      	mov	r7, r1
 80064f6:	f006 fa1b 	bl	800c930 <cos>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fe f871 	bl	80045e8 <__aeabi_dmul>
 8006506:	4680      	mov	r8, r0
 8006508:	4689      	mov	r9, r1
 800650a:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8006708 <main+0x5f8>
 800650e:	f8da 03d4 	ldr.w	r0, [sl, #980]	; 0x3d4
 8006512:	f7fe f811 	bl	8004538 <__aeabi_f2d>
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	f7fd fead 	bl	8004278 <__aeabi_dsub>
 800651e:	f7fe fb3b 	bl	8004b98 <__aeabi_d2f>
 8006522:	f8ca 03d4 	str.w	r0, [sl, #980]	; 0x3d4
				y_position = y_position - step * sin(angle / 90);
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f006 fa4b 	bl	800c9c4 <sin>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4620      	mov	r0, r4
 8006534:	4629      	mov	r1, r5
 8006536:	f7fe f857 	bl	80045e8 <__aeabi_dmul>
 800653a:	4604      	mov	r4, r0
 800653c:	460d      	mov	r5, r1
 800653e:	f8da 03d8 	ldr.w	r0, [sl, #984]	; 0x3d8
 8006542:	f7fd fff9 	bl	8004538 <__aeabi_f2d>
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f7fd fe95 	bl	8004278 <__aeabi_dsub>
 800654e:	f7fe fb23 	bl	8004b98 <__aeabi_d2f>
 8006552:	f8ca 03d8 	str.w	r0, [sl, #984]	; 0x3d8
 8006556:	e765      	b.n	8006424 <main+0x314>
			} else if (angle <= 270 & angle > 180) {
 8006558:	eddf 7a68 	vldr	s15, [pc, #416]	; 80066fc <main+0x5ec>
 800655c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	bf94      	ite	ls
 8006566:	2301      	movls	r3, #1
 8006568:	2300      	movhi	r3, #0
 800656a:	eddf 7a65 	vldr	s15, [pc, #404]	; 8006700 <main+0x5f0>
 800656e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	bfd8      	it	le
 800657c:	2300      	movle	r3, #0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d040      	beq.n	8006604 <main+0x4f4>
				x_position = x_position + step * cos(angle / 90);
 8006582:	4b5c      	ldr	r3, [pc, #368]	; (80066f4 <main+0x5e4>)
 8006584:	6898      	ldr	r0, [r3, #8]
 8006586:	f7fd ffd7 	bl	8004538 <__aeabi_f2d>
 800658a:	4604      	mov	r4, r0
 800658c:	460d      	mov	r5, r1
 800658e:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80066f8 <main+0x5e8>
 8006592:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8006596:	ee17 0a90 	vmov	r0, s15
 800659a:	f7fd ffcd 	bl	8004538 <__aeabi_f2d>
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	f006 f9c5 	bl	800c930 <cos>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4620      	mov	r0, r4
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fe f81b 	bl	80045e8 <__aeabi_dmul>
 80065b2:	4680      	mov	r8, r0
 80065b4:	4689      	mov	r9, r1
 80065b6:	f8df a150 	ldr.w	sl, [pc, #336]	; 8006708 <main+0x5f8>
 80065ba:	f8da 03d4 	ldr.w	r0, [sl, #980]	; 0x3d4
 80065be:	f7fd ffbb 	bl	8004538 <__aeabi_f2d>
 80065c2:	4642      	mov	r2, r8
 80065c4:	464b      	mov	r3, r9
 80065c6:	f7fd fe59 	bl	800427c <__adddf3>
 80065ca:	f7fe fae5 	bl	8004b98 <__aeabi_d2f>
 80065ce:	f8ca 03d4 	str.w	r0, [sl, #980]	; 0x3d4
				y_position = y_position - step * sin(angle / 90);
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f006 f9f5 	bl	800c9c4 <sin>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7fe f801 	bl	80045e8 <__aeabi_dmul>
 80065e6:	4604      	mov	r4, r0
 80065e8:	460d      	mov	r5, r1
 80065ea:	f8da 03d8 	ldr.w	r0, [sl, #984]	; 0x3d8
 80065ee:	f7fd ffa3 	bl	8004538 <__aeabi_f2d>
 80065f2:	4622      	mov	r2, r4
 80065f4:	462b      	mov	r3, r5
 80065f6:	f7fd fe3f 	bl	8004278 <__aeabi_dsub>
 80065fa:	f7fe facd 	bl	8004b98 <__aeabi_d2f>
 80065fe:	f8ca 03d8 	str.w	r0, [sl, #984]	; 0x3d8
 8006602:	e70f      	b.n	8006424 <main+0x314>
			} else if (angle < 360 & angle > 270) {
 8006604:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8006704 <main+0x5f4>
 8006608:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006610:	bf4c      	ite	mi
 8006612:	2301      	movmi	r3, #1
 8006614:	2300      	movpl	r3, #0
 8006616:	eddf 7a39 	vldr	s15, [pc, #228]	; 80066fc <main+0x5ec>
 800661a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	bfd8      	it	le
 8006628:	2300      	movle	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	f43f aefa 	beq.w	8006424 <main+0x314>
				x_position = x_position + step * cos(angle / 90);
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <main+0x5e4>)
 8006632:	6898      	ldr	r0, [r3, #8]
 8006634:	f7fd ff80 	bl	8004538 <__aeabi_f2d>
 8006638:	4604      	mov	r4, r0
 800663a:	460d      	mov	r5, r1
 800663c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80066f8 <main+0x5e8>
 8006640:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8006644:	ee17 0a90 	vmov	r0, s15
 8006648:	f7fd ff76 	bl	8004538 <__aeabi_f2d>
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	f006 f96e 	bl	800c930 <cos>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f7fd ffc4 	bl	80045e8 <__aeabi_dmul>
 8006660:	4680      	mov	r8, r0
 8006662:	4689      	mov	r9, r1
 8006664:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8006708 <main+0x5f8>
 8006668:	f8da 03d4 	ldr.w	r0, [sl, #980]	; 0x3d4
 800666c:	f7fd ff64 	bl	8004538 <__aeabi_f2d>
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	f7fd fe02 	bl	800427c <__adddf3>
 8006678:	f7fe fa8e 	bl	8004b98 <__aeabi_d2f>
 800667c:	f8ca 03d4 	str.w	r0, [sl, #980]	; 0x3d4
				y_position = y_position + step * sin(angle / 90);
 8006680:	4630      	mov	r0, r6
 8006682:	4639      	mov	r1, r7
 8006684:	f006 f99e 	bl	800c9c4 <sin>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4620      	mov	r0, r4
 800668e:	4629      	mov	r1, r5
 8006690:	f7fd ffaa 	bl	80045e8 <__aeabi_dmul>
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	f8da 03d8 	ldr.w	r0, [sl, #984]	; 0x3d8
 800669c:	f7fd ff4c 	bl	8004538 <__aeabi_f2d>
 80066a0:	4622      	mov	r2, r4
 80066a2:	462b      	mov	r3, r5
 80066a4:	f7fd fdea 	bl	800427c <__adddf3>
 80066a8:	f7fe fa76 	bl	8004b98 <__aeabi_d2f>
 80066ac:	f8ca 03d8 	str.w	r0, [sl, #984]	; 0x3d8
 80066b0:	e6b8      	b.n	8006424 <main+0x314>
		SendMotionData();
 80066b2:	f7ff f8dd 	bl	8005870 <SendMotionData>
    	SendAccGyroMag=0;
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <main+0x5f8>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	679a      	str	r2, [r3, #120]	; 0x78
    __WFI();
 80066bc:	bf30      	wfi
      if(!connected) {
 80066be:	4b13      	ldr	r3, [pc, #76]	; (800670c <main+0x5fc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f43f ad58 	beq.w	8006178 <main+0x68>
    if(set_connectable){
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <main+0x600>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f ad5d 	bne.w	800618c <main+0x7c>
    if(HCI_ProcessEvent) {
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <main+0x5f8>)
 80066d4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f47f ad5d 	bne.w	8006198 <main+0x88>
    if(ReadSensor) {
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <main+0x5f8>)
 80066e0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f47f ad5e 	bne.w	80061a6 <main+0x96>
    if(SendAccGyroMag) {
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <main+0x5f8>)
 80066ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0e4      	beq.n	80066bc <main+0x5ac>
 80066f2:	e7de      	b.n	80066b2 <main+0x5a2>
 80066f4:	20000004 	.word	0x20000004
 80066f8:	42b40000 	.word	0x42b40000
 80066fc:	43870000 	.word	0x43870000
 8006700:	43340000 	.word	0x43340000
 8006704:	43b40000 	.word	0x43b40000
 8006708:	20000338 	.word	0x20000338
 800670c:	20000224 	.word	0x20000224
 8006710:	20000000 	.word	0x20000000

08006714 <HAL_GPIO_EXTI_Callback>:
 * @param  uint16_t GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{  
  switch(GPIO_Pin){
 8006714:	2820      	cmp	r0, #32
 8006716:	d000      	beq.n	800671a <HAL_GPIO_EXTI_Callback+0x6>
 8006718:	4770      	bx	lr
{  
 800671a:	b508      	push	{r3, lr}
  case HCI_TL_SPI_EXTI_PIN: 
      hci_tl_lowlevel_isr();
 800671c:	f7fe fe8e 	bl	800543c <hci_tl_lowlevel_isr>
      HCI_ProcessEvent=1;
 8006720:	4b02      	ldr	r3, [pc, #8]	; (800672c <HAL_GPIO_EXTI_Callback+0x18>)
 8006722:	2201      	movs	r2, #1
 8006724:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

//  case BSP_LSM6DSM_INT2:
//    MEMSInterrupt=1;
//    break;
  }
}
 8006728:	bd08      	pop	{r3, pc}
 800672a:	bf00      	nop
 800672c:	20000338 	.word	0x20000338

08006730 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8006730:	b530      	push	{r4, r5, lr}
 8006732:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006734:	4c16      	ldr	r4, [pc, #88]	; (8006790 <HAL_PCD_MspInit+0x60>)
 8006736:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800673e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	9b01      	ldr	r3, [sp, #4]

  /* Configure DM DP Pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8006748:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800674c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674e:	2302      	movs	r3, #2
 8006750:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006752:	2500      	movs	r5, #0
 8006754:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006756:	2303      	movs	r3, #3
 8006758:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800675a:	230a      	movs	r3, #10
 800675c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800675e:	a903      	add	r1, sp, #12
 8006760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006764:	f000 fd32 	bl	80071cc <HAL_GPIO_Init>

  /* Enable USB FS Clock */
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006768:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800676a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800676e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006770:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	9b02      	ldr	r3, [sp, #8]

  /* Set USB FS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800677a:	462a      	mov	r2, r5
 800677c:	2106      	movs	r1, #6
 800677e:	2043      	movs	r0, #67	; 0x43
 8006780:	f000 fcca 	bl	8007118 <HAL_NVIC_SetPriority>

  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006784:	2043      	movs	r0, #67	; 0x43
 8006786:	f000 fcff 	bl	8007188 <HAL_NVIC_EnableIRQ>
}
 800678a:	b009      	add	sp, #36	; 0x24
 800678c:	bd30      	pop	{r4, r5, pc}
 800678e:	bf00      	nop
 8006790:	40021000 	.word	0x40021000

08006794 <HAL_TIM_Base_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006794:	b500      	push	{lr}
 8006796:	b083      	sub	sp, #12
  if (htim->Instance == TIM4) {
 8006798:	6803      	ldr	r3, [r0, #0]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <HAL_TIM_Base_MspInit+0x64>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d005      	beq.n	80067ac <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0xF, 0);

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  #endif /* ALLMEMS1_MOTIONFA */
  } else if (htim->Instance == TIM5) {
 80067a0:	4a16      	ldr	r2, [pc, #88]	; (80067fc <HAL_TIM_Base_MspInit+0x68>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d015      	beq.n	80067d2 <HAL_TIM_Base_MspInit+0x3e>

    /* Enable the TIMx global Interrupt */
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  }

}  
 80067a6:	b003      	add	sp, #12
 80067a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 80067ac:	4b14      	ldr	r3, [pc, #80]	; (8006800 <HAL_TIM_Base_MspInit+0x6c>)
 80067ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067b0:	f042 0204 	orr.w	r2, r2, #4
 80067b4:	659a      	str	r2, [r3, #88]	; 0x58
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0xF, 0);
 80067c0:	2200      	movs	r2, #0
 80067c2:	210f      	movs	r1, #15
 80067c4:	201e      	movs	r0, #30
 80067c6:	f000 fca7 	bl	8007118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80067ca:	201e      	movs	r0, #30
 80067cc:	f000 fcdc 	bl	8007188 <HAL_NVIC_EnableIRQ>
 80067d0:	e7e9      	b.n	80067a6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_TIM_Base_MspInit+0x6c>)
 80067d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067d6:	f042 0208 	orr.w	r2, r2, #8
 80067da:	659a      	str	r2, [r3, #88]	; 0x58
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0xF, 0);
 80067e6:	2200      	movs	r2, #0
 80067e8:	210f      	movs	r1, #15
 80067ea:	2032      	movs	r0, #50	; 0x32
 80067ec:	f000 fc94 	bl	8007118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80067f0:	2032      	movs	r0, #50	; 0x32
 80067f2:	f000 fcc9 	bl	8007188 <HAL_NVIC_EnableIRQ>
}  
 80067f6:	e7d6      	b.n	80067a6 <HAL_TIM_Base_MspInit+0x12>
 80067f8:	40000800 	.word	0x40000800
 80067fc:	40000c00 	.word	0x40000c00
 8006800:	40021000 	.word	0x40021000

08006804 <HAL_TIM_OC_MspInit>:
  *  - Peripheral's Interrupt Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{ 
 8006804:	b500      	push	{lr}
 8006806:	b083      	sub	sp, #12
  /* TIM1 Peripheral clock enable */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_TIM_OC_MspInit+0x30>)
 800680a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800680c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006810:	661a      	str	r2, [r3, #96]	; 0x60
 8006812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006818:	9301      	str	r3, [sp, #4]
 800681a:	9b01      	ldr	r3, [sp, #4]

  /* Enable TIM1 global Interrupt & set priority  */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0x8, 0);
 800681c:	2200      	movs	r2, #0
 800681e:	2108      	movs	r1, #8
 8006820:	201b      	movs	r0, #27
 8006822:	f000 fc79 	bl	8007118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006826:	201b      	movs	r0, #27
 8006828:	f000 fcae 	bl	8007188 <HAL_NVIC_EnableIRQ>
}
 800682c:	b003      	add	sp, #12
 800682e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006832:	bf00      	nop
 8006834:	40021000 	.word	0x40021000

08006838 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006838:	4770      	bx	lr

0800683a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800683a:	e7fe      	b.n	800683a <HardFault_Handler>

0800683c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800683c:	e7fe      	b.n	800683c <MemManage_Handler>

0800683e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800683e:	e7fe      	b.n	800683e <BusFault_Handler>

08006840 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8006840:	e7fe      	b.n	8006840 <UsageFault_Handler>

08006842 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8006842:	4770      	bx	lr

08006844 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8006844:	4770      	bx	lr

08006846 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8006846:	4770      	bx	lr

08006848 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8006848:	b508      	push	{r3, lr}
  HAL_IncTick();
 800684a:	f000 fc41 	bl	80070d0 <HAL_IncTick>
}
 800684e:	bd08      	pop	{r3, pc}

08006850 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8006850:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimEnvHandle);
 8006852:	4802      	ldr	r0, [pc, #8]	; (800685c <TIM4_IRQHandler+0xc>)
 8006854:	f003 fa20 	bl	8009c98 <HAL_TIM_IRQHandler>
}
 8006858:	bd08      	pop	{r3, pc}
 800685a:	bf00      	nop
 800685c:	200003b4 	.word	0x200003b4

08006860 <TIM5_IRQHandler>:
  * @retval None
  */
void TIM5_IRQHandler(void)
{  

}
 8006860:	4770      	bx	lr
	...

08006864 <TIM1_CC_IRQHandler>:
  * @brief  This function handles TIM1 Interrupt request
  * @param  None
  * @retval None
  */
void TIM1_CC_IRQHandler(void)
{
 8006864:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimCCHandle);
 8006866:	4802      	ldr	r0, [pc, #8]	; (8006870 <TIM1_CC_IRQHandler+0xc>)
 8006868:	f003 fa16 	bl	8009c98 <HAL_TIM_IRQHandler>
}
 800686c:	bd08      	pop	{r3, pc}
 800686e:	bf00      	nop
 8006870:	20000364 	.word	0x20000364

08006874 <EXTI3_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 8006874:	b508      	push	{r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006876:	2008      	movs	r0, #8
 8006878:	f000 fe44 	bl	8007504 <HAL_GPIO_EXTI_IRQHandler>
//  SW_BV_send_Callback();

}
 800687c:	bd08      	pop	{r3, pc}

0800687e <EXTI9_5_IRQHandler>:
  *         interrupt request for BlueNRG.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 800687e:	b508      	push	{r3, lr}
  //HAL_GPIO_EXTI_IRQHandler(BNRG_SPI_EXTI_PIN);
  HAL_GPIO_EXTI_IRQHandler(HCI_TL_SPI_EXTI_PIN);
 8006880:	2020      	movs	r0, #32
 8006882:	f000 fe3f 	bl	8007504 <HAL_GPIO_EXTI_IRQHandler>
}
 8006886:	bd08      	pop	{r3, pc}

08006888 <EXTI2_IRQHandler>:
  * @retval None
  */
void EXTI2_IRQHandler( void )
{
//  HAL_GPIO_EXTI_IRQHandler(BSP_LSM6DSM_INT2);
}
 8006888:	4770      	bx	lr
	...

0800688c <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 800688c:	b508      	push	{r3, lr}
  HAL_PCD_IRQHandler(&hpcd);
 800688e:	4802      	ldr	r0, [pc, #8]	; (8006898 <OTG_FS_IRQHandler+0xc>)
 8006890:	f000 ffa2 	bl	80077d8 <HAL_PCD_IRQHandler>
}
 8006894:	bd08      	pop	{r3, pc}
 8006896:	bf00      	nop
 8006898:	200020d4 	.word	0x200020d4

0800689c <TIM8_UP_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM8_IRQHandler(void)
{
 800689c:	b508      	push	{r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 800689e:	4802      	ldr	r0, [pc, #8]	; (80068a8 <TIM8_UP_IRQHandler+0xc>)
 80068a0:	f003 f9fa 	bl	8009c98 <HAL_TIM_IRQHandler>
}
 80068a4:	bd08      	pop	{r3, pc}
 80068a6:	bf00      	nop
 80068a8:	20000878 	.word	0x20000878

080068ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068ac:	b510      	push	{r4, lr}
 80068ae:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068b0:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <_sbrk+0x38>)
 80068b2:	490d      	ldr	r1, [pc, #52]	; (80068e8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068b4:	480d      	ldr	r0, [pc, #52]	; (80068ec <_sbrk+0x40>)
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	b140      	cbz	r0, 80068cc <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068ba:	480c      	ldr	r0, [pc, #48]	; (80068ec <_sbrk+0x40>)
 80068bc:	6800      	ldr	r0, [r0, #0]
 80068be:	4403      	add	r3, r0
 80068c0:	1a52      	subs	r2, r2, r1
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d806      	bhi.n	80068d4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <_sbrk+0x40>)
 80068c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80068ca:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80068cc:	4807      	ldr	r0, [pc, #28]	; (80068ec <_sbrk+0x40>)
 80068ce:	4c08      	ldr	r4, [pc, #32]	; (80068f0 <_sbrk+0x44>)
 80068d0:	6004      	str	r4, [r0, #0]
 80068d2:	e7f2      	b.n	80068ba <_sbrk+0xe>
    errno = ENOMEM;
 80068d4:	f007 ffde 	bl	800e894 <__errno>
 80068d8:	230c      	movs	r3, #12
 80068da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e7f3      	b.n	80068ca <_sbrk+0x1e>
 80068e2:	bf00      	nop
 80068e4:	20018000 	.word	0x20018000
 80068e8:	00002000 	.word	0x00002000
 80068ec:	20000874 	.word	0x20000874
 80068f0:	200029a8 	.word	0x200029a8

080068f4 <CDC_Itf_DeInit>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_DeInit(void)
{
  return (USBD_OK);
}
 80068f4:	2000      	movs	r0, #0
 80068f6:	4770      	bx	lr

080068f8 <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 80068f8:	2820      	cmp	r0, #32
 80068fa:	d003      	beq.n	8006904 <CDC_Itf_Control+0xc>
 80068fc:	2821      	cmp	r0, #33	; 0x21
 80068fe:	d014      	beq.n	800692a <CDC_Itf_Control+0x32>
  default:
    break;
  }
  
  return (USBD_OK);
}
 8006900:	2000      	movs	r0, #0
 8006902:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8006904:	780b      	ldrb	r3, [r1, #0]
 8006906:	784a      	ldrb	r2, [r1, #1]
 8006908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 800690c:	788a      	ldrb	r2, [r1, #2]
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800690e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 8006912:	78ca      	ldrb	r2, [r1, #3]
 8006914:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8006918:	4a0c      	ldr	r2, [pc, #48]	; (800694c <CDC_Itf_Control+0x54>)
 800691a:	6013      	str	r3, [r2, #0]
    LineCoding.format     = pbuf[4];
 800691c:	790b      	ldrb	r3, [r1, #4]
 800691e:	7113      	strb	r3, [r2, #4]
    LineCoding.paritytype = pbuf[5];
 8006920:	794b      	ldrb	r3, [r1, #5]
 8006922:	7153      	strb	r3, [r2, #5]
    LineCoding.datatype   = pbuf[6];
 8006924:	798b      	ldrb	r3, [r1, #6]
 8006926:	7193      	strb	r3, [r2, #6]
    break;
 8006928:	e7ea      	b.n	8006900 <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800692a:	4b08      	ldr	r3, [pc, #32]	; (800694c <CDC_Itf_Control+0x54>)
 800692c:	781a      	ldrb	r2, [r3, #0]
 800692e:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8006930:	785a      	ldrb	r2, [r3, #1]
 8006932:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8006934:	789a      	ldrb	r2, [r3, #2]
 8006936:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8006938:	78da      	ldrb	r2, [r3, #3]
 800693a:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800693c:	791a      	ldrb	r2, [r3, #4]
 800693e:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 8006940:	795a      	ldrb	r2, [r3, #5]
 8006942:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 8006944:	799b      	ldrb	r3, [r3, #6]
 8006946:	718b      	strb	r3, [r1, #6]
    break;
 8006948:	e7da      	b.n	8006900 <CDC_Itf_Control+0x8>
 800694a:	bf00      	nop
 800694c:	20000010 	.word	0x20000010

08006950 <CDC_Itf_Receive>:
//  }
//  
//  /* Initiate next USB packet transfer */
//  USBD_CDC_ReceivePacket(&USBD_Device);
  return (USBD_OK);
}
 8006950:	2000      	movs	r0, #0
 8006952:	4770      	bx	lr

08006954 <CDC_TIM_Config>:
  * @brief  CDC_TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void CDC_TIM_Config(void)
{  
 8006954:	b508      	push	{r3, lr}
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8006956:	4809      	ldr	r0, [pc, #36]	; (800697c <CDC_TIM_Config+0x28>)
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <CDC_TIM_Config+0x2c>)
 800695a:	6003      	str	r3, [r0, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 800695c:	f241 3387 	movw	r3, #4999	; 0x1387
 8006960:	60c3      	str	r3, [r0, #12]
  TimHandle.Init.Prescaler = 80-1;
 8006962:	234f      	movs	r3, #79	; 0x4f
 8006964:	6043      	str	r3, [r0, #4]
  TimHandle.Init.ClockDivision = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	6103      	str	r3, [r0, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800696a:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800696c:	f003 fac6 	bl	8009efc <HAL_TIM_Base_Init>
 8006970:	b900      	cbnz	r0, 8006974 <CDC_TIM_Config+0x20>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 8006972:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006974:	f7ff fb5e 	bl	8006034 <Error_Handler>
}
 8006978:	e7fb      	b.n	8006972 <CDC_TIM_Config+0x1e>
 800697a:	bf00      	nop
 800697c:	20000878 	.word	0x20000878
 8006980:	40013400 	.word	0x40013400

08006984 <CDC_Itf_Init>:
{
 8006984:	b530      	push	{r4, r5, lr}
 8006986:	b083      	sub	sp, #12
  TIMx_CLK_ENABLE();
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <CDC_Itf_Init+0x5c>)
 800698a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800698c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
 8006992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006998:	9301      	str	r3, [sp, #4]
 800699a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(TIMx_IRQn, 0x6, 0);
 800699c:	2200      	movs	r2, #0
 800699e:	2106      	movs	r1, #6
 80069a0:	202c      	movs	r0, #44	; 0x2c
 80069a2:	f000 fbb9 	bl	8007118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80069a6:	202c      	movs	r0, #44	; 0x2c
 80069a8:	f000 fbee 	bl	8007188 <HAL_NVIC_EnableIRQ>
  CDC_TIM_Config();
 80069ac:	f7ff ffd2 	bl	8006954 <CDC_TIM_Config>
  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80069b0:	480c      	ldr	r0, [pc, #48]	; (80069e4 <CDC_Itf_Init+0x60>)
 80069b2:	f003 f90f 	bl	8009bd4 <HAL_TIM_Base_Start_IT>
 80069b6:	b978      	cbnz	r0, 80069d8 <CDC_Itf_Init+0x54>
  USBD_CDC_SetTxBuffer(&USBD_Device, UserTxBuffer, 0);
 80069b8:	4d0a      	ldr	r5, [pc, #40]	; (80069e4 <CDC_Itf_Init+0x60>)
 80069ba:	4c0b      	ldr	r4, [pc, #44]	; (80069e8 <CDC_Itf_Init+0x64>)
 80069bc:	2200      	movs	r2, #0
 80069be:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80069c2:	4620      	mov	r0, r4
 80069c4:	f005 f8c6 	bl	800bb54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&USBD_Device, UserRxBuffer);
 80069c8:	f605 014c 	addw	r1, r5, #2124	; 0x84c
 80069cc:	4620      	mov	r0, r4
 80069ce:	f005 f8cc 	bl	800bb6a <USBD_CDC_SetRxBuffer>
}
 80069d2:	2000      	movs	r0, #0
 80069d4:	b003      	add	sp, #12
 80069d6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80069d8:	f7ff fb2c 	bl	8006034 <Error_Handler>
 80069dc:	e7ec      	b.n	80069b8 <CDC_Itf_Init+0x34>
 80069de:	bf00      	nop
 80069e0:	40021000 	.word	0x40021000
 80069e4:	20000878 	.word	0x20000878
 80069e8:	2000042c 	.word	0x2000042c

080069ec <CDC_Fill_Buffer>:
  for (i = 0; i < TotalLen; i++)
 80069ec:	2200      	movs	r2, #0
 80069ee:	428a      	cmp	r2, r1
 80069f0:	d215      	bcs.n	8006a1e <CDC_Fill_Buffer+0x32>
{
 80069f2:	b530      	push	{r4, r5, lr}
    UserTxBuffer[UserTxBufPtrIn] = Buf[i];
 80069f4:	4d0b      	ldr	r5, [pc, #44]	; (8006a24 <CDC_Fill_Buffer+0x38>)
 80069f6:	f855 3cac 	ldr.w	r3, [r5, #-172]
 80069fa:	f810 e002 	ldrb.w	lr, [r0, r2]
 80069fe:	4c0a      	ldr	r4, [pc, #40]	; (8006a28 <CDC_Fill_Buffer+0x3c>)
 8006a00:	eb04 0c03 	add.w	ip, r4, r3
 8006a04:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
    UserTxBufPtrIn = (UserTxBufPtrIn + 1) % APP_RX_DATA_SIZE;
 8006a08:	3301      	adds	r3, #1
 8006a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0e:	f845 3cac 	str.w	r3, [r5, #-172]
  for (i = 0; i < TotalLen; i++)
 8006a12:	3201      	adds	r2, #1
 8006a14:	b292      	uxth	r2, r2
 8006a16:	428a      	cmp	r2, r1
 8006a18:	d3ec      	bcc.n	80069f4 <CDC_Fill_Buffer+0x8>
}
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	bd30      	pop	{r4, r5, pc}
 8006a1e:	2000      	movs	r0, #0
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	20001970 	.word	0x20001970
 8006a28:	20000878 	.word	0x20000878

08006a2c <CDC_TIM_PeriodElapsedCallback>:
{
 8006a2c:	b538      	push	{r3, r4, r5, lr}
  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8006a30:	f852 3ca8 	ldr.w	r3, [r2, #-168]
 8006a34:	f852 4cac 	ldr.w	r4, [r2, #-172]
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d016      	beq.n	8006a6a <CDC_TIM_PeriodElapsedCallback+0x3e>
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* Rollback */
 8006a3c:	d916      	bls.n	8006a6c <CDC_TIM_PeriodElapsedCallback+0x40>
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8006a3e:	f5c3 6400 	rsb	r4, r3, #2048	; 0x800
    USBD_CDC_SetTxBuffer(&USBD_Device, (uint8_t*)&UserTxBuffer[buffptr], buffsize);
 8006a42:	4d0e      	ldr	r5, [pc, #56]	; (8006a7c <CDC_TIM_PeriodElapsedCallback+0x50>)
 8006a44:	4622      	mov	r2, r4
 8006a46:	490e      	ldr	r1, [pc, #56]	; (8006a80 <CDC_TIM_PeriodElapsedCallback+0x54>)
 8006a48:	4419      	add	r1, r3
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f005 f882 	bl	800bb54 <USBD_CDC_SetTxBuffer>
    if(USBD_CDC_TransmitPacket(&USBD_Device) == USBD_OK)
 8006a50:	4628      	mov	r0, r5
 8006a52:	f005 f893 	bl	800bb7c <USBD_CDC_TransmitPacket>
 8006a56:	b940      	cbnz	r0, 8006a6a <CDC_TIM_PeriodElapsedCallback+0x3e>
      UserTxBufPtrOut += buffsize;
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <CDC_TIM_PeriodElapsedCallback+0x4c>)
 8006a5a:	f853 2ca8 	ldr.w	r2, [r3, #-168]
 8006a5e:	4422      	add	r2, r4
 8006a60:	f843 2ca8 	str.w	r2, [r3, #-168]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8006a64:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006a68:	d002      	beq.n	8006a70 <CDC_TIM_PeriodElapsedCallback+0x44>
}
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8006a6c:	1ae4      	subs	r4, r4, r3
 8006a6e:	e7e8      	b.n	8006a42 <CDC_TIM_PeriodElapsedCallback+0x16>
        UserTxBufPtrOut = 0;
 8006a70:	2200      	movs	r2, #0
 8006a72:	f843 2ca8 	str.w	r2, [r3, #-168]
}
 8006a76:	e7f8      	b.n	8006a6a <CDC_TIM_PeriodElapsedCallback+0x3e>
 8006a78:	20001970 	.word	0x20001970
 8006a7c:	2000042c 	.word	0x2000042c
 8006a80:	200008c4 	.word	0x200008c4

08006a84 <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006a84:	b508      	push	{r3, lr}
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a86:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006a8a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006a8e:	f005 f8d2 	bl	800bc36 <USBD_LL_SetupStage>
}
 8006a92:	bd08      	pop	{r3, pc}

08006a94 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006a94:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a96:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006a9a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006a9e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006aa2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006aa6:	f005 f8f2 	bl	800bc8e <USBD_LL_DataOutStage>
}
 8006aaa:	bd08      	pop	{r3, pc}

08006aac <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006aac:	b508      	push	{r3, lr}
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aae:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8006ab2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006ab6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006abc:	f005 f923 	bl	800bd06 <USBD_LL_DataInStage>
}
 8006ac0:	bd08      	pop	{r3, pc}

08006ac2 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006ac2:	b508      	push	{r3, lr}
  USBD_LL_SOF(hpcd->pData);
 8006ac4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ac8:	f005 f9c3 	bl	800be52 <USBD_LL_SOF>
}
 8006acc:	bd08      	pop	{r3, pc}

08006ace <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	4604      	mov	r4, r0
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8006ad2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006ad6:	f005 f975 	bl	800bdc4 <USBD_LL_Reset>
  
  /* Set USB Current Speed */ 
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8006ada:	2101      	movs	r1, #1
 8006adc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8006ae0:	f005 f99d 	bl	800be1e <USBD_LL_SetSpeed>
}
 8006ae4:	bd10      	pop	{r4, pc}

08006ae6 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006ae6:	b508      	push	{r3, lr}
  USBD_LL_Suspend(hpcd->pData);
 8006ae8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006aec:	f005 f99a 	bl	800be24 <USBD_LL_Suspend>
}
 8006af0:	bd08      	pop	{r3, pc}

08006af2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006af2:	b508      	push	{r3, lr}
  USBD_LL_Resume(hpcd->pData);
 8006af4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006af8:	f005 f99e 	bl	800be38 <USBD_LL_Resume>
}
 8006afc:	bd08      	pop	{r3, pc}

08006afe <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006afe:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8006b00:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b04:	f005 f9cd 	bl	800bea2 <USBD_LL_IsoOUTIncomplete>
}
 8006b08:	bd08      	pop	{r3, pc}

08006b0a <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle 
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006b0a:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 8006b0c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b10:	f005 f9b3 	bl	800be7a <USBD_LL_IsoINIncomplete>
}
 8006b14:	bd08      	pop	{r3, pc}

08006b16 <HAL_PCD_ConnectCallback>:
  * @brief  ConnectCallback callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006b16:	b508      	push	{r3, lr}
  USBD_LL_DevConnected(hpcd->pData);
 8006b18:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b1c:	f005 f9d5 	bl	800beca <USBD_LL_DevConnected>
}
 8006b20:	bd08      	pop	{r3, pc}

08006b22 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006b22:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected(hpcd->pData);
 8006b24:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8006b28:	f005 f9d1 	bl	800bece <USBD_LL_DevDisconnected>
}
 8006b2c:	bd08      	pop	{r3, pc}
	...

08006b30 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b30:	b570      	push	{r4, r5, r6, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 8006b32:	4c15      	ldr	r4, [pc, #84]	; (8006b88 <USBD_LL_Init+0x58>)
 8006b34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b38:	6023      	str	r3, [r4, #0]
  hpcd.Init.dev_endpoints = 5;
 8006b3a:	2305      	movs	r3, #5
 8006b3c:	6063      	str	r3, [r4, #4]
  hpcd.Init.use_dedicated_ep1 = 0;
 8006b3e:	2500      	movs	r5, #0
 8006b40:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.ep0_mps = 0x40;
 8006b42:	2640      	movs	r6, #64	; 0x40
 8006b44:	6166      	str	r6, [r4, #20]
  hpcd.Init.dma_enable = 0;
 8006b46:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8006b48:	6225      	str	r5, [r4, #32]
  hpcd.Init.lpm_enable = 0;
 8006b4a:	6265      	str	r5, [r4, #36]	; 0x24
  hpcd.Init.battery_charging_enable = 0;
 8006b4c:	62a5      	str	r5, [r4, #40]	; 0x28
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	61a3      	str	r3, [r4, #24]
  hpcd.Init.Sof_enable = 0;
 8006b52:	61e5      	str	r5, [r4, #28]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8006b54:	60e3      	str	r3, [r4, #12]
  hpcd.Init.vbus_sensing_enable = 0;
 8006b56:	62e5      	str	r5, [r4, #44]	; 0x2c
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8006b58:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  pdev->pData = &hpcd;
 8006b5c:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fd42 	bl	80075ea <HAL_PCD_Init>
  
  HAL_PCD_SetRxFiFo(&hpcd, 0x80);
 8006b66:	2180      	movs	r1, #128	; 0x80
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f001 f9fc 	bl	8007f66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 0, 0x40);
 8006b6e:	4632      	mov	r2, r6
 8006b70:	4629      	mov	r1, r5
 8006b72:	4620      	mov	r0, r4
 8006b74:	f001 f9d1 	bl	8007f1a <HAL_PCDEx_SetTxFiFo>
  HAL_PCD_SetTxFiFo(&hpcd, 1, 0x80);
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f001 f9cc 	bl	8007f1a <HAL_PCDEx_SetTxFiFo>

  return USBD_OK;
}
 8006b82:	4628      	mov	r0, r5
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	bf00      	nop
 8006b88:	200020d4 	.word	0x200020d4

08006b8c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b8c:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8006b8e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006b92:	f000 fdc8 	bl	8007726 <HAL_PCD_Start>
  return USBD_OK;
}
 8006b96:	2000      	movs	r0, #0
 8006b98:	bd08      	pop	{r3, pc}

08006b9a <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8006b9a:	b508      	push	{r3, lr}
 8006b9c:	4694      	mov	ip, r2
 8006b9e:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 8006ba0:	4663      	mov	r3, ip
 8006ba2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006ba6:	f001 f86d 	bl	8007c84 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 8006baa:	2000      	movs	r0, #0
 8006bac:	bd08      	pop	{r3, pc}

08006bae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bae:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006bb0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bb4:	f001 f8ab 	bl	8007d0e <HAL_PCD_EP_Close>
  return USBD_OK;
}
 8006bb8:	2000      	movs	r0, #0
 8006bba:	bd08      	pop	{r3, pc}

08006bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bbc:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006bbe:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bc2:	f001 f92c 	bl	8007e1e <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	bd08      	pop	{r3, pc}

08006bca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bca:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006bcc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006bd0:	f001 f968 	bl	8007ea4 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	bd08      	pop	{r3, pc}

08006bd8 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bd8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  
  if((ep_addr & 0x80) == 0x80)
 8006bdc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006be0:	d108      	bne.n	8006bf4 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006be2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006be6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006bea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006bee:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8006bf2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006bf4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006bf8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006bfc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006c00:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8006c04:	4770      	bx	lr

08006c06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c06:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006c08:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c0c:	f001 f826 	bl	8007c5c <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 8006c10:	2000      	movs	r0, #0
 8006c12:	bd08      	pop	{r3, pc}

08006c14 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint32_t size)
{
 8006c14:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c16:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c1a:	f001 f8dd 	bl	8007dd8 <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 8006c1e:	2000      	movs	r0, #0
 8006c20:	bd08      	pop	{r3, pc}

08006c22 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint32_t size)
{
 8006c22:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c24:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c28:	f001 f8aa 	bl	8007d80 <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	bd08      	pop	{r3, pc}

08006c30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c30:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8006c32:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006c36:	f001 f8c6 	bl	8007dc6 <HAL_PCD_EP_GetRxCount>
}
 8006c3a:	bd08      	pop	{r3, pc}

08006c3c <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 8006c3c:	2312      	movs	r3, #18
 8006c3e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_DeviceDesc;
}
 8006c40:	4800      	ldr	r0, [pc, #0]	; (8006c44 <USBD_VCP_DeviceDescriptor+0x8>)
 8006c42:	4770      	bx	lr
 8006c44:	2000002c 	.word	0x2000002c

08006c48 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8006c48:	2304      	movs	r3, #4
 8006c4a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8006c4c:	4800      	ldr	r0, [pc, #0]	; (8006c50 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8006c4e:	4770      	bx	lr
 8006c50:	20000040 	.word	0x20000040

08006c54 <IntToUnicode>:
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8006c54:	2300      	movs	r3, #0
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d21e      	bcs.n	8006c98 <IntToUnicode+0x44>
{
 8006c5a:	b500      	push	{lr}
 8006c5c:	e010      	b.n	8006c80 <IntToUnicode+0x2c>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8006c5e:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
 8006c62:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }
    
    value = value << 4;
 8006c66:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 8006c68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006c6c:	f10c 0c01 	add.w	ip, ip, #1
 8006c70:	f04f 0e00 	mov.w	lr, #0
 8006c74:	f801 e00c 	strb.w	lr, [r1, ip]
  for( idx = 0 ; idx < len ; idx ++)
 8006c78:	3301      	adds	r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d209      	bcs.n	8006c94 <IntToUnicode+0x40>
    if( ((value >> 28)) < 0xA )
 8006c80:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8006c84:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8006c88:	d2e9      	bcs.n	8006c5e <IntToUnicode+0xa>
      pbuf[ 2* idx] = (value >> 28) + '0';
 8006c8a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 8006c8e:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8006c92:	e7e8      	b.n	8006c66 <IntToUnicode+0x12>
  }
}
 8006c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c98:	4770      	bx	lr
	...

08006c9c <Get_SerialNum>:
{
 8006c9c:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <Get_SerialNum+0x30>)
 8006ca0:	f8d3 0a10 	ldr.w	r0, [r3, #2576]	; 0xa10
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8006ca4:	f8d3 4a14 	ldr.w	r4, [r3, #2580]	; 0xa14
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8006ca8:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
  if (deviceserial0 != 0)
 8006cac:	18c0      	adds	r0, r0, r3
 8006cae:	d100      	bne.n	8006cb2 <Get_SerialNum+0x16>
}
 8006cb0:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 8006cb2:	4d07      	ldr	r5, [pc, #28]	; (8006cd0 <Get_SerialNum+0x34>)
 8006cb4:	2208      	movs	r2, #8
 8006cb6:	f105 011a 	add.w	r1, r5, #26
 8006cba:	f7ff ffcb 	bl	8006c54 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7ff ffc5 	bl	8006c54 <IntToUnicode>
}
 8006cca:	e7f1      	b.n	8006cb0 <Get_SerialNum+0x14>
 8006ccc:	1fff7000 	.word	0x1fff7000
 8006cd0:	2000002c 	.word	0x2000002c

08006cd4 <USBD_VCP_SerialStrDescriptor>:
{
 8006cd4:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006cd6:	231a      	movs	r3, #26
 8006cd8:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8006cda:	f7ff ffdf 	bl	8006c9c <Get_SerialNum>
}
 8006cde:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <USBD_VCP_SerialStrDescriptor+0x10>)
 8006ce0:	bd08      	pop	{r3, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000044 	.word	0x20000044

08006ce8 <USBD_VCP_ProductStrDescriptor>:
{  
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8006cec:	4c03      	ldr	r4, [pc, #12]	; (8006cfc <USBD_VCP_ProductStrDescriptor+0x14>)
 8006cee:	4621      	mov	r1, r4
 8006cf0:	4803      	ldr	r0, [pc, #12]	; (8006d00 <USBD_VCP_ProductStrDescriptor+0x18>)
 8006cf2:	f005 fc2c 	bl	800c54e <USBD_GetString>
}
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200024dc 	.word	0x200024dc
 8006d00:	0800f4d4 	.word	0x0800f4d4

08006d04 <USBD_VCP_ManufacturerStrDescriptor>:
{
 8006d04:	b510      	push	{r4, lr}
 8006d06:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006d08:	4c03      	ldr	r4, [pc, #12]	; (8006d18 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4803      	ldr	r0, [pc, #12]	; (8006d1c <USBD_VCP_ManufacturerStrDescriptor+0x18>)
 8006d0e:	f005 fc1e 	bl	800c54e <USBD_GetString>
}
 8006d12:	4620      	mov	r0, r4
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	bf00      	nop
 8006d18:	200024dc 	.word	0x200024dc
 8006d1c:	0800f4f8 	.word	0x0800f4f8

08006d20 <USBD_VCP_ConfigStrDescriptor>:
{ 
 8006d20:	b510      	push	{r4, lr}
 8006d22:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8006d24:	4c03      	ldr	r4, [pc, #12]	; (8006d34 <USBD_VCP_ConfigStrDescriptor+0x14>)
 8006d26:	4621      	mov	r1, r4
 8006d28:	4803      	ldr	r0, [pc, #12]	; (8006d38 <USBD_VCP_ConfigStrDescriptor+0x18>)
 8006d2a:	f005 fc10 	bl	800c54e <USBD_GetString>
}
 8006d2e:	4620      	mov	r0, r4
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	bf00      	nop
 8006d34:	200024dc 	.word	0x200024dc
 8006d38:	0800f50c 	.word	0x0800f50c

08006d3c <USBD_VCP_InterfaceStrDescriptor>:
{
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8006d40:	4c03      	ldr	r4, [pc, #12]	; (8006d50 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8006d42:	4621      	mov	r1, r4
 8006d44:	4803      	ldr	r0, [pc, #12]	; (8006d54 <USBD_VCP_InterfaceStrDescriptor+0x18>)
 8006d46:	f005 fc02 	bl	800c54e <USBD_GetString>
}
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	200024dc 	.word	0x200024dc
 8006d54:	0800f518 	.word	0x0800f518

08006d58 <BSP_LED_Init>:
*          This parameter can be one of the following values:
*            @arg  LED1
* @retval None
*/
void BSP_LED_Init(Led_TypeDef Led)
{
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	4604      	mov	r4, r0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable VddIO2 for GPIOG  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d5e:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <BSP_LED_Init+0x74>)
 8006d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d66:	659a      	str	r2, [r3, #88]	; 0x58
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 8006d72:	f001 f929 	bl	8007fc8 <HAL_PWREx_EnableVddIO2>

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006d76:	b94c      	cbnz	r4, 8006d8c <BSP_LED_Init+0x34>
 8006d78:	4b14      	ldr	r3, [pc, #80]	; (8006dcc <BSP_LED_Init+0x74>)
 8006d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d80:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	2c01      	cmp	r4, #1
 8006d8e:	d011      	beq.n	8006db4 <BSP_LED_Init+0x5c>
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <BSP_LED_Init+0x78>)
 8006d92:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d96:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8006da0:	2302      	movs	r3, #2
 8006da2:	9306      	str	r3, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8006da4:	a903      	add	r1, sp, #12
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <BSP_LED_Init+0x7c>)
 8006da8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006dac:	f000 fa0e 	bl	80071cc <HAL_GPIO_Init>
}
 8006db0:	b008      	add	sp, #32
 8006db2:	bd10      	pop	{r4, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <BSP_LED_Init+0x74>)
 8006db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	e7e2      	b.n	8006d90 <BSP_LED_Init+0x38>
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	0800f220 	.word	0x0800f220
 8006dd4:	2000007c 	.word	0x2000007c

08006dd8 <BSP_LED_Toggle>:
*            @arg  LED3
*            @arg  LED4
* @retval None
*/
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8006dd8:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <BSP_LED_Toggle+0x14>)
 8006ddc:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 8006de0:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <BSP_LED_Toggle+0x18>)
 8006de2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006de6:	f000 fb83 	bl	80074f0 <HAL_GPIO_TogglePin>
}
 8006dea:	bd08      	pop	{r3, pc}
 8006dec:	0800f220 	.word	0x0800f220
 8006df0:	2000007c 	.word	0x2000007c

08006df4 <SPI2_MspInit>:
  return ret;
}


static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006df4:	b500      	push	{lr}
 8006df6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006df8:	4b11      	ldr	r3, [pc, #68]	; (8006e40 <SPI2_MspInit+0x4c>)
 8006dfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e00:	659a      	str	r2, [r3, #88]	; 0x58
 8006e02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e04:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e0e:	f042 0202 	orr.w	r2, r2, #2
 8006e12:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	9b02      	ldr	r3, [sp, #8]

    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006e1e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006e22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e24:	2302      	movs	r3, #2
 8006e26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e28:	2201      	movs	r2, #1
 8006e2a:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e2c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e2e:	2305      	movs	r3, #5
 8006e30:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e32:	a903      	add	r1, sp, #12
 8006e34:	4803      	ldr	r0, [pc, #12]	; (8006e44 <SPI2_MspInit+0x50>)
 8006e36:	f000 f9c9 	bl	80071cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8006e3a:	b009      	add	sp, #36	; 0x24
 8006e3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e40:	40021000 	.word	0x40021000
 8006e44:	48000400 	.word	0x48000400

08006e48 <SPI1_MspInit>:
{
 8006e48:	b500      	push	{lr}
 8006e4a:	b089      	sub	sp, #36	; 0x24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <SPI1_MspInit+0x50>)
 8006e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e54:	661a      	str	r2, [r3, #96]	; 0x60
 8006e56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e58:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e5c:	9201      	str	r2, [sp, #4]
 8006e5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	9302      	str	r3, [sp, #8]
 8006e70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006e72:	23e0      	movs	r3, #224	; 0xe0
 8006e74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e76:	2302      	movs	r3, #2
 8006e78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006e82:	2305      	movs	r3, #5
 8006e84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e86:	a903      	add	r1, sp, #12
 8006e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e8c:	f000 f99e 	bl	80071cc <HAL_GPIO_Init>
}
 8006e90:	b009      	add	sp, #36	; 0x24
 8006e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000

08006e9c <BSP_SPI2_Send>:
{
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	460c      	mov	r4, r1
  if(HAL_SPI_Transmit(&hbusspi2, pData, len, TIMEOUT_DURATION) == HAL_OK)
 8006ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ea4:	460a      	mov	r2, r1
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	4804      	ldr	r0, [pc, #16]	; (8006ebc <BSP_SPI2_Send+0x20>)
 8006eaa:	f002 fa3b 	bl	8009324 <HAL_SPI_Transmit>
 8006eae:	b908      	cbnz	r0, 8006eb4 <BSP_SPI2_Send+0x18>
      ret = len;
 8006eb0:	4620      	mov	r0, r4
}
 8006eb2:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006eb4:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006eb8:	e7fb      	b.n	8006eb2 <BSP_SPI2_Send+0x16>
 8006eba:	bf00      	nop
 8006ebc:	200025dc 	.word	0x200025dc

08006ec0 <BSP_SPI1_SendRecv>:
{
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8006ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	460a      	mov	r2, r1
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	4805      	ldr	r0, [pc, #20]	; (8006ee8 <BSP_SPI1_SendRecv+0x28>)
 8006ed4:	f002 fb40 	bl	8009558 <HAL_SPI_TransmitReceive>
 8006ed8:	b910      	cbnz	r0, 8006ee0 <BSP_SPI1_SendRecv+0x20>
      ret = len;
 8006eda:	4620      	mov	r0, r4
}
 8006edc:	b002      	add	sp, #8
 8006ede:	bd10      	pop	{r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006ee0:	f06f 0005 	mvn.w	r0, #5
  return ret;
 8006ee4:	e7fa      	b.n	8006edc <BSP_SPI1_SendRecv+0x1c>
 8006ee6:	bf00      	nop
 8006ee8:	20002640 	.word	0x20002640

08006eec <BSP_GetTick>:
int32_t BSP_GetTick(void) {
 8006eec:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8006eee:	f000 f8fb 	bl	80070e8 <HAL_GetTick>
}
 8006ef2:	bd08      	pop	{r3, pc}

08006ef4 <MX_SPI1_Init>:
{
 8006ef4:	b508      	push	{r3, lr}
  hspi->Instance = SPI1;
 8006ef6:	4a0f      	ldr	r2, [pc, #60]	; (8006f34 <MX_SPI1_Init+0x40>)
 8006ef8:	6002      	str	r2, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006efa:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006efe:	6042      	str	r2, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006f00:	2200      	movs	r2, #0
 8006f02:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006f04:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f08:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f0a:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f0c:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f12:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006f14:	2118      	movs	r1, #24
 8006f16:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f18:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006f1a:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f1c:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006f1e:	2107      	movs	r1, #7
 8006f20:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f22:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f24:	2208      	movs	r2, #8
 8006f26:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006f28:	f002 f96e 	bl	8009208 <HAL_SPI_Init>
 8006f2c:	b100      	cbz	r0, 8006f30 <MX_SPI1_Init+0x3c>
    ret = HAL_ERROR;
 8006f2e:	2001      	movs	r0, #1
}
 8006f30:	bd08      	pop	{r3, pc}
 8006f32:	bf00      	nop
 8006f34:	40013000 	.word	0x40013000

08006f38 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8006f38:	b510      	push	{r4, lr}
  hbusspi1.Instance  = SPI1;
 8006f3a:	480a      	ldr	r0, [pc, #40]	; (8006f64 <BSP_SPI1_Init+0x2c>)
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <BSP_SPI1_Init+0x30>)
 8006f3e:	f840 3f64 	str.w	r3, [r0, #100]!
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8006f42:	f002 fd0e 	bl	8009962 <HAL_SPI_GetState>
 8006f46:	b108      	cbz	r0, 8006f4c <BSP_SPI1_Init+0x14>
  int32_t ret = BSP_ERROR_NONE;
 8006f48:	2000      	movs	r0, #0
}
 8006f4a:	bd10      	pop	{r4, pc}
    SPI1_MspInit(&hbusspi1);
 8006f4c:	4c07      	ldr	r4, [pc, #28]	; (8006f6c <BSP_SPI1_Init+0x34>)
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff ff7a 	bl	8006e48 <SPI1_MspInit>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff ffcd 	bl	8006ef4 <MX_SPI1_Init>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d0f5      	beq.n	8006f4a <BSP_SPI1_Init+0x12>
      ret = BSP_ERROR_BUS_FAILURE;
 8006f5e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006f62:	e7f2      	b.n	8006f4a <BSP_SPI1_Init+0x12>
 8006f64:	200025dc 	.word	0x200025dc
 8006f68:	40013000 	.word	0x40013000
 8006f6c:	20002640 	.word	0x20002640

08006f70 <MX_SPI2_Init>:
{
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4604      	mov	r4, r0
  hspi->Instance = SPI2;
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <MX_SPI2_Init+0x6c>)
 8006f76:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006f78:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006f7c:	6043      	str	r3, [r0, #4]
  hspi->Init.Direction = SPI_DIRECTION_1LINE;
 8006f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f82:	6083      	str	r3, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006f84:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8006f88:	60c3      	str	r3, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	6103      	str	r3, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	6143      	str	r3, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f96:	6183      	str	r3, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006f98:	2330      	movs	r3, #48	; 0x30
 8006f9a:	61c3      	str	r3, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	6203      	str	r3, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006fa0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fa2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8006fa4:	2207      	movs	r2, #7
 8006fa6:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006fa8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006faa:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006fac:	f002 f92c 	bl	8009208 <HAL_SPI_Init>
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	b100      	cbz	r0, 8006fb6 <MX_SPI2_Init+0x46>
    ret = HAL_ERROR;
 8006fb4:	2501      	movs	r5, #1
  HAL_Delay(5);
 8006fb6:	2005      	movs	r0, #5
 8006fb8:	f7ff f806 	bl	8005fc8 <HAL_Delay>
  SPI_1LINE_TX(hspi);
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	6813      	ldr	r3, [r2, #0]
 8006fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(5);
 8006fc6:	2005      	movs	r0, #5
 8006fc8:	f7fe fffe 	bl	8005fc8 <HAL_Delay>
  __HAL_SPI_ENABLE(hspi);
 8006fcc:	6822      	ldr	r2, [r4, #0]
 8006fce:	6813      	ldr	r3, [r2, #0]
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd4:	6013      	str	r3, [r2, #0]
}
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	bd38      	pop	{r3, r4, r5, pc}
 8006fda:	bf00      	nop
 8006fdc:	40003800 	.word	0x40003800

08006fe0 <BSP_SPI2_Init>:
int32_t BSP_SPI2_Init(void) {
 8006fe0:	b510      	push	{r4, lr}
  hbusspi2.Instance  = SPI2;
 8006fe2:	480a      	ldr	r0, [pc, #40]	; (800700c <BSP_SPI2_Init+0x2c>)
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <BSP_SPI2_Init+0x30>)
 8006fe6:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_GetState(&hbusspi2) == HAL_SPI_STATE_RESET)
 8006fe8:	f002 fcbb 	bl	8009962 <HAL_SPI_GetState>
 8006fec:	b108      	cbz	r0, 8006ff2 <BSP_SPI2_Init+0x12>
  int32_t ret = BSP_ERROR_NONE;
 8006fee:	2000      	movs	r0, #0
}
 8006ff0:	bd10      	pop	{r4, pc}
    SPI2_MspInit(&hbusspi2);
 8006ff2:	4c06      	ldr	r4, [pc, #24]	; (800700c <BSP_SPI2_Init+0x2c>)
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7ff fefd 	bl	8006df4 <SPI2_MspInit>
    if (MX_SPI2_Init(&hbusspi2) != HAL_OK)
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f7ff ffb8 	bl	8006f70 <MX_SPI2_Init>
 8007000:	2800      	cmp	r0, #0
 8007002:	d0f5      	beq.n	8006ff0 <BSP_SPI2_Init+0x10>
      ret = BSP_ERROR_BUS_FAILURE;
 8007004:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8007008:	e7f2      	b.n	8006ff0 <BSP_SPI2_Init+0x10>
 800700a:	bf00      	nop
 800700c:	200025dc 	.word	0x200025dc
 8007010:	40003800 	.word	0x40003800

08007014 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007014:	490f      	ldr	r1, [pc, #60]	; (8007054 <SystemInit+0x40>)
 8007016:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800701a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800701e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007022:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <SystemInit+0x44>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800702c:	2000      	movs	r0, #0
 800702e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8007036:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800703a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800703c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007040:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007048:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800704a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <SystemInit+0x48>)
 800704e:	608b      	str	r3, [r1, #8]
#endif
}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	e000ed00 	.word	0xe000ed00
 8007058:	40021000 	.word	0x40021000
 800705c:	08004000 	.word	0x08004000

08007060 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007060:	4770      	bx	lr
	...

08007064 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <HAL_InitTick+0x44>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	b90b      	cbnz	r3, 800706e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800706a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800706c:	4770      	bx	lr
{
 800706e:	b510      	push	{r4, lr}
 8007070:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007076:	fbb0 f3f3 	udiv	r3, r0, r3
 800707a:	4a0c      	ldr	r2, [pc, #48]	; (80070ac <HAL_InitTick+0x48>)
 800707c:	6810      	ldr	r0, [r2, #0]
 800707e:	fbb0 f0f3 	udiv	r0, r0, r3
 8007082:	f000 f88f 	bl	80071a4 <HAL_SYSTICK_Config>
 8007086:	b968      	cbnz	r0, 80070a4 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007088:	2c0f      	cmp	r4, #15
 800708a:	d901      	bls.n	8007090 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 800708c:	2001      	movs	r0, #1
 800708e:	e00a      	b.n	80070a6 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007090:	2200      	movs	r2, #0
 8007092:	4621      	mov	r1, r4
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	f000 f83e 	bl	8007118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <HAL_InitTick+0x44>)
 800709e:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80070a0:	2000      	movs	r0, #0
 80070a2:	e000      	b.n	80070a6 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 80070a4:	2001      	movs	r0, #1
}
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	20000088 	.word	0x20000088
 80070ac:	20000084 	.word	0x20000084

080070b0 <HAL_Init>:
{
 80070b0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070b2:	2003      	movs	r0, #3
 80070b4:	f000 f81e 	bl	80070f4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80070b8:	200f      	movs	r0, #15
 80070ba:	f7ff ffd3 	bl	8007064 <HAL_InitTick>
 80070be:	b110      	cbz	r0, 80070c6 <HAL_Init+0x16>
    status = HAL_ERROR;
 80070c0:	2401      	movs	r4, #1
}
 80070c2:	4620      	mov	r0, r4
 80070c4:	bd10      	pop	{r4, pc}
 80070c6:	4604      	mov	r4, r0
    HAL_MspInit();
 80070c8:	f7ff ffca 	bl	8007060 <HAL_MspInit>
 80070cc:	e7f9      	b.n	80070c2 <HAL_Init+0x12>
	...

080070d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_IncTick+0x10>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	4a03      	ldr	r2, [pc, #12]	; (80070e4 <HAL_IncTick+0x14>)
 80070d6:	6811      	ldr	r1, [r2, #0]
 80070d8:	440b      	add	r3, r1
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000088 	.word	0x20000088
 80070e4:	200026a4 	.word	0x200026a4

080070e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <HAL_GetTick+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	200026a4 	.word	0x200026a4

080070f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070f4:	4a07      	ldr	r2, [pc, #28]	; (8007114 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80070f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007100:	0200      	lsls	r0, r0, #8
 8007102:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007106:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8007108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800710c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007110:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007112:	4770      	bx	lr
 8007114:	e000ed00 	.word	0xe000ed00

08007118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007118:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800711a:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_NVIC_SetPriority+0x68>)
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007122:	f1c3 0c07 	rsb	ip, r3, #7
 8007126:	f1bc 0f04 	cmp.w	ip, #4
 800712a:	bf28      	it	cs
 800712c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007130:	f103 0e04 	add.w	lr, r3, #4
 8007134:	f1be 0f06 	cmp.w	lr, #6
 8007138:	d918      	bls.n	800716c <HAL_NVIC_SetPriority+0x54>
 800713a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800713c:	f04f 3eff 	mov.w	lr, #4294967295
 8007140:	fa0e fc0c 	lsl.w	ip, lr, ip
 8007144:	ea21 010c 	bic.w	r1, r1, ip
 8007148:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800714a:	fa0e f303 	lsl.w	r3, lr, r3
 800714e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007152:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007154:	2800      	cmp	r0, #0
 8007156:	db0b      	blt.n	8007170 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007158:	0109      	lsls	r1, r1, #4
 800715a:	b2c9      	uxtb	r1, r1
 800715c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8007160:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8007164:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007168:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800716c:	2300      	movs	r3, #0
 800716e:	e7e5      	b.n	800713c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007170:	f000 000f 	and.w	r0, r0, #15
 8007174:	0109      	lsls	r1, r1, #4
 8007176:	b2c9      	uxtb	r1, r1
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <HAL_NVIC_SetPriority+0x6c>)
 800717a:	5419      	strb	r1, [r3, r0]
 800717c:	e7f4      	b.n	8007168 <HAL_NVIC_SetPriority+0x50>
 800717e:	bf00      	nop
 8007180:	e000ed00 	.word	0xe000ed00
 8007184:	e000ed14 	.word	0xe000ed14

08007188 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007188:	2800      	cmp	r0, #0
 800718a:	db07      	blt.n	800719c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800718c:	f000 021f 	and.w	r2, r0, #31
 8007190:	0940      	lsrs	r0, r0, #5
 8007192:	2301      	movs	r3, #1
 8007194:	4093      	lsls	r3, r2
 8007196:	4a02      	ldr	r2, [pc, #8]	; (80071a0 <HAL_NVIC_EnableIRQ+0x18>)
 8007198:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	e000e100 	.word	0xe000e100

080071a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071a4:	3801      	subs	r0, #1
 80071a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80071aa:	d20b      	bcs.n	80071c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071b0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071b2:	4a05      	ldr	r2, [pc, #20]	; (80071c8 <HAL_SYSTICK_Config+0x24>)
 80071b4:	21f0      	movs	r1, #240	; 0xf0
 80071b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071ba:	2000      	movs	r0, #0
 80071bc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071be:	2207      	movs	r2, #7
 80071c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80071c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80071c6:	4770      	bx	lr
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ce:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80071d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071d2:	e040      	b.n	8007256 <HAL_GPIO_Init+0x8a>

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80071d4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80071d6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80071da:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 80071de:	409c      	lsls	r4, r3
 80071e0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->ASCR = temp;
 80071e4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80071e6:	e062      	b.n	80072ae <HAL_GPIO_Init+0xe2>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071e8:	2406      	movs	r4, #6
 80071ea:	e000      	b.n	80071ee <HAL_GPIO_Init+0x22>
 80071ec:	2400      	movs	r4, #0
 80071ee:	40b4      	lsls	r4, r6
 80071f0:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071f2:	3502      	adds	r5, #2
 80071f4:	4e68      	ldr	r6, [pc, #416]	; (8007398 <HAL_GPIO_Init+0x1cc>)
 80071f6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80071fa:	4c68      	ldr	r4, [pc, #416]	; (800739c <HAL_GPIO_Init+0x1d0>)
 80071fc:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80071fe:	43d4      	mvns	r4, r2
 8007200:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007204:	684f      	ldr	r7, [r1, #4]
 8007206:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800720a:	d001      	beq.n	8007210 <HAL_GPIO_Init+0x44>
        {
          temp |= iocurrent;
 800720c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8007210:	4d62      	ldr	r5, [pc, #392]	; (800739c <HAL_GPIO_Init+0x1d0>)
 8007212:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8007214:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8007216:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800721a:	684f      	ldr	r7, [r1, #4]
 800721c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8007220:	d001      	beq.n	8007226 <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8007222:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8007226:	4d5d      	ldr	r5, [pc, #372]	; (800739c <HAL_GPIO_Init+0x1d0>)
 8007228:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800722a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800722c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007230:	684f      	ldr	r7, [r1, #4]
 8007232:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8007236:	d001      	beq.n	800723c <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8007238:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800723c:	4d57      	ldr	r5, [pc, #348]	; (800739c <HAL_GPIO_Init+0x1d0>)
 800723e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8007240:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8007242:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007244:	684e      	ldr	r6, [r1, #4]
 8007246:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800724a:	d001      	beq.n	8007250 <HAL_GPIO_Init+0x84>
        {
          temp |= iocurrent;
 800724c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8007250:	4a52      	ldr	r2, [pc, #328]	; (800739c <HAL_GPIO_Init+0x1d0>)
 8007252:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8007254:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007256:	680a      	ldr	r2, [r1, #0]
 8007258:	fa32 f403 	lsrs.w	r4, r2, r3
 800725c:	f000 8099 	beq.w	8007392 <HAL_GPIO_Init+0x1c6>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007260:	f04f 0c01 	mov.w	ip, #1
 8007264:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8007268:	ea1c 0202 	ands.w	r2, ip, r2
 800726c:	d0f2      	beq.n	8007254 <HAL_GPIO_Init+0x88>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800726e:	684c      	ldr	r4, [r1, #4]
 8007270:	1e65      	subs	r5, r4, #1
 8007272:	2d01      	cmp	r5, #1
 8007274:	d903      	bls.n	800727e <HAL_GPIO_Init+0xb2>
 8007276:	2c11      	cmp	r4, #17
 8007278:	d001      	beq.n	800727e <HAL_GPIO_Init+0xb2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800727a:	2c12      	cmp	r4, #18
 800727c:	d112      	bne.n	80072a4 <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 800727e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007280:	005e      	lsls	r6, r3, #1
 8007282:	2403      	movs	r4, #3
 8007284:	40b4      	lsls	r4, r6
 8007286:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800728a:	68cc      	ldr	r4, [r1, #12]
 800728c:	40b4      	lsls	r4, r6
 800728e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8007290:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8007292:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007294:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007298:	684c      	ldr	r4, [r1, #4]
 800729a:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800729e:	409c      	lsls	r4, r3
 80072a0:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80072a2:	6044      	str	r4, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80072a4:	684c      	ldr	r4, [r1, #4]
 80072a6:	f004 0503 	and.w	r5, r4, #3
 80072aa:	2d03      	cmp	r5, #3
 80072ac:	d092      	beq.n	80071d4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->PUPDR;
 80072ae:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80072b4:	2503      	movs	r5, #3
 80072b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80072ba:	43ec      	mvns	r4, r5
 80072bc:	ea26 0e05 	bic.w	lr, r6, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80072c0:	688d      	ldr	r5, [r1, #8]
 80072c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80072c6:	ea45 050e 	orr.w	r5, r5, lr
      GPIOx->PUPDR = temp;
 80072ca:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072cc:	684d      	ldr	r5, [r1, #4]
 80072ce:	2d02      	cmp	r5, #2
 80072d0:	d001      	beq.n	80072d6 <HAL_GPIO_Init+0x10a>
 80072d2:	2d12      	cmp	r5, #18
 80072d4:	d112      	bne.n	80072fc <HAL_GPIO_Init+0x130>
        temp = GPIOx->AFR[position >> 3u];
 80072d6:	08de      	lsrs	r6, r3, #3
 80072d8:	3608      	adds	r6, #8
 80072da:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072de:	f003 0507 	and.w	r5, r3, #7
 80072e2:	ea4f 0e85 	mov.w	lr, r5, lsl #2
 80072e6:	250f      	movs	r5, #15
 80072e8:	fa05 f50e 	lsl.w	r5, r5, lr
 80072ec:	ea27 0705 	bic.w	r7, r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80072f0:	690d      	ldr	r5, [r1, #16]
 80072f2:	fa05 f50e 	lsl.w	r5, r5, lr
 80072f6:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 80072f8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80072fc:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80072fe:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007300:	684c      	ldr	r4, [r1, #4]
 8007302:	f004 0403 	and.w	r4, r4, #3
 8007306:	fa04 f40c 	lsl.w	r4, r4, ip
 800730a:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 800730c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800730e:	684c      	ldr	r4, [r1, #4]
 8007310:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8007314:	d09e      	beq.n	8007254 <HAL_GPIO_Init+0x88>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007316:	4c22      	ldr	r4, [pc, #136]	; (80073a0 <HAL_GPIO_Init+0x1d4>)
 8007318:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800731a:	f045 0501 	orr.w	r5, r5, #1
 800731e:	6625      	str	r5, [r4, #96]	; 0x60
 8007320:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8007322:	f004 0401 	and.w	r4, r4, #1
 8007326:	9401      	str	r4, [sp, #4]
 8007328:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800732a:	089d      	lsrs	r5, r3, #2
 800732c:	1cae      	adds	r6, r5, #2
 800732e:	4c1a      	ldr	r4, [pc, #104]	; (8007398 <HAL_GPIO_Init+0x1cc>)
 8007330:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007334:	f003 0403 	and.w	r4, r3, #3
 8007338:	00a6      	lsls	r6, r4, #2
 800733a:	240f      	movs	r4, #15
 800733c:	40b4      	lsls	r4, r6
 800733e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007342:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007346:	f43f af51 	beq.w	80071ec <HAL_GPIO_Init+0x20>
 800734a:	4c16      	ldr	r4, [pc, #88]	; (80073a4 <HAL_GPIO_Init+0x1d8>)
 800734c:	42a0      	cmp	r0, r4
 800734e:	d016      	beq.n	800737e <HAL_GPIO_Init+0x1b2>
 8007350:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007354:	42a0      	cmp	r0, r4
 8007356:	d014      	beq.n	8007382 <HAL_GPIO_Init+0x1b6>
 8007358:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800735c:	42a0      	cmp	r0, r4
 800735e:	d012      	beq.n	8007386 <HAL_GPIO_Init+0x1ba>
 8007360:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007364:	42a0      	cmp	r0, r4
 8007366:	d010      	beq.n	800738a <HAL_GPIO_Init+0x1be>
 8007368:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800736c:	42a0      	cmp	r0, r4
 800736e:	d00e      	beq.n	800738e <HAL_GPIO_Init+0x1c2>
 8007370:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007374:	42a0      	cmp	r0, r4
 8007376:	f43f af37 	beq.w	80071e8 <HAL_GPIO_Init+0x1c>
 800737a:	2407      	movs	r4, #7
 800737c:	e737      	b.n	80071ee <HAL_GPIO_Init+0x22>
 800737e:	2401      	movs	r4, #1
 8007380:	e735      	b.n	80071ee <HAL_GPIO_Init+0x22>
 8007382:	2402      	movs	r4, #2
 8007384:	e733      	b.n	80071ee <HAL_GPIO_Init+0x22>
 8007386:	2403      	movs	r4, #3
 8007388:	e731      	b.n	80071ee <HAL_GPIO_Init+0x22>
 800738a:	2404      	movs	r4, #4
 800738c:	e72f      	b.n	80071ee <HAL_GPIO_Init+0x22>
 800738e:	2405      	movs	r4, #5
 8007390:	e72d      	b.n	80071ee <HAL_GPIO_Init+0x22>
  }
}
 8007392:	b003      	add	sp, #12
 8007394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007396:	bf00      	nop
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400
 80073a0:	40021000 	.word	0x40021000
 80073a4:	48000400 	.word	0x48000400

080073a8 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80073a8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80073aa:	fa31 f203 	lsrs.w	r2, r1, r3
 80073ae:	f000 808b 	beq.w	80074c8 <HAL_GPIO_DeInit+0x120>
{
 80073b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073b4:	e032      	b.n	800741c <HAL_GPIO_DeInit+0x74>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073b6:	2506      	movs	r5, #6
 80073b8:	e000      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 80073ba:	2500      	movs	r5, #0
 80073bc:	fa05 fc0c 	lsl.w	ip, r5, ip
 80073c0:	45a4      	cmp	ip, r4
 80073c2:	d065      	beq.n	8007490 <HAL_GPIO_DeInit+0xe8>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80073c4:	6804      	ldr	r4, [r0, #0]
 80073c6:	005d      	lsls	r5, r3, #1
 80073c8:	f04f 0c03 	mov.w	ip, #3
 80073cc:	fa0c fc05 	lsl.w	ip, ip, r5
 80073d0:	ea44 040c 	orr.w	r4, r4, ip
 80073d4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80073d6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80073da:	f10e 0e08 	add.w	lr, lr, #8
 80073de:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80073e2:	f003 0507 	and.w	r5, r3, #7
 80073e6:	00ae      	lsls	r6, r5, #2
 80073e8:	250f      	movs	r5, #15
 80073ea:	40b5      	lsls	r5, r6
 80073ec:	ea24 0405 	bic.w	r4, r4, r5
 80073f0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80073f4:	6884      	ldr	r4, [r0, #8]
 80073f6:	ea24 040c 	bic.w	r4, r4, ip
 80073fa:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80073fc:	6844      	ldr	r4, [r0, #4]
 80073fe:	ea24 0402 	bic.w	r4, r4, r2
 8007402:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007404:	68c4      	ldr	r4, [r0, #12]
 8007406:	ea24 040c 	bic.w	r4, r4, ip
 800740a:	60c4      	str	r4, [r0, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800740c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800740e:	ea24 0202 	bic.w	r2, r4, r2
 8007412:	62c2      	str	r2, [r0, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007414:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8007416:	fa31 f203 	lsrs.w	r2, r1, r3
 800741a:	d054      	beq.n	80074c6 <HAL_GPIO_DeInit+0x11e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800741c:	2201      	movs	r2, #1
 800741e:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8007420:	ea12 0701 	ands.w	r7, r2, r1
 8007424:	d0f6      	beq.n	8007414 <HAL_GPIO_DeInit+0x6c>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8007426:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 800742a:	f10e 0502 	add.w	r5, lr, #2
 800742e:	4c27      	ldr	r4, [pc, #156]	; (80074cc <HAL_GPIO_DeInit+0x124>)
 8007430:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007434:	f003 0c03 	and.w	ip, r3, #3
 8007438:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800743c:	250f      	movs	r5, #15
 800743e:	fa05 f60c 	lsl.w	r6, r5, ip
 8007442:	4034      	ands	r4, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007444:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8007448:	d0b7      	beq.n	80073ba <HAL_GPIO_DeInit+0x12>
 800744a:	4d21      	ldr	r5, [pc, #132]	; (80074d0 <HAL_GPIO_DeInit+0x128>)
 800744c:	42a8      	cmp	r0, r5
 800744e:	d015      	beq.n	800747c <HAL_GPIO_DeInit+0xd4>
 8007450:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007454:	42a8      	cmp	r0, r5
 8007456:	d013      	beq.n	8007480 <HAL_GPIO_DeInit+0xd8>
 8007458:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800745c:	42a8      	cmp	r0, r5
 800745e:	d011      	beq.n	8007484 <HAL_GPIO_DeInit+0xdc>
 8007460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007464:	42a8      	cmp	r0, r5
 8007466:	d00f      	beq.n	8007488 <HAL_GPIO_DeInit+0xe0>
 8007468:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800746c:	42a8      	cmp	r0, r5
 800746e:	d00d      	beq.n	800748c <HAL_GPIO_DeInit+0xe4>
 8007470:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007474:	42a8      	cmp	r0, r5
 8007476:	d09e      	beq.n	80073b6 <HAL_GPIO_DeInit+0xe>
 8007478:	2507      	movs	r5, #7
 800747a:	e79f      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 800747c:	2501      	movs	r5, #1
 800747e:	e79d      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 8007480:	2502      	movs	r5, #2
 8007482:	e79b      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 8007484:	2503      	movs	r5, #3
 8007486:	e799      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 8007488:	2504      	movs	r5, #4
 800748a:	e797      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
 800748c:	2505      	movs	r5, #5
 800748e:	e795      	b.n	80073bc <HAL_GPIO_DeInit+0x14>
        EXTI->IMR1 &= ~(iocurrent);
 8007490:	4c10      	ldr	r4, [pc, #64]	; (80074d4 <HAL_GPIO_DeInit+0x12c>)
 8007492:	6825      	ldr	r5, [r4, #0]
 8007494:	ea25 0507 	bic.w	r5, r5, r7
 8007498:	6025      	str	r5, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800749a:	6865      	ldr	r5, [r4, #4]
 800749c:	ea25 0507 	bic.w	r5, r5, r7
 80074a0:	6065      	str	r5, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80074a2:	68a5      	ldr	r5, [r4, #8]
 80074a4:	ea25 0507 	bic.w	r5, r5, r7
 80074a8:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80074aa:	68e5      	ldr	r5, [r4, #12]
 80074ac:	ea25 0707 	bic.w	r7, r5, r7
 80074b0:	60e7      	str	r7, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80074b2:	4f06      	ldr	r7, [pc, #24]	; (80074cc <HAL_GPIO_DeInit+0x124>)
 80074b4:	f10e 0402 	add.w	r4, lr, #2
 80074b8:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80074bc:	ea25 0506 	bic.w	r5, r5, r6
 80074c0:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 80074c4:	e77e      	b.n	80073c4 <HAL_GPIO_DeInit+0x1c>
  }
}
 80074c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	48000400 	.word	0x48000400
 80074d4:	40010400 	.word	0x40010400

080074d8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80074d8:	6903      	ldr	r3, [r0, #16]
 80074da:	4219      	tst	r1, r3
 80074dc:	d001      	beq.n	80074e2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80074de:	2001      	movs	r0, #1
 80074e0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074e2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80074e4:	4770      	bx	lr

080074e6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074e6:	b10a      	cbz	r2, 80074ec <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074e8:	6181      	str	r1, [r0, #24]
 80074ea:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074ec:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80074ee:	4770      	bx	lr

080074f0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80074f0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074f2:	ea01 0203 	and.w	r2, r1, r3
 80074f6:	ea21 0103 	bic.w	r1, r1, r3
 80074fa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074fe:	6181      	str	r1, [r0, #24]
}
 8007500:	4770      	bx	lr
	...

08007504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007504:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007506:	4b05      	ldr	r3, [pc, #20]	; (800751c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007508:	695b      	ldr	r3, [r3, #20]
 800750a:	4203      	tst	r3, r0
 800750c:	d100      	bne.n	8007510 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800750e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007510:	4b02      	ldr	r3, [pc, #8]	; (800751c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8007512:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007514:	f7ff f8fe 	bl	8006714 <HAL_GPIO_EXTI_Callback>
}
 8007518:	e7f9      	b.n	800750e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800751a:	bf00      	nop
 800751c:	40010400 	.word	0x40010400

08007520 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007524:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8007526:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800752a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800752e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007532:	429a      	cmp	r2, r3
 8007534:	d854      	bhi.n	80075e0 <PCD_WriteEmptyTxFifo+0xc0>
 8007536:	4680      	mov	r8, r0
 8007538:	460c      	mov	r4, r1
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800753a:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800753c:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8007540:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007544:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007546:	429a      	cmp	r2, r3
 8007548:	d300      	bcc.n	800754c <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 800754a:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800754c:	f102 0903 	add.w	r9, r2, #3
 8007550:	ea4f 0999 	mov.w	r9, r9, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007554:	e013      	b.n	800757e <PCD_WriteEmptyTxFifo+0x5e>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8007556:	f106 0903 	add.w	r9, r6, #3
 800755a:	ea4f 0999 	mov.w	r9, r9, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800755e:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8007562:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007566:	b2b3      	uxth	r3, r6
 8007568:	b2e2      	uxtb	r2, r4
 800756a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800756c:	4638      	mov	r0, r7
 800756e:	f003 f9f8 	bl	800a962 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007572:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007574:	4433      	add	r3, r6
 8007576:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8007578:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800757a:	4433      	add	r3, r6
 800757c:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800757e:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 8007582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	b29b      	uxth	r3, r3
 800758a:	454b      	cmp	r3, r9
 800758c:	d312      	bcc.n	80075b4 <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800758e:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8007592:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8007596:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007598:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800759a:	4299      	cmp	r1, r3
 800759c:	d20a      	bcs.n	80075b4 <PCD_WriteEmptyTxFifo+0x94>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800759e:	b14b      	cbz	r3, 80075b4 <PCD_WriteEmptyTxFifo+0x94>
    len = ep->xfer_len - ep->xfer_count;
 80075a0:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80075a2:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80075a6:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80075aa:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80075ac:	429e      	cmp	r6, r3
 80075ae:	d3d2      	bcc.n	8007556 <PCD_WriteEmptyTxFifo+0x36>
    len = ep->xfer_len - ep->xfer_count;
 80075b0:	461e      	mov	r6, r3
 80075b2:	e7d0      	b.n	8007556 <PCD_WriteEmptyTxFifo+0x36>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075b4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80075b8:	eb08 0880 	add.w	r8, r8, r0, lsl #2
 80075bc:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
 80075c0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d80e      	bhi.n	80075e6 <PCD_WriteEmptyTxFifo+0xc6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075c8:	f004 040f 	and.w	r4, r4, #15
 80075cc:	2301      	movs	r3, #1
 80075ce:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075d0:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 80075d4:	ea24 0403 	bic.w	r4, r4, r3
 80075d8:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 80075dc:	2000      	movs	r0, #0
 80075de:	e000      	b.n	80075e2 <PCD_WriteEmptyTxFifo+0xc2>
    return HAL_ERROR;
 80075e0:	2001      	movs	r0, #1
}
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 80075e6:	2000      	movs	r0, #0
 80075e8:	e7fb      	b.n	80075e2 <PCD_WriteEmptyTxFifo+0xc2>

080075ea <HAL_PCD_Init>:
{
 80075ea:	b570      	push	{r4, r5, r6, lr}
 80075ec:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f000 8097 	beq.w	8007722 <HAL_PCD_Init+0x138>
 80075f4:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80075f6:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80075f8:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80075fc:	b33b      	cbz	r3, 800764e <HAL_PCD_Init+0x64>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80075fe:	2303      	movs	r3, #3
 8007600:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007604:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800760a:	d101      	bne.n	8007610 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8007610:	6828      	ldr	r0, [r5, #0]
 8007612:	f002 ff65 	bl	800a4e0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007616:	462c      	mov	r4, r5
 8007618:	f854 6b10 	ldr.w	r6, [r4], #16
 800761c:	46ec      	mov	ip, sp
 800761e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007626:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800762a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800762e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007632:	1d2b      	adds	r3, r5, #4
 8007634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007636:	4630      	mov	r0, r6
 8007638:	f002 febe 	bl	800a3b8 <USB_CoreInit>
 800763c:	4604      	mov	r4, r0
 800763e:	b158      	cbz	r0, 8007658 <HAL_PCD_Init+0x6e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007640:	2302      	movs	r3, #2
 8007642:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8007646:	2401      	movs	r4, #1
}
 8007648:	4620      	mov	r0, r4
 800764a:	b00a      	add	sp, #40	; 0x28
 800764c:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800764e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8007652:	f7ff f86d 	bl	8006730 <HAL_PCD_MspInit>
 8007656:	e7d2      	b.n	80075fe <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007658:	2100      	movs	r1, #0
 800765a:	6828      	ldr	r0, [r5, #0]
 800765c:	f002 ff46 	bl	800a4ec <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007660:	4623      	mov	r3, r4
 8007662:	e016      	b.n	8007692 <HAL_PCD_Init+0xa8>
    hpcd->IN_ep[i].is_in = 1U;
 8007664:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007668:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800766c:	2101      	movs	r1, #1
 800766e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8007672:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007676:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800767a:	2100      	movs	r1, #0
 800767c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8007680:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007682:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8007684:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007688:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800768c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800768e:	3301      	adds	r3, #1
 8007690:	b2db      	uxtb	r3, r3
 8007692:	6869      	ldr	r1, [r5, #4]
 8007694:	428b      	cmp	r3, r1
 8007696:	d3e5      	bcc.n	8007664 <HAL_PCD_Init+0x7a>
 8007698:	e016      	b.n	80076c8 <HAL_PCD_Init+0xde>
    hpcd->OUT_ep[i].is_in = 0U;
 800769a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800769e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80076a8:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076ac:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80076b8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80076bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80076c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076c4:	3401      	adds	r4, #1
 80076c6:	b2e4      	uxtb	r4, r4
 80076c8:	42a1      	cmp	r1, r4
 80076ca:	d8e6      	bhi.n	800769a <HAL_PCD_Init+0xb0>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076cc:	462c      	mov	r4, r5
 80076ce:	f854 6b10 	ldr.w	r6, [r4], #16
 80076d2:	46ec      	mov	ip, sp
 80076d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80076da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80076e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80076e8:	1d2b      	adds	r3, r5, #4
 80076ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076ec:	4630      	mov	r0, r6
 80076ee:	f002 ff43 	bl	800a578 <USB_DevInit>
 80076f2:	4604      	mov	r4, r0
 80076f4:	b960      	cbnz	r0, 8007710 <HAL_PCD_Init+0x126>
  hpcd->USB_Address = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8007702:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007704:	2b01      	cmp	r3, #1
 8007706:	d008      	beq.n	800771a <HAL_PCD_Init+0x130>
  (void)USB_DevDisconnect(hpcd->Instance);
 8007708:	6828      	ldr	r0, [r5, #0]
 800770a:	f003 fa9d 	bl	800ac48 <USB_DevDisconnect>
  return HAL_OK;
 800770e:	e79b      	b.n	8007648 <HAL_PCD_Init+0x5e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007710:	2302      	movs	r3, #2
 8007712:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8007716:	2401      	movs	r4, #1
 8007718:	e796      	b.n	8007648 <HAL_PCD_Init+0x5e>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800771a:	4628      	mov	r0, r5
 800771c:	f000 fc27 	bl	8007f6e <HAL_PCDEx_ActivateLPM>
 8007720:	e7f2      	b.n	8007708 <HAL_PCD_Init+0x11e>
    return HAL_ERROR;
 8007722:	2401      	movs	r4, #1
 8007724:	e790      	b.n	8007648 <HAL_PCD_Init+0x5e>

08007726 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007726:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8007728:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800772c:	2b01      	cmp	r3, #1
 800772e:	d016      	beq.n	800775e <HAL_PCD_Start+0x38>
{
 8007730:	b510      	push	{r4, lr}
 8007732:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007734:	2301      	movs	r3, #1
 8007736:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if (hpcd->Init.battery_charging_enable == 1U)
 800773a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800773c:	2b01      	cmp	r3, #1
 800773e:	d009      	beq.n	8007754 <HAL_PCD_Start+0x2e>
  __HAL_PCD_ENABLE(hpcd);
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	f002 fec7 	bl	800a4d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007746:	6820      	ldr	r0, [r4, #0]
 8007748:	f003 fa70 	bl	800ac2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800774c:	2000      	movs	r0, #0
 800774e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007752:	bd10      	pop	{r4, pc}
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007754:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800775a:	6393      	str	r3, [r2, #56]	; 0x38
 800775c:	e7f0      	b.n	8007740 <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 800775e:	2002      	movs	r0, #2
}
 8007760:	4770      	bx	lr
	...

08007764 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007764:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007766:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007768:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800776a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007772:	689d      	ldr	r5, [r3, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007774:	4a0b      	ldr	r2, [pc, #44]	; (80077a4 <PCD_EP_OutXfrComplete_int+0x40>)
 8007776:	4294      	cmp	r4, r2
 8007778:	d10f      	bne.n	800779a <PCD_EP_OutXfrComplete_int+0x36>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800777a:	f415 4f00 	tst.w	r5, #32768	; 0x8000
 800777e:	d003      	beq.n	8007788 <PCD_EP_OutXfrComplete_int+0x24>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007784:	609a      	str	r2, [r3, #8]
 8007786:	e00b      	b.n	80077a0 <PCD_EP_OutXfrComplete_int+0x3c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007788:	f015 0f20 	tst.w	r5, #32
 800778c:	d001      	beq.n	8007792 <PCD_EP_OutXfrComplete_int+0x2e>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800778e:	2220      	movs	r2, #32
 8007790:	609a      	str	r2, [r3, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007792:	b2c9      	uxtb	r1, r1
 8007794:	f7ff f97e 	bl	8006a94 <HAL_PCD_DataOutStageCallback>
 8007798:	e002      	b.n	80077a0 <PCD_EP_OutXfrComplete_int+0x3c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800779a:	b2c9      	uxtb	r1, r1
 800779c:	f7ff f97a 	bl	8006a94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
}
 80077a0:	2000      	movs	r0, #0
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	4f54310a 	.word	0x4f54310a

080077a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077a8:	b510      	push	{r4, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077aa:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077ac:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077b2:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077b6:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <PCD_EP_OutSetupPacket_int+0x2c>)
 80077b8:	4294      	cmp	r4, r2
 80077ba:	d907      	bls.n	80077cc <PCD_EP_OutSetupPacket_int+0x24>
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80077c4:	d002      	beq.n	80077cc <PCD_EP_OutSetupPacket_int+0x24>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077ca:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80077cc:	f7ff f95a 	bl	8006a84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
}
 80077d0:	2000      	movs	r0, #0
 80077d2:	bd10      	pop	{r4, pc}
 80077d4:	4f54300a 	.word	0x4f54300a

080077d8 <HAL_PCD_IRQHandler>:
{
 80077d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077de:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80077e0:	4628      	mov	r0, r5
 80077e2:	f003 fa70 	bl	800acc6 <USB_GetMode>
 80077e6:	b108      	cbz	r0, 80077ec <HAL_PCD_IRQHandler+0x14>
}
 80077e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ec:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	f003 fa38 	bl	800ac64 <USB_ReadInterrupts>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d0f7      	beq.n	80077e8 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	f003 fa33 	bl	800ac64 <USB_ReadInterrupts>
 80077fe:	f010 0f02 	tst.w	r0, #2
 8007802:	d004      	beq.n	800780e <HAL_PCD_IRQHandler+0x36>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	6953      	ldr	r3, [r2, #20]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	f003 fa28 	bl	800ac64 <USB_ReadInterrupts>
 8007814:	f010 0f10 	tst.w	r0, #16
 8007818:	d014      	beq.n	8007844 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	6993      	ldr	r3, [r2, #24]
 800781e:	f023 0310 	bic.w	r3, r3, #16
 8007822:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8007824:	6a2f      	ldr	r7, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007826:	f007 080f 	and.w	r8, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800782a:	f3c7 4343 	ubfx	r3, r7, #17, #4
 800782e:	2b02      	cmp	r3, #2
 8007830:	f000 8085 	beq.w	800793e <HAL_PCD_IRQHandler+0x166>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007834:	2b06      	cmp	r3, #6
 8007836:	f000 80a1 	beq.w	800797c <HAL_PCD_IRQHandler+0x1a4>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800783a:	6822      	ldr	r2, [r4, #0]
 800783c:	6993      	ldr	r3, [r2, #24]
 800783e:	f043 0310 	orr.w	r3, r3, #16
 8007842:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	f003 fa0d 	bl	800ac64 <USB_ReadInterrupts>
 800784a:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800784e:	f040 80a7 	bne.w	80079a0 <HAL_PCD_IRQHandler+0x1c8>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007852:	6820      	ldr	r0, [r4, #0]
 8007854:	f003 fa06 	bl	800ac64 <USB_ReadInterrupts>
 8007858:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800785c:	f040 80e9 	bne.w	8007a32 <HAL_PCD_IRQHandler+0x25a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	f003 f9ff 	bl	800ac64 <USB_ReadInterrupts>
 8007866:	2800      	cmp	r0, #0
 8007868:	f2c0 8139 	blt.w	8007ade <HAL_PCD_IRQHandler+0x306>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	f003 f9f9 	bl	800ac64 <USB_ReadInterrupts>
 8007872:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8007876:	d00a      	beq.n	800788e <HAL_PCD_IRQHandler+0xb6>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007878:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800787c:	f013 0f01 	tst.w	r3, #1
 8007880:	f040 8147 	bne.w	8007b12 <HAL_PCD_IRQHandler+0x33a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007884:	6822      	ldr	r2, [r4, #0]
 8007886:	6953      	ldr	r3, [r2, #20]
 8007888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788c:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	f003 f9e8 	bl	800ac64 <USB_ReadInterrupts>
 8007894:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007898:	d015      	beq.n	80078c6 <HAL_PCD_IRQHandler+0xee>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800789a:	6822      	ldr	r2, [r4, #0]
 800789c:	6953      	ldr	r3, [r2, #20]
 800789e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078a2:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 80078a4:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f040 8136 	bne.w	8007b1a <HAL_PCD_IRQHandler+0x342>
        hpcd->LPM_State = LPM_L1;
 80078ae:	2101      	movs	r1, #1
 80078b0:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80078bc:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 fb67 	bl	8007f94 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80078c6:	6820      	ldr	r0, [r4, #0]
 80078c8:	f003 f9cc 	bl	800ac64 <USB_ReadInterrupts>
 80078cc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80078d0:	f040 8127 	bne.w	8007b22 <HAL_PCD_IRQHandler+0x34a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	f003 f9c5 	bl	800ac64 <USB_ReadInterrupts>
 80078da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80078de:	f040 817b 	bne.w	8007bd8 <HAL_PCD_IRQHandler+0x400>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	f003 f9be 	bl	800ac64 <USB_ReadInterrupts>
 80078e8:	f010 0f08 	tst.w	r0, #8
 80078ec:	f040 818c 	bne.w	8007c08 <HAL_PCD_IRQHandler+0x430>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	f003 f9b7 	bl	800ac64 <USB_ReadInterrupts>
 80078f6:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80078fa:	f040 818e 	bne.w	8007c1a <HAL_PCD_IRQHandler+0x442>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	f003 f9b0 	bl	800ac64 <USB_ReadInterrupts>
 8007904:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007908:	f040 8191 	bne.w	8007c2e <HAL_PCD_IRQHandler+0x456>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	f003 f9a9 	bl	800ac64 <USB_ReadInterrupts>
 8007912:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007916:	f040 8194 	bne.w	8007c42 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	f003 f9a2 	bl	800ac64 <USB_ReadInterrupts>
 8007920:	f010 0f04 	tst.w	r0, #4
 8007924:	f43f af60 	beq.w	80077e8 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800792c:	f015 0f04 	tst.w	r5, #4
 8007930:	f040 8190 	bne.w	8007c54 <HAL_PCD_IRQHandler+0x47c>
      hpcd->Instance->GOTGINT |= temp;
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	6853      	ldr	r3, [r2, #4]
 8007938:	432b      	orrs	r3, r5
 800793a:	6053      	str	r3, [r2, #4]
 800793c:	e754      	b.n	80077e8 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800793e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007942:	421f      	tst	r7, r3
 8007944:	f43f af79 	beq.w	800783a <HAL_PCD_IRQHandler+0x62>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007948:	ea4f 1b17 	mov.w	fp, r7, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800794c:	ebc8 09c8 	rsb	r9, r8, r8, lsl #3
 8007950:	eb04 0989 	add.w	r9, r4, r9, lsl #2
 8007954:	f3c7 120a 	ubfx	r2, r7, #4, #11
 8007958:	f8d9 1208 	ldr.w	r1, [r9, #520]	; 0x208
 800795c:	4628      	mov	r0, r5
 800795e:	f003 f8eb 	bl	800ab38 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007962:	f3cb 020a 	ubfx	r2, fp, #0, #11
 8007966:	f8d9 3208 	ldr.w	r3, [r9, #520]	; 0x208
 800796a:	4413      	add	r3, r2
 800796c:	f8c9 3208 	str.w	r3, [r9, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007970:	f8d9 3214 	ldr.w	r3, [r9, #532]	; 0x214
 8007974:	441a      	add	r2, r3
 8007976:	f8c9 2214 	str.w	r2, [r9, #532]	; 0x214
 800797a:	e75e      	b.n	800783a <HAL_PCD_IRQHandler+0x62>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800797c:	2208      	movs	r2, #8
 800797e:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007982:	4628      	mov	r0, r5
 8007984:	f003 f8d8 	bl	800ab38 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007988:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800798c:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
 8007990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007994:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8007998:	441f      	add	r7, r3
 800799a:	f8c2 7214 	str.w	r7, [r2, #532]	; 0x214
 800799e:	e74c      	b.n	800783a <HAL_PCD_IRQHandler+0x62>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80079a0:	6820      	ldr	r0, [r4, #0]
 80079a2:	f003 f963 	bl	800ac6c <USB_ReadDevAllOutEpInterrupt>
 80079a6:	4607      	mov	r7, r0
      epnum = 0U;
 80079a8:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 80079aa:	e016      	b.n	80079da <HAL_PCD_IRQHandler+0x202>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80079ac:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80079b0:	2201      	movs	r2, #1
 80079b2:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80079b6:	4641      	mov	r1, r8
 80079b8:	4620      	mov	r0, r4
 80079ba:	f7ff fed3 	bl	8007764 <PCD_EP_OutXfrComplete_int>
 80079be:	e01b      	b.n	80079f8 <HAL_PCD_IRQHandler+0x220>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80079c0:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 80079c4:	2208      	movs	r2, #8
 80079c6:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80079ca:	4641      	mov	r1, r8
 80079cc:	4620      	mov	r0, r4
 80079ce:	f7ff feeb 	bl	80077a8 <PCD_EP_OutSetupPacket_int>
 80079d2:	e014      	b.n	80079fe <HAL_PCD_IRQHandler+0x226>
        epnum++;
 80079d4:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80079d8:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 80079da:	2f00      	cmp	r7, #0
 80079dc:	f43f af39 	beq.w	8007852 <HAL_PCD_IRQHandler+0x7a>
        if ((ep_intr & 0x1U) != 0U)
 80079e0:	f017 0f01 	tst.w	r7, #1
 80079e4:	d0f6      	beq.n	80079d4 <HAL_PCD_IRQHandler+0x1fc>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80079e6:	fa5f f188 	uxtb.w	r1, r8
 80079ea:	6820      	ldr	r0, [r4, #0]
 80079ec:	f003 f94e 	bl	800ac8c <USB_ReadDevOutEPInterrupt>
 80079f0:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80079f2:	f010 0f01 	tst.w	r0, #1
 80079f6:	d1d9      	bne.n	80079ac <HAL_PCD_IRQHandler+0x1d4>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80079f8:	f019 0f08 	tst.w	r9, #8
 80079fc:	d1e0      	bne.n	80079c0 <HAL_PCD_IRQHandler+0x1e8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80079fe:	f019 0f10 	tst.w	r9, #16
 8007a02:	d004      	beq.n	8007a0e <HAL_PCD_IRQHandler+0x236>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007a04:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007a08:	2210      	movs	r2, #16
 8007a0a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007a0e:	f019 0f20 	tst.w	r9, #32
 8007a12:	d004      	beq.n	8007a1e <HAL_PCD_IRQHandler+0x246>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007a14:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007a1e:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 8007a22:	d0d7      	beq.n	80079d4 <HAL_PCD_IRQHandler+0x1fc>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007a24:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a2c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8007a30:	e7d0      	b.n	80079d4 <HAL_PCD_IRQHandler+0x1fc>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007a32:	6820      	ldr	r0, [r4, #0]
 8007a34:	f003 f922 	bl	800ac7c <USB_ReadDevAllInEpInterrupt>
 8007a38:	4607      	mov	r7, r0
      epnum = 0U;
 8007a3a:	46b0      	mov	r8, r6
      while (ep_intr != 0U)
 8007a3c:	e019      	b.n	8007a72 <HAL_PCD_IRQHandler+0x29a>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a3e:	f008 030f 	and.w	r3, r8, #15
 8007a42:	2101      	movs	r1, #1
 8007a44:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a48:	f8d5 3834 	ldr.w	r3, [r5, #2100]	; 0x834
 8007a4c:	ea23 0302 	bic.w	r3, r3, r2
 8007a50:	f8c5 3834 	str.w	r3, [r5, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007a54:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007a58:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff f824 	bl	8006aac <HAL_PCD_DataInStageCallback>
 8007a64:	e015      	b.n	8007a92 <HAL_PCD_IRQHandler+0x2ba>
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007a66:	f019 0f80 	tst.w	r9, #128	; 0x80
 8007a6a:	d133      	bne.n	8007ad4 <HAL_PCD_IRQHandler+0x2fc>
        epnum++;
 8007a6c:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8007a70:	087f      	lsrs	r7, r7, #1
      while (ep_intr != 0U)
 8007a72:	2f00      	cmp	r7, #0
 8007a74:	f43f aef4 	beq.w	8007860 <HAL_PCD_IRQHandler+0x88>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007a78:	f017 0f01 	tst.w	r7, #1
 8007a7c:	d0f6      	beq.n	8007a6c <HAL_PCD_IRQHandler+0x294>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007a7e:	fa5f fa88 	uxtb.w	sl, r8
 8007a82:	4651      	mov	r1, sl
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	f003 f90a 	bl	800ac9e <USB_ReadDevInEPInterrupt>
 8007a8a:	4681      	mov	r9, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007a8c:	f010 0f01 	tst.w	r0, #1
 8007a90:	d1d5      	bne.n	8007a3e <HAL_PCD_IRQHandler+0x266>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007a92:	f019 0f08 	tst.w	r9, #8
 8007a96:	d004      	beq.n	8007aa2 <HAL_PCD_IRQHandler+0x2ca>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007a98:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007aa2:	f019 0f10 	tst.w	r9, #16
 8007aa6:	d004      	beq.n	8007ab2 <HAL_PCD_IRQHandler+0x2da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007aa8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007aac:	2210      	movs	r2, #16
 8007aae:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007ab2:	f019 0f40 	tst.w	r9, #64	; 0x40
 8007ab6:	d004      	beq.n	8007ac2 <HAL_PCD_IRQHandler+0x2ea>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007ab8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007abc:	2240      	movs	r2, #64	; 0x40
 8007abe:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007ac2:	f019 0f02 	tst.w	r9, #2
 8007ac6:	d0ce      	beq.n	8007a66 <HAL_PCD_IRQHandler+0x28e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007ac8:	eb05 1348 	add.w	r3, r5, r8, lsl #5
 8007acc:	2202      	movs	r2, #2
 8007ace:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8007ad2:	e7c8      	b.n	8007a66 <HAL_PCD_IRQHandler+0x28e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff fd22 	bl	8007520 <PCD_WriteEmptyTxFifo>
 8007adc:	e7c6      	b.n	8007a6c <HAL_PCD_IRQHandler+0x294>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ade:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8007aea:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d008      	beq.n	8007b04 <HAL_PCD_IRQHandler+0x32c>
        HAL_PCD_ResumeCallback(hpcd);
 8007af2:	4620      	mov	r0, r4
 8007af4:	f7fe fffd 	bl	8006af2 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	6953      	ldr	r3, [r2, #20]
 8007afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	6153      	str	r3, [r2, #20]
 8007b02:	e6b3      	b.n	800786c <HAL_PCD_IRQHandler+0x94>
        hpcd->LPM_State = LPM_L0;
 8007b04:	2100      	movs	r1, #0
 8007b06:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	f000 fa42 	bl	8007f94 <HAL_PCDEx_LPM_Callback>
 8007b10:	e7f2      	b.n	8007af8 <HAL_PCD_IRQHandler+0x320>
        HAL_PCD_SuspendCallback(hpcd);
 8007b12:	4620      	mov	r0, r4
 8007b14:	f7fe ffe7 	bl	8006ae6 <HAL_PCD_SuspendCallback>
 8007b18:	e6b4      	b.n	8007884 <HAL_PCD_IRQHandler+0xac>
        HAL_PCD_SuspendCallback(hpcd);
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7fe ffe3 	bl	8006ae6 <HAL_PCD_SuspendCallback>
 8007b20:	e6d1      	b.n	80078c6 <HAL_PCD_IRQHandler+0xee>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007b22:	f505 6700 	add.w	r7, r5, #2048	; 0x800
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007b2e:	2110      	movs	r1, #16
 8007b30:	6820      	ldr	r0, [r4, #0]
 8007b32:	f002 fcf3 	bl	800a51c <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b36:	e020      	b.n	8007b7a <HAL_PCD_IRQHandler+0x3a2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007b38:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8007b3c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8007b40:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b44:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007b48:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007b4c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007b50:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8007b54:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007b58:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007b5c:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b60:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007b64:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007b68:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b6c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8007b70:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007b74:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b78:	3601      	adds	r6, #1
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	42b3      	cmp	r3, r6
 8007b7e:	d8db      	bhi.n	8007b38 <HAL_PCD_IRQHandler+0x360>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b86:	61fb      	str	r3, [r7, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b88:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b8a:	b1d3      	cbz	r3, 8007bc2 <HAL_PCD_IRQHandler+0x3ea>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b90:	f043 030b 	orr.w	r3, r3, #11
 8007b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b9a:	f043 030b 	orr.w	r3, r3, #11
 8007b9e:	647b      	str	r3, [r7, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007ba0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8007ba4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ba8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007bac:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	f003 f89d 	bl	800acf0 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	6953      	ldr	r3, [r2, #20]
 8007bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bbe:	6153      	str	r3, [r2, #20]
 8007bc0:	e688      	b.n	80078d4 <HAL_PCD_IRQHandler+0xfc>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bc8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007bcc:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f043 030b 	orr.w	r3, r3, #11
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	e7e3      	b.n	8007ba0 <HAL_PCD_IRQHandler+0x3c8>
      (void)USB_ActivateSetup(hpcd->Instance);
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	f003 f878 	bl	800acce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	f002 fd7c 	bl	800a6dc <USB_GetDevSpeed>
 8007be4:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007be6:	6825      	ldr	r5, [r4, #0]
 8007be8:	f000 fe5c 	bl	80088a4 <HAL_RCC_GetHCLKFreq>
 8007bec:	4601      	mov	r1, r0
 8007bee:	7b22      	ldrb	r2, [r4, #12]
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f002 fbfd 	bl	800a3f0 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7fe ff69 	bl	8006ace <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	6953      	ldr	r3, [r2, #20]
 8007c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c04:	6153      	str	r3, [r2, #20]
 8007c06:	e66c      	b.n	80078e2 <HAL_PCD_IRQHandler+0x10a>
      HAL_PCD_SOFCallback(hpcd);
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7fe ff5a 	bl	8006ac2 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	6953      	ldr	r3, [r2, #20]
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	6153      	str	r3, [r2, #20]
 8007c18:	e66a      	b.n	80078f0 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7fe ff74 	bl	8006b0a <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007c22:	6822      	ldr	r2, [r4, #0]
 8007c24:	6953      	ldr	r3, [r2, #20]
 8007c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2a:	6153      	str	r3, [r2, #20]
 8007c2c:	e667      	b.n	80078fe <HAL_PCD_IRQHandler+0x126>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4620      	mov	r0, r4
 8007c32:	f7fe ff64 	bl	8006afe <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	6953      	ldr	r3, [r2, #20]
 8007c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c3e:	6153      	str	r3, [r2, #20]
 8007c40:	e664      	b.n	800790c <HAL_PCD_IRQHandler+0x134>
      HAL_PCD_ConnectCallback(hpcd);
 8007c42:	4620      	mov	r0, r4
 8007c44:	f7fe ff67 	bl	8006b16 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c48:	6822      	ldr	r2, [r4, #0]
 8007c4a:	6953      	ldr	r3, [r2, #20]
 8007c4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c50:	6153      	str	r3, [r2, #20]
 8007c52:	e662      	b.n	800791a <HAL_PCD_IRQHandler+0x142>
        HAL_PCD_DisconnectCallback(hpcd);
 8007c54:	4620      	mov	r0, r4
 8007c56:	f7fe ff64 	bl	8006b22 <HAL_PCD_DisconnectCallback>
 8007c5a:	e66b      	b.n	8007934 <HAL_PCD_IRQHandler+0x15c>

08007c5c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8007c5c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d00d      	beq.n	8007c80 <HAL_PCD_SetAddress+0x24>
{
 8007c64:	b510      	push	{r4, lr}
 8007c66:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007c6e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007c72:	6800      	ldr	r0, [r0, #0]
 8007c74:	f002 ffca 	bl	800ac0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007c7e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8007c80:	2002      	movs	r0, #2
}
 8007c82:	4770      	bx	lr

08007c84 <HAL_PCD_EP_Open>:
{
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4605      	mov	r5, r0
 8007c88:	468c      	mov	ip, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8007c8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007c8e:	d129      	bne.n	8007ce4 <HAL_PCD_EP_Open+0x60>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c90:	f001 0e0f 	and.w	lr, r1, #15
 8007c94:	ebce 04ce 	rsb	r4, lr, lr, lsl #3
 8007c98:	00a4      	lsls	r4, r4, #2
 8007c9a:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8007c9e:	4404      	add	r4, r0
 8007ca0:	1d21      	adds	r1, r4, #4
    ep->is_in = 0U;
 8007ca2:	ebce 0ece 	rsb	lr, lr, lr, lsl #3
 8007ca6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8007caa:	2000      	movs	r0, #0
 8007cac:	f88e 01fd 	strb.w	r0, [lr, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cb0:	f00c 0c0f 	and.w	ip, ip, #15
 8007cb4:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = ep_mps;
 8007cb8:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8007cba:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8007cbc:	784a      	ldrb	r2, [r1, #1]
 8007cbe:	b10a      	cbz	r2, 8007cc4 <HAL_PCD_EP_Open+0x40>
    ep->tx_fifo_num = ep->num;
 8007cc0:	f8a1 c006 	strh.w	ip, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d01d      	beq.n	8007d04 <HAL_PCD_EP_Open+0x80>
  __HAL_LOCK(hpcd);
 8007cc8:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d01c      	beq.n	8007d0a <HAL_PCD_EP_Open+0x86>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007cd6:	6828      	ldr	r0, [r5, #0]
 8007cd8:	f002 fd0e 	bl	800a6f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007cdc:	2000      	movs	r0, #0
 8007cde:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ce4:	f001 000f 	and.w	r0, r1, #15
 8007ce8:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8007cec:	0089      	lsls	r1, r1, #2
 8007cee:	3138      	adds	r1, #56	; 0x38
 8007cf0:	4429      	add	r1, r5
 8007cf2:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007cf4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007cf8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8007cfc:	2401      	movs	r4, #1
 8007cfe:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
 8007d02:	e7d5      	b.n	8007cb0 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	710b      	strb	r3, [r1, #4]
 8007d08:	e7de      	b.n	8007cc8 <HAL_PCD_EP_Open+0x44>
  __HAL_LOCK(hpcd);
 8007d0a:	2002      	movs	r0, #2
 8007d0c:	e7e9      	b.n	8007ce2 <HAL_PCD_EP_Open+0x5e>

08007d0e <HAL_PCD_EP_Close>:
{
 8007d0e:	b510      	push	{r4, lr}
 8007d10:	4604      	mov	r4, r0
 8007d12:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8007d14:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007d18:	d120      	bne.n	8007d5c <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d1a:	f001 000f 	and.w	r0, r1, #15
 8007d1e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d28:	4423      	add	r3, r4
 8007d2a:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8007d2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007d30:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007d34:	2300      	movs	r3, #0
 8007d36:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007d3a:	f002 020f 	and.w	r2, r2, #15
 8007d3e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8007d40:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d019      	beq.n	8007d7c <HAL_PCD_EP_Close+0x6e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007d4e:	6820      	ldr	r0, [r4, #0]
 8007d50:	f002 fd20 	bl	800a794 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d54:	2000      	movs	r0, #0
 8007d56:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007d5a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d5c:	f001 000f 	and.w	r0, r1, #15
 8007d60:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	3338      	adds	r3, #56	; 0x38
 8007d68:	4423      	add	r3, r4
 8007d6a:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 8007d6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007d70:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007d74:	2301      	movs	r3, #1
 8007d76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007d7a:	e7de      	b.n	8007d3a <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 8007d7c:	2002      	movs	r0, #2
 8007d7e:	e7ec      	b.n	8007d5a <HAL_PCD_EP_Close+0x4c>

08007d80 <HAL_PCD_EP_Receive>:
{
 8007d80:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d82:	f001 040f 	and.w	r4, r1, #15
 8007d86:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007d8a:	0089      	lsls	r1, r1, #2
 8007d8c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007d90:	4401      	add	r1, r0
 8007d92:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007d94:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007d98:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007d9c:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->xfer_len = len;
 8007da0:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 8007daa:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dae:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007db2:	b924      	cbnz	r4, 8007dbe <HAL_PCD_EP_Receive+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007db4:	6800      	ldr	r0, [r0, #0]
 8007db6:	f002 fd5d 	bl	800a874 <USB_EP0StartXfer>
}
 8007dba:	2000      	movs	r0, #0
 8007dbc:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007dbe:	6800      	ldr	r0, [r0, #0]
 8007dc0:	f002 fde4 	bl	800a98c <USB_EPStartXfer>
 8007dc4:	e7f9      	b.n	8007dba <HAL_PCD_EP_Receive+0x3a>

08007dc6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007dc6:	f001 010f 	and.w	r1, r1, #15
 8007dca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007dce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007dd2:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_PCD_EP_Transmit>:
{
 8007dd8:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dda:	f001 040f 	and.w	r4, r1, #15
 8007dde:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8007de2:	0089      	lsls	r1, r1, #2
 8007de4:	3138      	adds	r1, #56	; 0x38
 8007de6:	4401      	add	r1, r0
 8007de8:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 8007dea:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
 8007dee:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007df2:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_len = len;
 8007df6:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e06:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e0a:	b924      	cbnz	r4, 8007e16 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f002 fd31 	bl	800a874 <USB_EP0StartXfer>
}
 8007e12:	2000      	movs	r0, #0
 8007e14:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	f002 fdb8 	bl	800a98c <USB_EPStartXfer>
 8007e1c:	e7f9      	b.n	8007e12 <HAL_PCD_EP_Transmit+0x3a>

08007e1e <HAL_PCD_EP_SetStall>:
{
 8007e1e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e20:	f001 050f 	and.w	r5, r1, #15
 8007e24:	6842      	ldr	r2, [r0, #4]
 8007e26:	4295      	cmp	r5, r2
 8007e28:	d838      	bhi.n	8007e9c <HAL_PCD_EP_SetStall+0x7e>
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8007e2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007e32:	d11f      	bne.n	8007e74 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8007e34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007e38:	0089      	lsls	r1, r1, #2
 8007e3a:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007e3e:	4401      	add	r1, r0
 8007e40:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007e42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007e46:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 8007e50:	2301      	movs	r3, #1
 8007e52:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e54:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8007e56:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d020      	beq.n	8007ea0 <HAL_PCD_EP_SetStall+0x82>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	f002 fe76 	bl	800ab56 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e6a:	b18d      	cbz	r5, 8007e90 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e74:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8007e78:	0089      	lsls	r1, r1, #2
 8007e7a:	3138      	adds	r1, #56	; 0x38
 8007e7c:	4401      	add	r1, r0
 8007e7e:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007e80:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8007e84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e8e:	e7df      	b.n	8007e50 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007e90:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	f002 ff2b 	bl	800acf0 <USB_EP0_OutStart>
 8007e9a:	e7e7      	b.n	8007e6c <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e7e8      	b.n	8007e72 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8007ea0:	2002      	movs	r0, #2
 8007ea2:	e7e6      	b.n	8007e72 <HAL_PCD_EP_SetStall+0x54>

08007ea4 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ea4:	f001 030f 	and.w	r3, r1, #15
 8007ea8:	6842      	ldr	r2, [r0, #4]
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d831      	bhi.n	8007f12 <HAL_PCD_EP_ClrStall+0x6e>
{
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8007eb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007eb6:	d11e      	bne.n	8007ef6 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007eb8:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007ebc:	0089      	lsls	r1, r1, #2
 8007ebe:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8007ec2:	4401      	add	r1, r0
 8007ec4:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8007ec6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007eca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007ece:	2000      	movs	r0, #0
 8007ed0:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ed8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8007eda:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d019      	beq.n	8007f16 <HAL_PCD_EP_ClrStall+0x72>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	f002 fe61 	bl	800abb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007eee:	2000      	movs	r0, #0
 8007ef0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8007ef4:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ef6:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8007efa:	0089      	lsls	r1, r1, #2
 8007efc:	3138      	adds	r1, #56	; 0x38
 8007efe:	4401      	add	r1, r0
 8007f00:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8007f02:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8007f06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8007f10:	e7e0      	b.n	8007ed4 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8007f12:	2001      	movs	r0, #1
}
 8007f14:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8007f16:	2002      	movs	r0, #2
 8007f18:	e7ec      	b.n	8007ef4 <HAL_PCD_EP_ClrStall+0x50>

08007f1a <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f1a:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f1c:	6804      	ldr	r4, [r0, #0]
 8007f1e:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8007f20:	b931      	cbnz	r1, 8007f30 <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f22:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007f26:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	468c      	mov	ip, r1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f34:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e008      	b.n	8007f4e <HAL_PCDEx_SetTxFiFo+0x34>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f3c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007f40:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f44:	6849      	ldr	r1, [r1, #4]
 8007f46:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007f52:	428b      	cmp	r3, r1
 8007f54:	d3f2      	bcc.n	8007f3c <HAL_PCDEx_SetTxFiFo+0x22>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f56:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8007f5a:	f10c 013f 	add.w	r1, ip, #63	; 0x3f
 8007f5e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f62:	6048      	str	r0, [r1, #4]
 8007f64:	e7e0      	b.n	8007f28 <HAL_PCDEx_SetTxFiFo+0xe>

08007f66 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8007f66:	6803      	ldr	r3, [r0, #0]
 8007f68:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	4770      	bx	lr

08007f6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007f6e:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f70:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 8007f72:	2101      	movs	r1, #1
 8007f74:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007f78:	2000      	movs	r0, #0
 8007f7a:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007f7e:	6993      	ldr	r3, [r2, #24]
 8007f80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f84:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007f86:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f8c:	f043 0303 	orr.w	r3, r3, #3
 8007f90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8007f92:	4770      	bx	lr

08007f94 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007f94:	4770      	bx	lr
	...

08007f98 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f98:	4a02      	ldr	r2, [pc, #8]	; (8007fa4 <HAL_PWR_EnableBkUpAccess+0xc>)
 8007f9a:	6813      	ldr	r3, [r2, #0]
 8007f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa0:	6013      	str	r3, [r2, #0]
}
 8007fa2:	4770      	bx	lr
 8007fa4:	40007000 	.word	0x40007000

08007fa8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <HAL_PWREx_GetVoltageRange+0xc>)
 8007faa:	6818      	ldr	r0, [r3, #0]
#endif
}
 8007fac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	40007000 	.word	0x40007000

08007fb8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007fb8:	4a02      	ldr	r2, [pc, #8]	; (8007fc4 <HAL_PWREx_EnableVddUSB+0xc>)
 8007fba:	6853      	ldr	r3, [r2, #4]
 8007fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007fc0:	6053      	str	r3, [r2, #4]
}
 8007fc2:	4770      	bx	lr
 8007fc4:	40007000 	.word	0x40007000

08007fc8 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007fc8:	4a02      	ldr	r2, [pc, #8]	; (8007fd4 <HAL_PWREx_EnableVddIO2+0xc>)
 8007fca:	6853      	ldr	r3, [r2, #4]
 8007fcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fd0:	6053      	str	r3, [r2, #4]
}
 8007fd2:	4770      	bx	lr
 8007fd4:	40007000 	.word	0x40007000

08007fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007fd8:	b530      	push	{r4, r5, lr}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007fde:	4b20      	ldr	r3, [pc, #128]	; (8008060 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007fe6:	d00b      	beq.n	8008000 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007fe8:	f7ff ffde 	bl	8007fa8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007ff0:	d017      	beq.n	8008022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007ff2:	2c80      	cmp	r4, #128	; 0x80
 8007ff4:	d81f      	bhi.n	8008036 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007ff6:	d02d      	beq.n	8008054 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007ff8:	2c70      	cmp	r4, #112	; 0x70
 8007ffa:	d02d      	beq.n	8008058 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	e01b      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8008000:	4d17      	ldr	r5, [pc, #92]	; (8008060 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8008002:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008008:	65ab      	str	r3, [r5, #88]	; 0x58
 800800a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800800c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8008014:	f7ff ffc8 	bl	8007fa8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8008018:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800801a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800801e:	65ab      	str	r3, [r5, #88]	; 0x58
 8008020:	e7e4      	b.n	8007fec <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8008022:	2c80      	cmp	r4, #128	; 0x80
 8008024:	d903      	bls.n	800802e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8008026:	2ca0      	cmp	r4, #160	; 0xa0
 8008028:	d903      	bls.n	8008032 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800802a:	2102      	movs	r1, #2
 800802c:	e004      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800802e:	2100      	movs	r1, #0
 8008030:	e002      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8008032:	2101      	movs	r1, #1
 8008034:	e000      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8008036:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008038:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800803a:	6813      	ldr	r3, [r2, #0]
 800803c:	f023 0307 	bic.w	r3, r3, #7
 8008040:	430b      	orrs	r3, r1
 8008042:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008044:	6813      	ldr	r3, [r2, #0]
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	428b      	cmp	r3, r1
 800804c:	d106      	bne.n	800805c <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800804e:	2000      	movs	r0, #0
}
 8008050:	b003      	add	sp, #12
 8008052:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8008054:	2102      	movs	r1, #2
 8008056:	e7ef      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8008058:	2101      	movs	r1, #1
 800805a:	e7ed      	b.n	8008038 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800805c:	2001      	movs	r0, #1
 800805e:	e7f7      	b.n	8008050 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8008060:	40021000 	.word	0x40021000
 8008064:	40022000 	.word	0x40022000

08008068 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008068:	4a28      	ldr	r2, [pc, #160]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 800806a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800806c:	68d2      	ldr	r2, [r2, #12]
 800806e:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008072:	f013 030c 	ands.w	r3, r3, #12
 8008076:	d00a      	beq.n	800808e <HAL_RCC_GetSysClockFreq+0x26>
 8008078:	2b0c      	cmp	r3, #12
 800807a:	d006      	beq.n	800808a <HAL_RCC_GetSysClockFreq+0x22>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800807c:	2b04      	cmp	r3, #4
 800807e:	d01f      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x58>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008080:	2b08      	cmp	r3, #8
 8008082:	d020      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008084:	2000      	movs	r0, #0
 8008086:	4602      	mov	r2, r0
 8008088:	e010      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x44>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800808a:	2a01      	cmp	r2, #1
 800808c:	d1f6      	bne.n	800807c <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800808e:	4a1f      	ldr	r2, [pc, #124]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	f012 0f08 	tst.w	r2, #8
 8008096:	d10c      	bne.n	80080b2 <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 800809a:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800809e:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 80080a2:	491b      	ldr	r1, [pc, #108]	; (8008110 <HAL_RCC_GetSysClockFreq+0xa8>)
 80080a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080a8:	b143      	cbz	r3, 80080bc <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80080aa:	2000      	movs	r0, #0
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	d00d      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x64>
}
 80080b0:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80080b2:	4a16      	ldr	r2, [pc, #88]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80080ba:	e7f2      	b.n	80080a2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 80080bc:	4610      	mov	r0, r2
 80080be:	e7f5      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 80080c0:	4814      	ldr	r0, [pc, #80]	; (8008114 <HAL_RCC_GetSysClockFreq+0xac>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80080c2:	2200      	movs	r2, #0
 80080c4:	e7f2      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 80080c6:	4814      	ldr	r0, [pc, #80]	; (8008118 <HAL_RCC_GetSysClockFreq+0xb0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80080c8:	2200      	movs	r2, #0
 80080ca:	e7ef      	b.n	80080ac <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d016      	beq.n	8008106 <HAL_RCC_GetSysClockFreq+0x9e>
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d100      	bne.n	80080de <HAL_RCC_GetSysClockFreq+0x76>
      pllvco = HSE_VALUE;
 80080dc:	4a0e      	ldr	r2, [pc, #56]	; (8008118 <HAL_RCC_GetSysClockFreq+0xb0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080de:	490b      	ldr	r1, [pc, #44]	; (800810c <HAL_RCC_GetSysClockFreq+0xa4>)
 80080e0:	68c8      	ldr	r0, [r1, #12]
 80080e2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80080e6:	1c43      	adds	r3, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80080e8:	68c8      	ldr	r0, [r1, #12]
 80080ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80080ee:	fb02 f000 	mul.w	r0, r2, r0
 80080f2:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080f6:	68cb      	ldr	r3, [r1, #12]
 80080f8:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80080fc:	3301      	adds	r3, #1
 80080fe:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8008100:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8008104:	e7d4      	b.n	80080b0 <HAL_RCC_GetSysClockFreq+0x48>
    switch (pllsource)
 8008106:	4a03      	ldr	r2, [pc, #12]	; (8008114 <HAL_RCC_GetSysClockFreq+0xac>)
 8008108:	e7e9      	b.n	80080de <HAL_RCC_GetSysClockFreq+0x76>
 800810a:	bf00      	nop
 800810c:	40021000 	.word	0x40021000
 8008110:	0800f228 	.word	0x0800f228
 8008114:	00f42400 	.word	0x00f42400
 8008118:	007a1200 	.word	0x007a1200

0800811c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800811c:	2800      	cmp	r0, #0
 800811e:	f000 82fc 	beq.w	800871a <HAL_RCC_OscConfig+0x5fe>
{
 8008122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008124:	b083      	sub	sp, #12
 8008126:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008128:	4b96      	ldr	r3, [pc, #600]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800812a:	689d      	ldr	r5, [r3, #8]
 800812c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008130:	68de      	ldr	r6, [r3, #12]
 8008132:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008136:	6803      	ldr	r3, [r0, #0]
 8008138:	f013 0f10 	tst.w	r3, #16
 800813c:	d05a      	beq.n	80081f4 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800813e:	b1e5      	cbz	r5, 800817a <HAL_RCC_OscConfig+0x5e>
 8008140:	2d0c      	cmp	r5, #12
 8008142:	d018      	beq.n	8008176 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008144:	69a3      	ldr	r3, [r4, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	f000 80bb 	beq.w	80082c2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800814c:	4a8d      	ldr	r2, [pc, #564]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008156:	f7fe ffc7 	bl	80070e8 <HAL_GetTick>
 800815a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800815c:	4b89      	ldr	r3, [pc, #548]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f013 0f02 	tst.w	r3, #2
 8008164:	f040 809a 	bne.w	800829c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008168:	f7fe ffbe 	bl	80070e8 <HAL_GetTick>
 800816c:	1bc0      	subs	r0, r0, r7
 800816e:	2802      	cmp	r0, #2
 8008170:	d9f4      	bls.n	800815c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 8008172:	2003      	movs	r0, #3
 8008174:	e2dc      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008176:	2e01      	cmp	r6, #1
 8008178:	d1e4      	bne.n	8008144 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800817a:	4b82      	ldr	r3, [pc, #520]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f013 0f02 	tst.w	r3, #2
 8008182:	d003      	beq.n	800818c <HAL_RCC_OscConfig+0x70>
 8008184:	69a3      	ldr	r3, [r4, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 82c9 	beq.w	800871e <HAL_RCC_OscConfig+0x602>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800818c:	6a20      	ldr	r0, [r4, #32]
 800818e:	4b7d      	ldr	r3, [pc, #500]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f013 0f08 	tst.w	r3, #8
 8008196:	d05b      	beq.n	8008250 <HAL_RCC_OscConfig+0x134>
 8008198:	4b7a      	ldr	r3, [pc, #488]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081a0:	4298      	cmp	r0, r3
 80081a2:	d85c      	bhi.n	800825e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081a4:	4b77      	ldr	r3, [pc, #476]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80081b4:	6a21      	ldr	r1, [r4, #32]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80081c0:	69e1      	ldr	r1, [r4, #28]
 80081c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80081c6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	d060      	beq.n	800828e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081cc:	f7ff ff4c 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 80081d0:	4b6c      	ldr	r3, [pc, #432]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80081d8:	4a6b      	ldr	r2, [pc, #428]	; (8008388 <HAL_RCC_OscConfig+0x26c>)
 80081da:	5cd3      	ldrb	r3, [r2, r3]
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	40d8      	lsrs	r0, r3
 80081e2:	4b6a      	ldr	r3, [pc, #424]	; (800838c <HAL_RCC_OscConfig+0x270>)
 80081e4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80081e6:	4b6a      	ldr	r3, [pc, #424]	; (8008390 <HAL_RCC_OscConfig+0x274>)
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f7fe ff3b 	bl	8007064 <HAL_InitTick>
        if(status != HAL_OK)
 80081ee:	2800      	cmp	r0, #0
 80081f0:	f040 829e 	bne.w	8008730 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081f4:	6823      	ldr	r3, [r4, #0]
 80081f6:	f013 0f01 	tst.w	r3, #1
 80081fa:	f000 8081 	beq.w	8008300 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80081fe:	2d08      	cmp	r5, #8
 8008200:	d075      	beq.n	80082ee <HAL_RCC_OscConfig+0x1d2>
 8008202:	2d0c      	cmp	r5, #12
 8008204:	d071      	beq.n	80082ea <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800820c:	f000 8097 	beq.w	800833e <HAL_RCC_OscConfig+0x222>
 8008210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008214:	f000 8099 	beq.w	800834a <HAL_RCC_OscConfig+0x22e>
 8008218:	4b5a      	ldr	r3, [pc, #360]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008228:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800822a:	6863      	ldr	r3, [r4, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8099 	beq.w	8008364 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8008232:	f7fe ff59 	bl	80070e8 <HAL_GetTick>
 8008236:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008238:	4b52      	ldr	r3, [pc, #328]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008240:	d15e      	bne.n	8008300 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008242:	f7fe ff51 	bl	80070e8 <HAL_GetTick>
 8008246:	1bc0      	subs	r0, r0, r7
 8008248:	2864      	cmp	r0, #100	; 0x64
 800824a:	d9f5      	bls.n	8008238 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800824c:	2003      	movs	r0, #3
 800824e:	e26f      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008250:	4b4c      	ldr	r3, [pc, #304]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 8008252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008256:	091b      	lsrs	r3, r3, #4
 8008258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800825c:	e7a0      	b.n	80081a0 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800825e:	f7ff febb 	bl	8007fd8 <RCC_SetFlashLatencyFromMSIRange>
 8008262:	2800      	cmp	r0, #0
 8008264:	f040 825d 	bne.w	8008722 <HAL_RCC_OscConfig+0x606>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008268:	4b46      	ldr	r3, [pc, #280]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f042 0208 	orr.w	r2, r2, #8
 8008270:	601a      	str	r2, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008278:	6a21      	ldr	r1, [r4, #32]
 800827a:	430a      	orrs	r2, r1
 800827c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8008284:	69e1      	ldr	r1, [r4, #28]
 8008286:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800828a:	605a      	str	r2, [r3, #4]
 800828c:	e79e      	b.n	80081cc <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800828e:	6a20      	ldr	r0, [r4, #32]
 8008290:	f7ff fea2 	bl	8007fd8 <RCC_SetFlashLatencyFromMSIRange>
 8008294:	2800      	cmp	r0, #0
 8008296:	d099      	beq.n	80081cc <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 8008298:	2001      	movs	r0, #1
 800829a:	e249      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800829c:	4b39      	ldr	r3, [pc, #228]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	f042 0208 	orr.w	r2, r2, #8
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80082b8:	69e1      	ldr	r1, [r4, #28]
 80082ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80082be:	605a      	str	r2, [r3, #4]
 80082c0:	e798      	b.n	80081f4 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 80082c2:	4a30      	ldr	r2, [pc, #192]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 80082c4:	6813      	ldr	r3, [r2, #0]
 80082c6:	f023 0301 	bic.w	r3, r3, #1
 80082ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80082cc:	f7fe ff0c 	bl	80070e8 <HAL_GetTick>
 80082d0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082d2:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f013 0f02 	tst.w	r3, #2
 80082da:	d08b      	beq.n	80081f4 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082dc:	f7fe ff04 	bl	80070e8 <HAL_GetTick>
 80082e0:	1bc0      	subs	r0, r0, r7
 80082e2:	2802      	cmp	r0, #2
 80082e4:	d9f5      	bls.n	80082d2 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 80082e6:	2003      	movs	r0, #3
 80082e8:	e222      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082ea:	2e03      	cmp	r6, #3
 80082ec:	d18b      	bne.n	8008206 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ee:	4b25      	ldr	r3, [pc, #148]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80082f6:	d003      	beq.n	8008300 <HAL_RCC_OscConfig+0x1e4>
 80082f8:	6863      	ldr	r3, [r4, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f000 8213 	beq.w	8008726 <HAL_RCC_OscConfig+0x60a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	f013 0f02 	tst.w	r3, #2
 8008306:	d058      	beq.n	80083ba <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008308:	2d04      	cmp	r5, #4
 800830a:	d045      	beq.n	8008398 <HAL_RCC_OscConfig+0x27c>
 800830c:	2d0c      	cmp	r5, #12
 800830e:	d041      	beq.n	8008394 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008310:	68e3      	ldr	r3, [r4, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d077      	beq.n	8008406 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 8008316:	4a1b      	ldr	r2, [pc, #108]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 8008318:	6813      	ldr	r3, [r2, #0]
 800831a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008320:	f7fe fee2 	bl	80070e8 <HAL_GetTick>
 8008324:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008326:	4b17      	ldr	r3, [pc, #92]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800832e:	d161      	bne.n	80083f4 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008330:	f7fe feda 	bl	80070e8 <HAL_GetTick>
 8008334:	1b80      	subs	r0, r0, r6
 8008336:	2802      	cmp	r0, #2
 8008338:	d9f5      	bls.n	8008326 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800833a:	2003      	movs	r0, #3
 800833c:	e1f8      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800833e:	4a11      	ldr	r2, [pc, #68]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 8008340:	6813      	ldr	r3, [r2, #0]
 8008342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	e76f      	b.n	800822a <HAL_RCC_OscConfig+0x10e>
 800834a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800834e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e762      	b.n	800822a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 8008364:	f7fe fec0 	bl	80070e8 <HAL_GetTick>
 8008368:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <HAL_RCC_OscConfig+0x268>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008372:	d0c5      	beq.n	8008300 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008374:	f7fe feb8 	bl	80070e8 <HAL_GetTick>
 8008378:	1bc0      	subs	r0, r0, r7
 800837a:	2864      	cmp	r0, #100	; 0x64
 800837c:	d9f5      	bls.n	800836a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800837e:	2003      	movs	r0, #3
 8008380:	e1d6      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
 8008382:	bf00      	nop
 8008384:	40021000 	.word	0x40021000
 8008388:	0800f258 	.word	0x0800f258
 800838c:	20000084 	.word	0x20000084
 8008390:	2000008c 	.word	0x2000008c
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008394:	2e02      	cmp	r6, #2
 8008396:	d1bb      	bne.n	8008310 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008398:	4b95      	ldr	r3, [pc, #596]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80083a0:	d003      	beq.n	80083aa <HAL_RCC_OscConfig+0x28e>
 80083a2:	68e3      	ldr	r3, [r4, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 81c0 	beq.w	800872a <HAL_RCC_OscConfig+0x60e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083aa:	4a91      	ldr	r2, [pc, #580]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083ac:	6853      	ldr	r3, [r2, #4]
 80083ae:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80083b2:	6921      	ldr	r1, [r4, #16]
 80083b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80083b8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f013 0f08 	tst.w	r3, #8
 80083c0:	d04c      	beq.n	800845c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80083c2:	6963      	ldr	r3, [r4, #20]
 80083c4:	b39b      	cbz	r3, 800842e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 80083c6:	4a8a      	ldr	r2, [pc, #552]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80083d4:	f7fe fe88 	bl	80070e8 <HAL_GetTick>
 80083d8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80083da:	4b85      	ldr	r3, [pc, #532]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e0:	f013 0f02 	tst.w	r3, #2
 80083e4:	d13a      	bne.n	800845c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083e6:	f7fe fe7f 	bl	80070e8 <HAL_GetTick>
 80083ea:	1b80      	subs	r0, r0, r6
 80083ec:	2802      	cmp	r0, #2
 80083ee:	d9f4      	bls.n	80083da <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 80083f0:	2003      	movs	r0, #3
 80083f2:	e19d      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f4:	4a7e      	ldr	r2, [pc, #504]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083f6:	6853      	ldr	r3, [r2, #4]
 80083f8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80083fc:	6921      	ldr	r1, [r4, #16]
 80083fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008402:	6053      	str	r3, [r2, #4]
 8008404:	e7d9      	b.n	80083ba <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 8008406:	4a7a      	ldr	r2, [pc, #488]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008408:	6813      	ldr	r3, [r2, #0]
 800840a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008410:	f7fe fe6a 	bl	80070e8 <HAL_GetTick>
 8008414:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008416:	4b76      	ldr	r3, [pc, #472]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800841e:	d0cc      	beq.n	80083ba <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008420:	f7fe fe62 	bl	80070e8 <HAL_GetTick>
 8008424:	1b80      	subs	r0, r0, r6
 8008426:	2802      	cmp	r0, #2
 8008428:	d9f5      	bls.n	8008416 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800842a:	2003      	movs	r0, #3
 800842c:	e180      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_LSI_DISABLE();
 800842e:	4a70      	ldr	r2, [pc, #448]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008430:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800843c:	f7fe fe54 	bl	80070e8 <HAL_GetTick>
 8008440:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008442:	4b6b      	ldr	r3, [pc, #428]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008448:	f013 0f02 	tst.w	r3, #2
 800844c:	d006      	beq.n	800845c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800844e:	f7fe fe4b 	bl	80070e8 <HAL_GetTick>
 8008452:	1b80      	subs	r0, r0, r6
 8008454:	2802      	cmp	r0, #2
 8008456:	d9f4      	bls.n	8008442 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 8008458:	2003      	movs	r0, #3
 800845a:	e169      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	f013 0f04 	tst.w	r3, #4
 8008462:	d07a      	beq.n	800855a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008464:	4b62      	ldr	r3, [pc, #392]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008468:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800846c:	d136      	bne.n	80084dc <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800846e:	4b60      	ldr	r3, [pc, #384]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008470:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008476:	659a      	str	r2, [r3, #88]	; 0x58
 8008478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800847a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008482:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008484:	4b5b      	ldr	r3, [pc, #364]	; (80085f4 <HAL_RCC_OscConfig+0x4d8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f413 7f80 	tst.w	r3, #256	; 0x100
 800848c:	d028      	beq.n	80084e0 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800848e:	68a3      	ldr	r3, [r4, #8]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d039      	beq.n	8008508 <HAL_RCC_OscConfig+0x3ec>
 8008494:	2b05      	cmp	r3, #5
 8008496:	d03f      	beq.n	8008518 <HAL_RCC_OscConfig+0x3fc>
 8008498:	4b55      	ldr	r3, [pc, #340]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800849a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800849e:	f022 0201 	bic.w	r2, r2, #1
 80084a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80084a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80084aa:	f022 0204 	bic.w	r2, r2, #4
 80084ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d03d      	beq.n	8008534 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 80084b8:	f7fe fe16 	bl	80070e8 <HAL_GetTick>
 80084bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084be:	4b4c      	ldr	r3, [pc, #304]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	f013 0f02 	tst.w	r3, #2
 80084c8:	d146      	bne.n	8008558 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ca:	f7fe fe0d 	bl	80070e8 <HAL_GetTick>
 80084ce:	1bc0      	subs	r0, r0, r7
 80084d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80084d4:	4298      	cmp	r0, r3
 80084d6:	d9f2      	bls.n	80084be <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 80084d8:	2003      	movs	r0, #3
 80084da:	e129      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
    FlagStatus       pwrclkchanged = RESET;
 80084dc:	2600      	movs	r6, #0
 80084de:	e7d1      	b.n	8008484 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084e0:	4a44      	ldr	r2, [pc, #272]	; (80085f4 <HAL_RCC_OscConfig+0x4d8>)
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084e8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80084ea:	f7fe fdfd 	bl	80070e8 <HAL_GetTick>
 80084ee:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084f0:	4b40      	ldr	r3, [pc, #256]	; (80085f4 <HAL_RCC_OscConfig+0x4d8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80084f8:	d1c9      	bne.n	800848e <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084fa:	f7fe fdf5 	bl	80070e8 <HAL_GetTick>
 80084fe:	1bc0      	subs	r0, r0, r7
 8008500:	2802      	cmp	r0, #2
 8008502:	d9f5      	bls.n	80084f0 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 8008504:	2003      	movs	r0, #3
 8008506:	e113      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008508:	4a39      	ldr	r2, [pc, #228]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800850a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008516:	e7cc      	b.n	80084b2 <HAL_RCC_OscConfig+0x396>
 8008518:	4b35      	ldr	r3, [pc, #212]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800851a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800851e:	f042 0204 	orr.w	r2, r2, #4
 8008522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008526:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008532:	e7be      	b.n	80084b2 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 8008534:	f7fe fdd8 	bl	80070e8 <HAL_GetTick>
 8008538:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800853a:	4b2d      	ldr	r3, [pc, #180]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008540:	f013 0f02 	tst.w	r3, #2
 8008544:	d008      	beq.n	8008558 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008546:	f7fe fdcf 	bl	80070e8 <HAL_GetTick>
 800854a:	1bc0      	subs	r0, r0, r7
 800854c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008550:	4298      	cmp	r0, r3
 8008552:	d9f2      	bls.n	800853a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 8008554:	2003      	movs	r0, #3
 8008556:	e0eb      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
    if(pwrclkchanged == SET)
 8008558:	bb6e      	cbnz	r6, 80085b6 <HAL_RCC_OscConfig+0x49a>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800855a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	f000 80e6 	beq.w	800872e <HAL_RCC_OscConfig+0x612>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008562:	2b02      	cmp	r3, #2
 8008564:	d02d      	beq.n	80085c2 <HAL_RCC_OscConfig+0x4a6>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008566:	2d0c      	cmp	r5, #12
 8008568:	f000 80e8 	beq.w	800873c <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 800856c:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8008574:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
 800857c:	d104      	bne.n	8008588 <HAL_RCC_OscConfig+0x46c>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800857e:	4a1c      	ldr	r2, [pc, #112]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008580:	68d3      	ldr	r3, [r2, #12]
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008588:	4a19      	ldr	r2, [pc, #100]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800858a:	68d3      	ldr	r3, [r2, #12]
 800858c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008594:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008596:	f7fe fda7 	bl	80070e8 <HAL_GetTick>
 800859a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800859c:	4b14      	ldr	r3, [pc, #80]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80085a4:	f000 80b7 	beq.w	8008716 <HAL_RCC_OscConfig+0x5fa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085a8:	f7fe fd9e 	bl	80070e8 <HAL_GetTick>
 80085ac:	1b00      	subs	r0, r0, r4
 80085ae:	2802      	cmp	r0, #2
 80085b0:	d9f4      	bls.n	800859c <HAL_RCC_OscConfig+0x480>
            return HAL_TIMEOUT;
 80085b2:	2003      	movs	r0, #3
 80085b4:	e0bc      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
      __HAL_RCC_PWR_CLK_DISABLE();
 80085b6:	4a0e      	ldr	r2, [pc, #56]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80085b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80085ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085be:	6593      	str	r3, [r2, #88]	; 0x58
 80085c0:	e7cb      	b.n	800855a <HAL_RCC_OscConfig+0x43e>
      pll_config = RCC->PLLCFGR;
 80085c2:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80085c4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80085c6:	f003 0103 	and.w	r1, r3, #3
 80085ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80085cc:	4291      	cmp	r1, r2
 80085ce:	d013      	beq.n	80085f8 <HAL_RCC_OscConfig+0x4dc>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80085d0:	2d0c      	cmp	r5, #12
 80085d2:	f000 80af 	beq.w	8008734 <HAL_RCC_OscConfig+0x618>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80085d6:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80085de:	f040 80ab 	bne.w	8008738 <HAL_RCC_OscConfig+0x61c>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80085e2:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80085ea:	d031      	beq.n	8008650 <HAL_RCC_OscConfig+0x534>
            return HAL_ERROR;
 80085ec:	2001      	movs	r0, #1
 80085ee:	e09f      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
 80085f0:	40021000 	.word	0x40021000
 80085f4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80085f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80085fe:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008600:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8008604:	d1e4      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008606:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800860a:	6b61      	ldr	r1, [r4, #52]	; 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800860c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8008610:	d1de      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008612:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8008616:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008618:	3a07      	subs	r2, #7
 800861a:	bf18      	it	ne
 800861c:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800861e:	4291      	cmp	r1, r2
 8008620:	d1d6      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008622:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8008626:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008628:	0852      	lsrs	r2, r2, #1
 800862a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800862c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008630:	d1ce      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4b4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008632:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008638:	0852      	lsrs	r2, r2, #1
 800863a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800863c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008640:	d1c6      	bne.n	80085d0 <HAL_RCC_OscConfig+0x4b4>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008642:	4b3f      	ldr	r3, [pc, #252]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800864a:	d04a      	beq.n	80086e2 <HAL_RCC_OscConfig+0x5c6>
  return HAL_OK;
 800864c:	2000      	movs	r0, #0
 800864e:	e06f      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_DISABLE();
 8008650:	4a3b      	ldr	r2, [pc, #236]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 8008652:	6813      	ldr	r3, [r2, #0]
 8008654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008658:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800865a:	f7fe fd45 	bl	80070e8 <HAL_GetTick>
 800865e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008660:	4b37      	ldr	r3, [pc, #220]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008668:	d006      	beq.n	8008678 <HAL_RCC_OscConfig+0x55c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800866a:	f7fe fd3d 	bl	80070e8 <HAL_GetTick>
 800866e:	1b40      	subs	r0, r0, r5
 8008670:	2802      	cmp	r0, #2
 8008672:	d9f5      	bls.n	8008660 <HAL_RCC_OscConfig+0x544>
                return HAL_TIMEOUT;
 8008674:	2003      	movs	r0, #3
 8008676:	e05b      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008678:	4a31      	ldr	r2, [pc, #196]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 800867a:	68d3      	ldr	r3, [r2, #12]
 800867c:	4931      	ldr	r1, [pc, #196]	; (8008744 <HAL_RCC_OscConfig+0x628>)
 800867e:	4019      	ands	r1, r3
 8008680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008682:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008684:	3801      	subs	r0, #1
 8008686:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800868a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800868c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8008690:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008692:	0840      	lsrs	r0, r0, #1
 8008694:	3801      	subs	r0, #1
 8008696:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800869a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800869c:	0840      	lsrs	r0, r0, #1
 800869e:	3801      	subs	r0, #1
 80086a0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80086a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80086a6:	0900      	lsrs	r0, r0, #4
 80086a8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80086ac:	430b      	orrs	r3, r1
 80086ae:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 80086b0:	6813      	ldr	r3, [r2, #0]
 80086b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086b6:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086b8:	68d3      	ldr	r3, [r2, #12]
 80086ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086be:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 80086c0:	f7fe fd12 	bl	80070e8 <HAL_GetTick>
 80086c4:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086c6:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80086ce:	d106      	bne.n	80086de <HAL_RCC_OscConfig+0x5c2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086d0:	f7fe fd0a 	bl	80070e8 <HAL_GetTick>
 80086d4:	1b00      	subs	r0, r0, r4
 80086d6:	2802      	cmp	r0, #2
 80086d8:	d9f5      	bls.n	80086c6 <HAL_RCC_OscConfig+0x5aa>
                return HAL_TIMEOUT;
 80086da:	2003      	movs	r0, #3
 80086dc:	e028      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 80086de:	2000      	movs	r0, #0
 80086e0:	e026      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
          __HAL_RCC_PLL_ENABLE();
 80086e2:	4b17      	ldr	r3, [pc, #92]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086ea:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80086f2:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80086f4:	f7fe fcf8 	bl	80070e8 <HAL_GetTick>
 80086f8:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086fa:	4b11      	ldr	r3, [pc, #68]	; (8008740 <HAL_RCC_OscConfig+0x624>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008702:	d106      	bne.n	8008712 <HAL_RCC_OscConfig+0x5f6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008704:	f7fe fcf0 	bl	80070e8 <HAL_GetTick>
 8008708:	1b03      	subs	r3, r0, r4
 800870a:	2b02      	cmp	r3, #2
 800870c:	d9f5      	bls.n	80086fa <HAL_RCC_OscConfig+0x5de>
              return HAL_TIMEOUT;
 800870e:	2003      	movs	r0, #3
 8008710:	e00e      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 8008712:	2000      	movs	r0, #0
 8008714:	e00c      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
 8008716:	2000      	movs	r0, #0
 8008718:	e00a      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
    return HAL_ERROR;
 800871a:	2001      	movs	r0, #1
}
 800871c:	4770      	bx	lr
        return HAL_ERROR;
 800871e:	2001      	movs	r0, #1
 8008720:	e006      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8008722:	2001      	movs	r0, #1
 8008724:	e004      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 8008726:	2001      	movs	r0, #1
 8008728:	e002      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800872a:	2001      	movs	r0, #1
 800872c:	e000      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
  return HAL_OK;
 800872e:	2000      	movs	r0, #0
}
 8008730:	b003      	add	sp, #12
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8008734:	2001      	movs	r0, #1
 8008736:	e7fb      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
            return HAL_ERROR;
 8008738:	2001      	movs	r0, #1
 800873a:	e7f9      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
        return HAL_ERROR;
 800873c:	2001      	movs	r0, #1
 800873e:	e7f7      	b.n	8008730 <HAL_RCC_OscConfig+0x614>
 8008740:	40021000 	.word	0x40021000
 8008744:	f99d808c 	.word	0xf99d808c

08008748 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8008748:	2800      	cmp	r0, #0
 800874a:	f000 8098 	beq.w	800887e <HAL_RCC_ClockConfig+0x136>
{
 800874e:	b570      	push	{r4, r5, r6, lr}
 8008750:	460c      	mov	r4, r1
 8008752:	4605      	mov	r5, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008754:	4b4e      	ldr	r3, [pc, #312]	; (8008890 <HAL_RCC_ClockConfig+0x148>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	428b      	cmp	r3, r1
 800875e:	d20b      	bcs.n	8008778 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008760:	4a4b      	ldr	r2, [pc, #300]	; (8008890 <HAL_RCC_ClockConfig+0x148>)
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	f023 0307 	bic.w	r3, r3, #7
 8008768:	430b      	orrs	r3, r1
 800876a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800876c:	6813      	ldr	r3, [r2, #0]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	428b      	cmp	r3, r1
 8008774:	f040 8085 	bne.w	8008882 <HAL_RCC_ClockConfig+0x13a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	f013 0f01 	tst.w	r3, #1
 800877e:	d039      	beq.n	80087f4 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008780:	686b      	ldr	r3, [r5, #4]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d009      	beq.n	800879a <HAL_RCC_ClockConfig+0x52>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008786:	2b02      	cmp	r3, #2
 8008788:	d026      	beq.n	80087d8 <HAL_RCC_ClockConfig+0x90>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800878a:	bb63      	cbnz	r3, 80087e6 <HAL_RCC_ClockConfig+0x9e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800878c:	4a41      	ldr	r2, [pc, #260]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	f012 0f02 	tst.w	r2, #2
 8008794:	d106      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8008796:	2001      	movs	r0, #1
 8008798:	e070      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800879a:	4a3e      	ldr	r2, [pc, #248]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80087a2:	d070      	beq.n	8008886 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087a4:	493b      	ldr	r1, [pc, #236]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 80087a6:	688a      	ldr	r2, [r1, #8]
 80087a8:	f022 0203 	bic.w	r2, r2, #3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80087b0:	f7fe fc9a 	bl	80070e8 <HAL_GetTick>
 80087b4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087b6:	4b37      	ldr	r3, [pc, #220]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f003 030c 	and.w	r3, r3, #12
 80087be:	686a      	ldr	r2, [r5, #4]
 80087c0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80087c4:	d016      	beq.n	80087f4 <HAL_RCC_ClockConfig+0xac>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087c6:	f7fe fc8f 	bl	80070e8 <HAL_GetTick>
 80087ca:	1b80      	subs	r0, r0, r6
 80087cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80087d0:	4298      	cmp	r0, r3
 80087d2:	d9f0      	bls.n	80087b6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80087d4:	2003      	movs	r0, #3
 80087d6:	e051      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087d8:	4a2e      	ldr	r2, [pc, #184]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80087e0:	d1e0      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80087e2:	2001      	movs	r0, #1
 80087e4:	e04a      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087e6:	4a2b      	ldr	r2, [pc, #172]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 80087e8:	6812      	ldr	r2, [r2, #0]
 80087ea:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80087ee:	d1d9      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80087f0:	2001      	movs	r0, #1
 80087f2:	e043      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	f013 0f02 	tst.w	r3, #2
 80087fa:	d006      	beq.n	800880a <HAL_RCC_ClockConfig+0xc2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087fc:	4a25      	ldr	r2, [pc, #148]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 80087fe:	6893      	ldr	r3, [r2, #8]
 8008800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008804:	68a9      	ldr	r1, [r5, #8]
 8008806:	430b      	orrs	r3, r1
 8008808:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800880a:	4b21      	ldr	r3, [pc, #132]	; (8008890 <HAL_RCC_ClockConfig+0x148>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	42a3      	cmp	r3, r4
 8008814:	d90a      	bls.n	800882c <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <HAL_RCC_ClockConfig+0x148>)
 8008818:	6813      	ldr	r3, [r2, #0]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	4323      	orrs	r3, r4
 8008820:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	42a3      	cmp	r3, r4
 800882a:	d12e      	bne.n	800888a <HAL_RCC_ClockConfig+0x142>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	f013 0f04 	tst.w	r3, #4
 8008832:	d006      	beq.n	8008842 <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008834:	4a17      	ldr	r2, [pc, #92]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 8008836:	6893      	ldr	r3, [r2, #8]
 8008838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800883c:	68e9      	ldr	r1, [r5, #12]
 800883e:	430b      	orrs	r3, r1
 8008840:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	f013 0f08 	tst.w	r3, #8
 8008848:	d007      	beq.n	800885a <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800884a:	4a12      	ldr	r2, [pc, #72]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 800884c:	6893      	ldr	r3, [r2, #8]
 800884e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008852:	6929      	ldr	r1, [r5, #16]
 8008854:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008858:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800885a:	f7ff fc05 	bl	8008068 <HAL_RCC_GetSysClockFreq>
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <HAL_RCC_ClockConfig+0x14c>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008866:	4a0c      	ldr	r2, [pc, #48]	; (8008898 <HAL_RCC_ClockConfig+0x150>)
 8008868:	5cd3      	ldrb	r3, [r2, r3]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	40d8      	lsrs	r0, r3
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <HAL_RCC_ClockConfig+0x154>)
 8008872:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <HAL_RCC_ClockConfig+0x158>)
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	f7fe fbf4 	bl	8007064 <HAL_InitTick>
}
 800887c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800887e:	2001      	movs	r0, #1
}
 8008880:	4770      	bx	lr
      return HAL_ERROR;
 8008882:	2001      	movs	r0, #1
 8008884:	e7fa      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
        return HAL_ERROR;
 8008886:	2001      	movs	r0, #1
 8008888:	e7f8      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
      return HAL_ERROR;
 800888a:	2001      	movs	r0, #1
 800888c:	e7f6      	b.n	800887c <HAL_RCC_ClockConfig+0x134>
 800888e:	bf00      	nop
 8008890:	40022000 	.word	0x40022000
 8008894:	40021000 	.word	0x40021000
 8008898:	0800f258 	.word	0x0800f258
 800889c:	20000084 	.word	0x20000084
 80088a0:	2000008c 	.word	0x2000008c

080088a4 <HAL_RCC_GetHCLKFreq>:
}
 80088a4:	4b01      	ldr	r3, [pc, #4]	; (80088ac <HAL_RCC_GetHCLKFreq+0x8>)
 80088a6:	6818      	ldr	r0, [r3, #0]
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20000084 	.word	0x20000084

080088b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	4604      	mov	r4, r0
 80088b4:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088b6:	4b59      	ldr	r3, [pc, #356]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f013 0f03 	tst.w	r3, #3
 80088be:	d018      	beq.n	80088f2 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80088c0:	4b56      	ldr	r3, [pc, #344]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	6802      	ldr	r2, [r0, #0]
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d002      	beq.n	80088d4 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80088ce:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 80088d0:	4628      	mov	r0, r5
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	f000 809e 	beq.w	8008a16 <RCCEx_PLLSAI1_Config+0x166>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80088da:	4b50      	ldr	r3, [pc, #320]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80088e2:	3301      	adds	r3, #1
 80088e4:	6842      	ldr	r2, [r0, #4]
       ||
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d001      	beq.n	80088ee <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 80088ea:	2501      	movs	r5, #1
 80088ec:	e7f0      	b.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 80088ee:	2500      	movs	r5, #0
 80088f0:	e009      	b.n	8008906 <RCCEx_PLLSAI1_Config+0x56>
    switch(PllSai1->PLLSAI1Source)
 80088f2:	6803      	ldr	r3, [r0, #0]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d057      	beq.n	80089a8 <RCCEx_PLLSAI1_Config+0xf8>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d05c      	beq.n	80089b6 <RCCEx_PLLSAI1_Config+0x106>
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d042      	beq.n	8008986 <RCCEx_PLLSAI1_Config+0xd6>
 8008900:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8008902:	2d00      	cmp	r5, #0
 8008904:	d1e4      	bne.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 8008906:	4a45      	ldr	r2, [pc, #276]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800890e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008910:	f7fe fbea 	bl	80070e8 <HAL_GetTick>
 8008914:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008916:	4b41      	ldr	r3, [pc, #260]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800891e:	d005      	beq.n	800892c <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008920:	f7fe fbe2 	bl	80070e8 <HAL_GetTick>
 8008924:	1b83      	subs	r3, r0, r6
 8008926:	2b02      	cmp	r3, #2
 8008928:	d9f5      	bls.n	8008916 <RCCEx_PLLSAI1_Config+0x66>
        status = HAL_TIMEOUT;
 800892a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 800892c:	2d00      	cmp	r5, #0
 800892e:	d1cf      	bne.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8008930:	2f00      	cmp	r7, #0
 8008932:	d14e      	bne.n	80089d2 <RCCEx_PLLSAI1_Config+0x122>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008934:	4939      	ldr	r1, [pc, #228]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008936:	690b      	ldr	r3, [r1, #16]
 8008938:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800893c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008940:	68a0      	ldr	r0, [r4, #8]
 8008942:	68e2      	ldr	r2, [r4, #12]
 8008944:	0912      	lsrs	r2, r2, #4
 8008946:	0452      	lsls	r2, r2, #17
 8008948:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800894c:	4313      	orrs	r3, r2
 800894e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8008950:	4a32      	ldr	r2, [pc, #200]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008952:	6813      	ldr	r3, [r2, #0]
 8008954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008958:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800895a:	f7fe fbc5 	bl	80070e8 <HAL_GetTick>
 800895e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008960:	4b2e      	ldr	r3, [pc, #184]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8008968:	d105      	bne.n	8008976 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800896a:	f7fe fbbd 	bl	80070e8 <HAL_GetTick>
 800896e:	1b83      	subs	r3, r0, r6
 8008970:	2b02      	cmp	r3, #2
 8008972:	d9f5      	bls.n	8008960 <RCCEx_PLLSAI1_Config+0xb0>
          status = HAL_TIMEOUT;
 8008974:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8008976:	2d00      	cmp	r5, #0
 8008978:	d1aa      	bne.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800897a:	4a28      	ldr	r2, [pc, #160]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 800897c:	6913      	ldr	r3, [r2, #16]
 800897e:	69a1      	ldr	r1, [r4, #24]
 8008980:	430b      	orrs	r3, r1
 8008982:	6113      	str	r3, [r2, #16]
 8008984:	e7a4      	b.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008986:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008988:	6812      	ldr	r2, [r2, #0]
 800898a:	f012 0f02 	tst.w	r2, #2
 800898e:	d01e      	beq.n	80089ce <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008990:	4822      	ldr	r0, [pc, #136]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 8008992:	68c2      	ldr	r2, [r0, #12]
 8008994:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008998:	6861      	ldr	r1, [r4, #4]
 800899a:	3901      	subs	r1, #1
 800899c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60c3      	str	r3, [r0, #12]
 80089a4:	2500      	movs	r5, #0
 80089a6:	e7ac      	b.n	8008902 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089a8:	4a1c      	ldr	r2, [pc, #112]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80089aa:	6812      	ldr	r2, [r2, #0]
 80089ac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80089b0:	d1ee      	bne.n	8008990 <RCCEx_PLLSAI1_Config+0xe0>
        status = HAL_ERROR;
 80089b2:	2501      	movs	r5, #1
 80089b4:	e7a5      	b.n	8008902 <RCCEx_PLLSAI1_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089b6:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80089b8:	6812      	ldr	r2, [r2, #0]
 80089ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80089be:	d1e7      	bne.n	8008990 <RCCEx_PLLSAI1_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089c0:	4a16      	ldr	r2, [pc, #88]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80089c2:	6812      	ldr	r2, [r2, #0]
 80089c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80089c8:	d1e2      	bne.n	8008990 <RCCEx_PLLSAI1_Config+0xe0>
          status = HAL_ERROR;
 80089ca:	2501      	movs	r5, #1
 80089cc:	e799      	b.n	8008902 <RCCEx_PLLSAI1_Config+0x52>
        status = HAL_ERROR;
 80089ce:	2501      	movs	r5, #1
 80089d0:	e797      	b.n	8008902 <RCCEx_PLLSAI1_Config+0x52>
      else if(Divider == DIVIDER_Q_UPDATE)
 80089d2:	2f01      	cmp	r7, #1
 80089d4:	d00f      	beq.n	80089f6 <RCCEx_PLLSAI1_Config+0x146>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80089d6:	4811      	ldr	r0, [pc, #68]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80089d8:	6902      	ldr	r2, [r0, #16]
 80089da:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80089de:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80089e2:	68a1      	ldr	r1, [r4, #8]
 80089e4:	6963      	ldr	r3, [r4, #20]
 80089e6:	085b      	lsrs	r3, r3, #1
 80089e8:	3b01      	subs	r3, #1
 80089ea:	065b      	lsls	r3, r3, #25
 80089ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80089f0:	4313      	orrs	r3, r2
 80089f2:	6103      	str	r3, [r0, #16]
 80089f4:	e7ac      	b.n	8008950 <RCCEx_PLLSAI1_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80089f6:	4809      	ldr	r0, [pc, #36]	; (8008a1c <RCCEx_PLLSAI1_Config+0x16c>)
 80089f8:	6902      	ldr	r2, [r0, #16]
 80089fa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80089fe:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8008a02:	68a1      	ldr	r1, [r4, #8]
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	055b      	lsls	r3, r3, #21
 8008a0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a10:	4313      	orrs	r3, r2
 8008a12:	6103      	str	r3, [r0, #16]
 8008a14:	e79c      	b.n	8008950 <RCCEx_PLLSAI1_Config+0xa0>
      status = HAL_ERROR;
 8008a16:	2501      	movs	r5, #1
 8008a18:	e75a      	b.n	80088d0 <RCCEx_PLLSAI1_Config+0x20>
 8008a1a:	bf00      	nop
 8008a1c:	40021000 	.word	0x40021000

08008a20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	4604      	mov	r4, r0
 8008a24:	460f      	mov	r7, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008a26:	4b50      	ldr	r3, [pc, #320]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f013 0f03 	tst.w	r3, #3
 8008a2e:	d018      	beq.n	8008a62 <RCCEx_PLLSAI2_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008a30:	4b4d      	ldr	r3, [pc, #308]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	6802      	ldr	r2, [r0, #0]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d002      	beq.n	8008a44 <RCCEx_PLLSAI2_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008a3e:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8008a40:	4628      	mov	r0, r5
 8008a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	f000 808c 	beq.w	8008b62 <RCCEx_PLLSAI2_Config+0x142>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008a4a:	4b47      	ldr	r3, [pc, #284]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008a52:	3301      	adds	r3, #1
 8008a54:	6842      	ldr	r2, [r0, #4]
       ||
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d001      	beq.n	8008a5e <RCCEx_PLLSAI2_Config+0x3e>
      status = HAL_ERROR;
 8008a5a:	2501      	movs	r5, #1
 8008a5c:	e7f0      	b.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 8008a5e:	2500      	movs	r5, #0
 8008a60:	e009      	b.n	8008a76 <RCCEx_PLLSAI2_Config+0x56>
    switch(PllSai2->PLLSAI2Source)
 8008a62:	6803      	ldr	r3, [r0, #0]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d057      	beq.n	8008b18 <RCCEx_PLLSAI2_Config+0xf8>
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	d05c      	beq.n	8008b26 <RCCEx_PLLSAI2_Config+0x106>
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d042      	beq.n	8008af6 <RCCEx_PLLSAI2_Config+0xd6>
 8008a70:	2501      	movs	r5, #1
  if(status == HAL_OK)
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	d1e4      	bne.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
    __HAL_RCC_PLLSAI2_DISABLE();
 8008a76:	4a3c      	ldr	r2, [pc, #240]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008a78:	6813      	ldr	r3, [r2, #0]
 8008a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a7e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008a80:	f7fe fb32 	bl	80070e8 <HAL_GetTick>
 8008a84:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008a86:	4b38      	ldr	r3, [pc, #224]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008a8e:	d005      	beq.n	8008a9c <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a90:	f7fe fb2a 	bl	80070e8 <HAL_GetTick>
 8008a94:	1b83      	subs	r3, r0, r6
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d9f5      	bls.n	8008a86 <RCCEx_PLLSAI2_Config+0x66>
        status = HAL_TIMEOUT;
 8008a9a:	2503      	movs	r5, #3
    if(status == HAL_OK)
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	d1cf      	bne.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	d14e      	bne.n	8008b42 <RCCEx_PLLSAI2_Config+0x122>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008aa4:	4930      	ldr	r1, [pc, #192]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008aa6:	694b      	ldr	r3, [r1, #20]
 8008aa8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab0:	68a0      	ldr	r0, [r4, #8]
 8008ab2:	68e2      	ldr	r2, [r4, #12]
 8008ab4:	0912      	lsrs	r2, r2, #4
 8008ab6:	0452      	lsls	r2, r2, #17
 8008ab8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008abc:	4313      	orrs	r3, r2
 8008abe:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8008ac0:	4a29      	ldr	r2, [pc, #164]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008aca:	f7fe fb0d 	bl	80070e8 <HAL_GetTick>
 8008ace:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ad0:	4b25      	ldr	r3, [pc, #148]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8008ad8:	d105      	bne.n	8008ae6 <RCCEx_PLLSAI2_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ada:	f7fe fb05 	bl	80070e8 <HAL_GetTick>
 8008ade:	1b83      	subs	r3, r0, r6
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d9f5      	bls.n	8008ad0 <RCCEx_PLLSAI2_Config+0xb0>
          status = HAL_TIMEOUT;
 8008ae4:	2503      	movs	r5, #3
      if(status == HAL_OK)
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	d1aa      	bne.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008aea:	4a1f      	ldr	r2, [pc, #124]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008aec:	6953      	ldr	r3, [r2, #20]
 8008aee:	6961      	ldr	r1, [r4, #20]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6153      	str	r3, [r2, #20]
 8008af4:	e7a4      	b.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008af6:	4a1c      	ldr	r2, [pc, #112]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	f012 0f02 	tst.w	r2, #2
 8008afe:	d01e      	beq.n	8008b3e <RCCEx_PLLSAI2_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008b00:	4819      	ldr	r0, [pc, #100]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008b02:	68c2      	ldr	r2, [r0, #12]
 8008b04:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8008b08:	6861      	ldr	r1, [r4, #4]
 8008b0a:	3901      	subs	r1, #1
 8008b0c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60c3      	str	r3, [r0, #12]
 8008b14:	2500      	movs	r5, #0
 8008b16:	e7ac      	b.n	8008a72 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008b18:	4a13      	ldr	r2, [pc, #76]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008b1a:	6812      	ldr	r2, [r2, #0]
 8008b1c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8008b20:	d1ee      	bne.n	8008b00 <RCCEx_PLLSAI2_Config+0xe0>
        status = HAL_ERROR;
 8008b22:	2501      	movs	r5, #1
 8008b24:	e7a5      	b.n	8008a72 <RCCEx_PLLSAI2_Config+0x52>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008b26:	4a10      	ldr	r2, [pc, #64]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008b28:	6812      	ldr	r2, [r2, #0]
 8008b2a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008b2e:	d1e7      	bne.n	8008b00 <RCCEx_PLLSAI2_Config+0xe0>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008b30:	4a0d      	ldr	r2, [pc, #52]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8008b38:	d1e2      	bne.n	8008b00 <RCCEx_PLLSAI2_Config+0xe0>
          status = HAL_ERROR;
 8008b3a:	2501      	movs	r5, #1
 8008b3c:	e799      	b.n	8008a72 <RCCEx_PLLSAI2_Config+0x52>
        status = HAL_ERROR;
 8008b3e:	2501      	movs	r5, #1
 8008b40:	e797      	b.n	8008a72 <RCCEx_PLLSAI2_Config+0x52>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008b42:	4809      	ldr	r0, [pc, #36]	; (8008b68 <RCCEx_PLLSAI2_Config+0x148>)
 8008b44:	6942      	ldr	r2, [r0, #20]
 8008b46:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8008b4a:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8008b4e:	68a1      	ldr	r1, [r4, #8]
 8008b50:	6923      	ldr	r3, [r4, #16]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	3b01      	subs	r3, #1
 8008b56:	065b      	lsls	r3, r3, #25
 8008b58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	6143      	str	r3, [r0, #20]
 8008b60:	e7ae      	b.n	8008ac0 <RCCEx_PLLSAI2_Config+0xa0>
      status = HAL_ERROR;
 8008b62:	2501      	movs	r5, #1
 8008b64:	e76c      	b.n	8008a40 <RCCEx_PLLSAI2_Config+0x20>
 8008b66:	bf00      	nop
 8008b68:	40021000 	.word	0x40021000

08008b6c <HAL_RCCEx_PeriphCLKConfig>:
{
 8008b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b74:	6803      	ldr	r3, [r0, #0]
 8008b76:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8008b7a:	d033      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008b7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b82:	d01f      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8008b84:	d80c      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008b86:	b323      	cbz	r3, 8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8008b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b8c:	d105      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008b8e:	2100      	movs	r1, #0
 8008b90:	3020      	adds	r0, #32
 8008b92:	f7ff ff45 	bl	8008a20 <RCCEx_PLLSAI2_Config>
 8008b96:	4606      	mov	r6, r0
      break;
 8008b98:	e020      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b9a:	2701      	movs	r7, #1
 8008b9c:	463e      	mov	r6, r7
 8008b9e:	e023      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ba0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ba4:	d10b      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ba6:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ba8:	4a60      	ldr	r2, [pc, #384]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008baa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008bae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008bb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bba:	2700      	movs	r7, #0
 8008bbc:	e014      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8008bbe:	2701      	movs	r7, #1
 8008bc0:	463e      	mov	r6, r7
 8008bc2:	e011      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bc4:	4a59      	ldr	r2, [pc, #356]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008bc6:	68d3      	ldr	r3, [r2, #12]
 8008bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bcc:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bce:	2600      	movs	r6, #0
 8008bd0:	e7ea      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	3004      	adds	r0, #4
 8008bd6:	f7ff fe6b 	bl	80088b0 <RCCEx_PLLSAI1_Config>
 8008bda:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8008bdc:	2e00      	cmp	r6, #0
 8008bde:	d0e3      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8008be0:	4637      	mov	r7, r6
 8008be2:	e001      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008be4:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008be6:	463e      	mov	r6, r7
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8008bee:	d030      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008bf0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bf6:	d01f      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8008bf8:	d80d      	bhi.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8008bfa:	b31b      	cbz	r3, 8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8008bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c00:	d106      	bne.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008c02:	2100      	movs	r1, #0
 8008c04:	f104 0020 	add.w	r0, r4, #32
 8008c08:	f7ff ff0a 	bl	8008a20 <RCCEx_PLLSAI2_Config>
 8008c0c:	4606      	mov	r6, r0
      break;
 8008c0e:	e005      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008c10:	2701      	movs	r7, #1
 8008c12:	463e      	mov	r6, r7
 8008c14:	e01d      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8008c16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c1a:	d10a      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8008c1c:	b9c6      	cbnz	r6, 8008c50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c1e:	4a43      	ldr	r2, [pc, #268]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008c20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008c24:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8008c28:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8008c30:	e00f      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8008c32:	2701      	movs	r7, #1
 8008c34:	463e      	mov	r6, r7
 8008c36:	e00c      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008c38:	4a3c      	ldr	r2, [pc, #240]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008c3a:	68d3      	ldr	r3, [r2, #12]
 8008c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c40:	60d3      	str	r3, [r2, #12]
      break;
 8008c42:	e7eb      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008c44:	2100      	movs	r1, #0
 8008c46:	1d20      	adds	r0, r4, #4
 8008c48:	f7ff fe32 	bl	80088b0 <RCCEx_PLLSAI1_Config>
 8008c4c:	4606      	mov	r6, r0
      break;
 8008c4e:	e7e5      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8008c50:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008c58:	d071      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c5a:	4b34      	ldr	r3, [pc, #208]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c5e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008c62:	d14e      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x196>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c64:	4b31      	ldr	r3, [pc, #196]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008c6c:	659a      	str	r2, [r3, #88]	; 0x58
 8008c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008c78:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c7c:	4a2c      	ldr	r2, [pc, #176]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c86:	f7fe fa2f 	bl	80070e8 <HAL_GetTick>
 8008c8a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008c8c:	4b28      	ldr	r3, [pc, #160]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008c94:	d105      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c96:	f7fe fa27 	bl	80070e8 <HAL_GetTick>
 8008c9a:	1b40      	subs	r0, r0, r5
 8008c9c:	2802      	cmp	r0, #2
 8008c9e:	d9f5      	bls.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x120>
        ret = HAL_TIMEOUT;
 8008ca0:	2603      	movs	r6, #3
    if(ret == HAL_OK)
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d146      	bne.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ca6:	4b21      	ldr	r3, [pc, #132]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008cb0:	d016      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8008cb2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d012      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008cba:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008cbc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008cc4:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008cc8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8008ccc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008cd0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8008cd4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008cd8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8008cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ce0:	f013 0f01 	tst.w	r3, #1
 8008ce4:	d110      	bne.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(ret == HAL_OK)
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	f040 8127 	bne.w	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cec:	4a0f      	ldr	r2, [pc, #60]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008cee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8008cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d00:	e019      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    FlagStatus       pwrclkchanged = RESET;
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	e7b9      	b.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x110>
        tickstart = HAL_GetTick();
 8008d08:	f7fe f9ee 	bl	80070e8 <HAL_GetTick>
 8008d0c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d0e:	4b07      	ldr	r3, [pc, #28]	; (8008d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d14:	f013 0f02 	tst.w	r3, #2
 8008d18:	d1e5      	bne.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1a:	f7fe f9e5 	bl	80070e8 <HAL_GetTick>
 8008d1e:	1b40      	subs	r0, r0, r5
 8008d20:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d24:	4298      	cmp	r0, r3
 8008d26:	d9f2      	bls.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
            ret = HAL_TIMEOUT;
 8008d28:	2603      	movs	r6, #3
 8008d2a:	e7dc      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008d2c:	40021000 	.word	0x40021000
 8008d30:	40007000 	.word	0x40007000
      status = ret;
 8008d34:	4637      	mov	r7, r6
    if(pwrclkchanged == SET)
 8008d36:	f1b8 0f00 	cmp.w	r8, #0
 8008d3a:	f040 8100 	bne.w	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	f013 0f01 	tst.w	r3, #1
 8008d44:	d008      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d46:	4a9d      	ldr	r2, [pc, #628]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d48:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d52:	430b      	orrs	r3, r1
 8008d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	f013 0f02 	tst.w	r3, #2
 8008d5e:	d008      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d60:	4a96      	ldr	r2, [pc, #600]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d62:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d66:	f023 030c 	bic.w	r3, r3, #12
 8008d6a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f013 0f04 	tst.w	r3, #4
 8008d78:	d008      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d7a:	4a90      	ldr	r2, [pc, #576]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d7c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d80:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008d84:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d86:	430b      	orrs	r3, r1
 8008d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	f013 0f08 	tst.w	r3, #8
 8008d92:	d008      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008d94:	4a89      	ldr	r2, [pc, #548]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008d96:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008d9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d9e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008da0:	430b      	orrs	r3, r1
 8008da2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	f013 0f10 	tst.w	r3, #16
 8008dac:	d008      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008dae:	4a83      	ldr	r2, [pc, #524]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008db0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008db8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	f013 0f20 	tst.w	r3, #32
 8008dc6:	d008      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x26e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dc8:	4a7c      	ldr	r2, [pc, #496]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008dce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008dd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008dd4:	430b      	orrs	r3, r1
 8008dd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008de0:	d008      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008de2:	4a76      	ldr	r2, [pc, #472]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008de4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008de8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8008dec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008dee:	430b      	orrs	r3, r1
 8008df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008dfa:	d008      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008dfc:	4a6f      	ldr	r2, [pc, #444]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008dfe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e02:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008e06:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e14:	d008      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e16:	4a69      	ldr	r2, [pc, #420]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008e20:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008e22:	430b      	orrs	r3, r1
 8008e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e2e:	d008      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e30:	4a62      	ldr	r2, [pc, #392]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e36:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008e3a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008e48:	d008      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e4a:	4a5c      	ldr	r2, [pc, #368]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e4c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008e54:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e56:	430b      	orrs	r3, r1
 8008e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8008e62:	d00f      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e64:	4a55      	ldr	r2, [pc, #340]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e6a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008e6e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008e70:	430b      	orrs	r3, r1
 8008e72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e7c:	d065      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e82:	d067      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8008e8a:	d00f      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x340>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e8c:	4a4b      	ldr	r2, [pc, #300]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008e8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008e92:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008e96:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008e9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ea4:	d05e      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008ea6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eaa:	d060      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x402>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008eb2:	d00f      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008eb4:	4a41      	ldr	r2, [pc, #260]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008eb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008eba:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8008ebe:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ec6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ecc:	d057      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ed2:	d059      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8008eda:	d00f      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008edc:	4a37      	ldr	r2, [pc, #220]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008ee2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8008ee6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008eee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ef4:	d050      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008efa:	d055      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008f02:	d008      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f04:	4a2d      	ldr	r2, [pc, #180]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f0e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008f10:	430b      	orrs	r3, r1
 8008f12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008f1c:	d009      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f1e:	4a27      	ldr	r2, [pc, #156]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f20:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8008f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8008f32:	4638      	mov	r0, r7
 8008f34:	b002      	add	sp, #8
 8008f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8008f3a:	4637      	mov	r7, r6
 8008f3c:	e6fb      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f3e:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008f40:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f46:	6593      	str	r3, [r2, #88]	; 0x58
 8008f48:	e6f9      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f4a:	68d3      	ldr	r3, [r2, #12]
 8008f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f50:	60d3      	str	r3, [r2, #12]
 8008f52:	e797      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x318>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f54:	2101      	movs	r1, #1
 8008f56:	1d20      	adds	r0, r4, #4
 8008f58:	f7ff fcaa 	bl	80088b0 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d091      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x318>
          status = ret;
 8008f60:	4607      	mov	r7, r0
 8008f62:	e78f      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x318>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f64:	68d3      	ldr	r3, [r2, #12]
 8008f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f6a:	60d3      	str	r3, [r2, #12]
 8008f6c:	e79e      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x340>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f6e:	2101      	movs	r1, #1
 8008f70:	1d20      	adds	r0, r4, #4
 8008f72:	f7ff fc9d 	bl	80088b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d098      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x340>
        status = ret;
 8008f7a:	4607      	mov	r7, r0
 8008f7c:	e796      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x340>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f7e:	68d3      	ldr	r3, [r2, #12]
 8008f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f84:	60d3      	str	r3, [r2, #12]
 8008f86:	e7a5      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f88:	2101      	movs	r1, #1
 8008f8a:	1d20      	adds	r0, r4, #4
 8008f8c:	f7ff fc90 	bl	80088b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d09f      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        status = ret;
 8008f94:	4607      	mov	r7, r0
 8008f96:	e79d      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008f98:	2102      	movs	r1, #2
 8008f9a:	1d20      	adds	r0, r4, #4
 8008f9c:	f7ff fc88 	bl	80088b0 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0ab      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008fa4:	4607      	mov	r7, r0
 8008fa6:	e7a9      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x390>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008fa8:	2102      	movs	r1, #2
 8008faa:	f104 0020 	add.w	r0, r4, #32
 8008fae:	f7ff fd37 	bl	8008a20 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0a2      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x390>
        status = ret;
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	e7a0      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x390>
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000

08008fc0 <HAL_RCCEx_DisableLSECSS>:
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8008fc0:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <HAL_RCCEx_DisableLSECSS+0x18>)
 8008fc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008fc6:	f022 0220 	bic.w	r2, r2, #32
 8008fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8008fce:	699a      	ldr	r2, [r3, #24]
 8008fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008fd4:	619a      	str	r2, [r3, #24]
}
 8008fd6:	4770      	bx	lr
 8008fd8:	40021000 	.word	0x40021000

08008fdc <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008fdc:	4a02      	ldr	r2, [pc, #8]	; (8008fe8 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8008fde:	6813      	ldr	r3, [r2, #0]
 8008fe0:	f043 0304 	orr.w	r3, r3, #4
 8008fe4:	6013      	str	r3, [r2, #0]
}
 8008fe6:	4770      	bx	lr
 8008fe8:	40021000 	.word	0x40021000

08008fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	4688      	mov	r8, r1
 8008ff6:	4617      	mov	r7, r2
 8008ff8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ffa:	f7fe f875 	bl	80070e8 <HAL_GetTick>
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009000:	1a1b      	subs	r3, r3, r0
 8009002:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8009006:	f7fe f86f 	bl	80070e8 <HAL_GetTick>
 800900a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800900c:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <SPI_WaitFlagStateUntilTimeout+0xd0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8009014:	fb09 f303 	mul.w	r3, r9, r3
 8009018:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800901a:	682b      	ldr	r3, [r5, #0]
 800901c:	689c      	ldr	r4, [r3, #8]
 800901e:	ea38 0304 	bics.w	r3, r8, r4
 8009022:	bf0c      	ite	eq
 8009024:	f04f 0c01 	moveq.w	ip, #1
 8009028:	f04f 0c00 	movne.w	ip, #0
 800902c:	45bc      	cmp	ip, r7
 800902e:	d040      	beq.n	80090b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009030:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009034:	d0f1      	beq.n	800901a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009036:	f7fe f857 	bl	80070e8 <HAL_GetTick>
 800903a:	eba0 000a 	sub.w	r0, r0, sl
 800903e:	4548      	cmp	r0, r9
 8009040:	d20a      	bcs.n	8009058 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8009042:	f1b9 0f00 	cmp.w	r9, #0
 8009046:	d007      	beq.n	8009058 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009048:	9a01      	ldr	r2, [sp, #4]
 800904a:	b102      	cbz	r2, 800904e <SPI_WaitFlagStateUntilTimeout+0x62>
 800904c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	3b01      	subs	r3, #1
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	4691      	mov	r9, r2
 8009056:	e7e0      	b.n	800901a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009058:	682a      	ldr	r2, [r5, #0]
 800905a:	6853      	ldr	r3, [r2, #4]
 800905c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009060:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009062:	686b      	ldr	r3, [r5, #4]
 8009064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009068:	d00b      	beq.n	8009082 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800906a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800906c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009070:	d014      	beq.n	800909c <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8009072:	2301      	movs	r3, #1
 8009074:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8009078:	2300      	movs	r3, #0
 800907a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 800907e:	2003      	movs	r0, #3
 8009080:	e018      	b.n	80090b4 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009082:	68ab      	ldr	r3, [r5, #8]
 8009084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009088:	d002      	beq.n	8009090 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800908a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800908e:	d1ec      	bne.n	800906a <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8009090:	682a      	ldr	r2, [r5, #0]
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e7e6      	b.n	800906a <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 800909c:	682a      	ldr	r2, [r5, #0]
 800909e:	6813      	ldr	r3, [r2, #0]
 80090a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	682a      	ldr	r2, [r5, #0]
 80090a8:	6813      	ldr	r3, [r2, #0]
 80090aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e7df      	b.n	8009072 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80090b2:	2000      	movs	r0, #0
}
 80090b4:	b002      	add	sp, #8
 80090b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ba:	bf00      	nop
 80090bc:	20000084 	.word	0x20000084

080090c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c4:	b082      	sub	sp, #8
 80090c6:	4607      	mov	r7, r0
 80090c8:	460d      	mov	r5, r1
 80090ca:	4616      	mov	r6, r2
 80090cc:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80090ce:	f7fe f80b 	bl	80070e8 <HAL_GetTick>
 80090d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d4:	1a1b      	subs	r3, r3, r0
 80090d6:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 80090da:	f7fe f805 	bl	80070e8 <HAL_GetTick>
 80090de:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80090e0:	4b2f      	ldr	r3, [pc, #188]	; (80091a0 <SPI_WaitFifoStateUntilTimeout+0xe0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80090e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80090ec:	0d1b      	lsrs	r3, r3, #20
 80090ee:	fb09 f303 	mul.w	r3, r9, r3
 80090f2:	9300      	str	r3, [sp, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 80090f4:	e002      	b.n	80090fc <SPI_WaitFifoStateUntilTimeout+0x3c>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80090f6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80090fa:	d10f      	bne.n	800911c <SPI_WaitFifoStateUntilTimeout+0x5c>
  while ((hspi->Instance->SR & Fifo) != State)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689c      	ldr	r4, [r3, #8]
 8009100:	ea04 0c05 	and.w	ip, r4, r5
 8009104:	45b4      	cmp	ip, r6
 8009106:	d047      	beq.n	8009198 <SPI_WaitFifoStateUntilTimeout+0xd8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009108:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800910c:	d1f3      	bne.n	80090f6 <SPI_WaitFifoStateUntilTimeout+0x36>
 800910e:	2e00      	cmp	r6, #0
 8009110:	d1f1      	bne.n	80090f6 <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009112:	7b1b      	ldrb	r3, [r3, #12]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	9301      	str	r3, [sp, #4]
      UNUSED(tmpreg);
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	e7ec      	b.n	80090f6 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800911c:	f7fd ffe4 	bl	80070e8 <HAL_GetTick>
 8009120:	eba0 000a 	sub.w	r0, r0, sl
 8009124:	4548      	cmp	r0, r9
 8009126:	d20a      	bcs.n	800913e <SPI_WaitFifoStateUntilTimeout+0x7e>
 8009128:	f1b9 0f00 	cmp.w	r9, #0
 800912c:	d007      	beq.n	800913e <SPI_WaitFifoStateUntilTimeout+0x7e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800912e:	9a00      	ldr	r2, [sp, #0]
 8009130:	b102      	cbz	r2, 8009134 <SPI_WaitFifoStateUntilTimeout+0x74>
 8009132:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	3b01      	subs	r3, #1
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4691      	mov	r9, r2
 800913c:	e7de      	b.n	80090fc <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	6853      	ldr	r3, [r2, #4]
 8009142:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009146:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914e:	d00b      	beq.n	8009168 <SPI_WaitFifoStateUntilTimeout+0xa8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009156:	d014      	beq.n	8009182 <SPI_WaitFifoStateUntilTimeout+0xc2>
        hspi->State = HAL_SPI_STATE_READY;
 8009158:	2301      	movs	r3, #1
 800915a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800915e:	2300      	movs	r3, #0
 8009160:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8009164:	2003      	movs	r0, #3
 8009166:	e018      	b.n	800919a <SPI_WaitFifoStateUntilTimeout+0xda>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800916e:	d002      	beq.n	8009176 <SPI_WaitFifoStateUntilTimeout+0xb6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009174:	d1ec      	bne.n	8009150 <SPI_WaitFifoStateUntilTimeout+0x90>
          __HAL_SPI_DISABLE(hspi);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	6813      	ldr	r3, [r2, #0]
 800917a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	e7e6      	b.n	8009150 <SPI_WaitFifoStateUntilTimeout+0x90>
          SPI_RESET_CRC(hspi);
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	e7df      	b.n	8009158 <SPI_WaitFifoStateUntilTimeout+0x98>
    }
  }

  return HAL_OK;
 8009198:	2000      	movs	r0, #0
}
 800919a:	b002      	add	sp, #8
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	20000084 	.word	0x20000084

080091a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	4604      	mov	r4, r0
 80091aa:	460d      	mov	r5, r1
 80091ac:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091ae:	9200      	str	r2, [sp, #0]
 80091b0:	460b      	mov	r3, r1
 80091b2:	2200      	movs	r2, #0
 80091b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80091b8:	f7ff ff82 	bl	80090c0 <SPI_WaitFifoStateUntilTimeout>
 80091bc:	b9b0      	cbnz	r0, 80091ec <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091be:	9600      	str	r6, [sp, #0]
 80091c0:	462b      	mov	r3, r5
 80091c2:	2200      	movs	r2, #0
 80091c4:	2180      	movs	r1, #128	; 0x80
 80091c6:	4620      	mov	r0, r4
 80091c8:	f7ff ff10 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 80091cc:	b9a8      	cbnz	r0, 80091fa <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80091ce:	9600      	str	r6, [sp, #0]
 80091d0:	462b      	mov	r3, r5
 80091d2:	2200      	movs	r2, #0
 80091d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80091d8:	4620      	mov	r0, r4
 80091da:	f7ff ff71 	bl	80090c0 <SPI_WaitFifoStateUntilTimeout>
 80091de:	b150      	cbz	r0, 80091f6 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80091e2:	f043 0320 	orr.w	r3, r3, #32
 80091e6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80091e8:	2003      	movs	r0, #3
 80091ea:	e004      	b.n	80091f6 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091ec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80091ee:	f043 0320 	orr.w	r3, r3, #32
 80091f2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80091f4:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80091f6:	b002      	add	sp, #8
 80091f8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80091fc:	f043 0320 	orr.w	r3, r3, #32
 8009200:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8009202:	2003      	movs	r0, #3
 8009204:	e7f7      	b.n	80091f6 <SPI_EndRxTxTransaction+0x52>

08009206 <HAL_SPI_MspInit>:
}
 8009206:	4770      	bx	lr

08009208 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009208:	2800      	cmp	r0, #0
 800920a:	f000 8089 	beq.w	8009320 <HAL_SPI_Init+0x118>
{
 800920e:	b510      	push	{r4, lr}
 8009210:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009212:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009214:	b933      	cbnz	r3, 8009224 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009216:	6843      	ldr	r3, [r0, #4]
 8009218:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800921c:	d005      	beq.n	800922a <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800921e:	2300      	movs	r3, #0
 8009220:	61c3      	str	r3, [r0, #28]
 8009222:	e002      	b.n	800922a <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009224:	2300      	movs	r3, #0
 8009226:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009228:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800922a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800922e:	2b00      	cmp	r3, #0
 8009230:	d055      	beq.n	80092de <HAL_SPI_Init+0xd6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009232:	2302      	movs	r3, #2
 8009234:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8009238:	6822      	ldr	r2, [r4, #0]
 800923a:	6813      	ldr	r3, [r2, #0]
 800923c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009240:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009248:	d94f      	bls.n	80092ea <HAL_SPI_Init+0xe2>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800924a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800924c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009250:	d004      	beq.n	800925c <HAL_SPI_Init+0x54>
 8009252:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009256:	d001      	beq.n	800925c <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009258:	2300      	movs	r3, #0
 800925a:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8009262:	68a1      	ldr	r1, [r4, #8]
 8009264:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8009268:	430b      	orrs	r3, r1
 800926a:	6921      	ldr	r1, [r4, #16]
 800926c:	f001 0102 	and.w	r1, r1, #2
 8009270:	430b      	orrs	r3, r1
 8009272:	6961      	ldr	r1, [r4, #20]
 8009274:	f001 0101 	and.w	r1, r1, #1
 8009278:	430b      	orrs	r3, r1
 800927a:	69a1      	ldr	r1, [r4, #24]
 800927c:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8009280:	430b      	orrs	r3, r1
 8009282:	69e1      	ldr	r1, [r4, #28]
 8009284:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8009288:	430b      	orrs	r3, r1
 800928a:	6a21      	ldr	r1, [r4, #32]
 800928c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8009290:	430b      	orrs	r3, r1
 8009292:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009294:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	430b      	orrs	r3, r1
 800929c:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800929e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092a4:	d024      	beq.n	80092f0 <HAL_SPI_Init+0xe8>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80092a6:	8b63      	ldrh	r3, [r4, #26]
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092ae:	f001 0110 	and.w	r1, r1, #16
 80092b2:	430b      	orrs	r3, r1
 80092b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092b6:	f001 0108 	and.w	r1, r1, #8
 80092ba:	430b      	orrs	r3, r1
 80092bc:	68e1      	ldr	r1, [r4, #12]
 80092be:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 80092c2:	430b      	orrs	r3, r1
 80092c4:	6821      	ldr	r1, [r4, #0]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	604b      	str	r3, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d0:	d022      	beq.n	8009318 <HAL_SPI_Init+0x110>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80092d2:	2000      	movs	r0, #0
 80092d4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80092dc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80092de:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff ff8f 	bl	8009206 <HAL_SPI_MspInit>
 80092e8:	e7a3      	b.n	8009232 <HAL_SPI_Init+0x2a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80092ee:	e7ad      	b.n	800924c <HAL_SPI_Init+0x44>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80092f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092f2:	b92b      	cbnz	r3, 8009300 <HAL_SPI_Init+0xf8>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092f4:	68e3      	ldr	r3, [r4, #12]
 80092f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092fa:	d90a      	bls.n	8009312 <HAL_SPI_Init+0x10a>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80092fc:	2302      	movs	r3, #2
 80092fe:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009300:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009302:	2b02      	cmp	r3, #2
 8009304:	d1cf      	bne.n	80092a6 <HAL_SPI_Init+0x9e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	680b      	ldr	r3, [r1, #0]
 800930a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800930e:	600b      	str	r3, [r1, #0]
 8009310:	e7c9      	b.n	80092a6 <HAL_SPI_Init+0x9e>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009312:	2301      	movs	r3, #1
 8009314:	6323      	str	r3, [r4, #48]	; 0x30
 8009316:	e7f3      	b.n	8009300 <HAL_SPI_Init+0xf8>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800931c:	611a      	str	r2, [r3, #16]
 800931e:	e7d8      	b.n	80092d2 <HAL_SPI_Init+0xca>
    return HAL_ERROR;
 8009320:	2001      	movs	r0, #1
}
 8009322:	4770      	bx	lr

08009324 <HAL_SPI_Transmit>:
{
 8009324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009328:	b083      	sub	sp, #12
 800932a:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800932c:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8009330:	2b01      	cmp	r3, #1
 8009332:	f000 810f 	beq.w	8009554 <HAL_SPI_Transmit+0x230>
 8009336:	4604      	mov	r4, r0
 8009338:	4688      	mov	r8, r1
 800933a:	4691      	mov	r9, r2
 800933c:	2301      	movs	r3, #1
 800933e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8009342:	f7fd fed1 	bl	80070e8 <HAL_GetTick>
 8009346:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009348:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 800934c:	b2f6      	uxtb	r6, r6
 800934e:	2e01      	cmp	r6, #1
 8009350:	f040 80ed 	bne.w	800952e <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8009354:	f1b8 0f00 	cmp.w	r8, #0
 8009358:	f000 80ea 	beq.w	8009530 <HAL_SPI_Transmit+0x20c>
 800935c:	f1b9 0f00 	cmp.w	r9, #0
 8009360:	f000 80e6 	beq.w	8009530 <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009364:	2303      	movs	r3, #3
 8009366:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
 800936c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800936e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009372:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009376:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800937a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800937c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009380:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009384:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009386:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009388:	68a3      	ldr	r3, [r4, #8]
 800938a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800938e:	d022      	beq.n	80093d6 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009396:	d029      	beq.n	80093ec <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80093a0:	d103      	bne.n	80093aa <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093b0:	d94d      	bls.n	800944e <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093b2:	6863      	ldr	r3, [r4, #4]
 80093b4:	b113      	cbz	r3, 80093bc <HAL_SPI_Transmit+0x98>
 80093b6:	f1b9 0f01 	cmp.w	r9, #1
 80093ba:	d12e      	bne.n	800941a <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	8812      	ldrh	r2, [r2, #0]
 80093c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80093c6:	3302      	adds	r3, #2
 80093c8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80093ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80093d4:	e021      	b.n	800941a <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093de:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	6813      	ldr	r3, [r2, #0]
 80093e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	e7d1      	b.n	8009390 <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 80093ec:	6822      	ldr	r2, [r4, #0]
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	6813      	ldr	r3, [r2, #0]
 80093fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e7ca      	b.n	8009398 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009402:	f7fd fe71 	bl	80070e8 <HAL_GetTick>
 8009406:	1bc0      	subs	r0, r0, r7
 8009408:	42a8      	cmp	r0, r5
 800940a:	d303      	bcc.n	8009414 <HAL_SPI_Transmit+0xf0>
 800940c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009410:	f040 8098 	bne.w	8009544 <HAL_SPI_Transmit+0x220>
 8009414:	2d00      	cmp	r5, #0
 8009416:	f000 8097 	beq.w	8009548 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 800941a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d066      	beq.n	80094f0 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	689a      	ldr	r2, [r3, #8]
 8009426:	f012 0f02 	tst.w	r2, #2
 800942a:	d0ea      	beq.n	8009402 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800942c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009434:	3302      	adds	r3, #2
 8009436:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009438:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 800943c:	fa1f fc8c 	uxth.w	ip, ip
 8009440:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009444:	fa1f fc8c 	uxth.w	ip, ip
 8009448:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800944c:	e7e5      	b.n	800941a <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	b113      	cbz	r3, 8009458 <HAL_SPI_Transmit+0x134>
 8009452:	f1b9 0f01 	cmp.w	r9, #1
 8009456:	d133      	bne.n	80094c0 <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8009458:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800945a:	b29b      	uxth	r3, r3
 800945c:	2b01      	cmp	r3, #1
 800945e:	d90c      	bls.n	800947a <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009460:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	8812      	ldrh	r2, [r2, #0]
 8009466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800946a:	3302      	adds	r3, #2
 800946c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800946e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b02      	subs	r3, #2
 8009474:	b29b      	uxth	r3, r3
 8009476:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009478:	e022      	b.n	80094c0 <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800947a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8009482:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009484:	3301      	adds	r3, #1
 8009486:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009488:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29b      	uxth	r3, r3
 8009490:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009492:	e015      	b.n	80094c0 <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800949a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800949c:	3301      	adds	r3, #1
 800949e:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80094a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	3b01      	subs	r3, #1
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80094aa:	e009      	b.n	80094c0 <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ac:	f7fd fe1c 	bl	80070e8 <HAL_GetTick>
 80094b0:	1bc0      	subs	r0, r0, r7
 80094b2:	42a8      	cmp	r0, r5
 80094b4:	d302      	bcc.n	80094bc <HAL_SPI_Transmit+0x198>
 80094b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80094ba:	d147      	bne.n	800954c <HAL_SPI_Transmit+0x228>
 80094bc:	2d00      	cmp	r5, #0
 80094be:	d047      	beq.n	8009550 <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 80094c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	b1a3      	cbz	r3, 80094f0 <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	6893      	ldr	r3, [r2, #8]
 80094ca:	f013 0f02 	tst.w	r3, #2
 80094ce:	d0ed      	beq.n	80094ac <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 80094d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d9dd      	bls.n	8009494 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094e0:	3302      	adds	r3, #2
 80094e2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	3b02      	subs	r3, #2
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80094ee:	e7e7      	b.n	80094c0 <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80094f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f6:	d014      	beq.n	8009522 <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094f8:	463a      	mov	r2, r7
 80094fa:	4629      	mov	r1, r5
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff fe51 	bl	80091a4 <SPI_EndRxTxTransaction>
 8009502:	b108      	cbz	r0, 8009508 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009504:	2320      	movs	r3, #32
 8009506:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009508:	68a3      	ldr	r3, [r4, #8]
 800950a:	b933      	cbnz	r3, 800951a <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	9201      	str	r2, [sp, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800951a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800951c:	b943      	cbnz	r3, 8009530 <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800951e:	2600      	movs	r6, #0
 8009520:	e006      	b.n	8009530 <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	e7e4      	b.n	80094f8 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800952e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009530:	2301      	movs	r3, #1
 8009532:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009536:	2300      	movs	r3, #0
 8009538:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800953c:	4630      	mov	r0, r6
 800953e:	b003      	add	sp, #12
 8009540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8009544:	2603      	movs	r6, #3
 8009546:	e7f3      	b.n	8009530 <HAL_SPI_Transmit+0x20c>
 8009548:	2603      	movs	r6, #3
 800954a:	e7f1      	b.n	8009530 <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 800954c:	2603      	movs	r6, #3
 800954e:	e7ef      	b.n	8009530 <HAL_SPI_Transmit+0x20c>
 8009550:	2603      	movs	r6, #3
 8009552:	e7ed      	b.n	8009530 <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8009554:	2602      	movs	r6, #2
 8009556:	e7f1      	b.n	800953c <HAL_SPI_Transmit+0x218>

08009558 <HAL_SPI_TransmitReceive>:
{
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	b085      	sub	sp, #20
 800955e:	461f      	mov	r7, r3
 8009560:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  __IO uint32_t tmpreg = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hspi);
 8009566:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800956a:	2b01      	cmp	r3, #1
 800956c:	f000 81f7 	beq.w	800995e <HAL_SPI_TransmitReceive+0x406>
 8009570:	4604      	mov	r4, r0
 8009572:	468a      	mov	sl, r1
 8009574:	4693      	mov	fp, r2
 8009576:	2301      	movs	r3, #1
 8009578:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800957c:	f7fd fdb4 	bl	80070e8 <HAL_GetTick>
 8009580:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8009582:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8009586:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8009588:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8009590:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009594:	2b01      	cmp	r3, #1
 8009596:	d00a      	beq.n	80095ae <HAL_SPI_TransmitReceive+0x56>
 8009598:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800959c:	f040 81c4 	bne.w	8009928 <HAL_SPI_TransmitReceive+0x3d0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095a0:	68a1      	ldr	r1, [r4, #8]
 80095a2:	2900      	cmp	r1, #0
 80095a4:	f040 81cb 	bne.w	800993e <HAL_SPI_TransmitReceive+0x3e6>
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	f040 81ca 	bne.w	8009942 <HAL_SPI_TransmitReceive+0x3ea>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095ae:	f1ba 0f00 	cmp.w	sl, #0
 80095b2:	f000 81c8 	beq.w	8009946 <HAL_SPI_TransmitReceive+0x3ee>
 80095b6:	f1bb 0f00 	cmp.w	fp, #0
 80095ba:	f000 81c6 	beq.w	800994a <HAL_SPI_TransmitReceive+0x3f2>
 80095be:	2f00      	cmp	r7, #0
 80095c0:	f000 81c5 	beq.w	800994e <HAL_SPI_TransmitReceive+0x3f6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80095c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d002      	beq.n	80095d4 <HAL_SPI_TransmitReceive+0x7c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80095ce:	2305      	movs	r3, #5
 80095d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80095d8:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80095dc:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80095e0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80095e4:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80095e8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80095ea:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80095ec:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80095ee:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f6:	d029      	beq.n	800964c <HAL_SPI_TransmitReceive+0xf4>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80095f8:	68e3      	ldr	r3, [r4, #12]
 80095fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095fe:	d801      	bhi.n	8009604 <HAL_SPI_TransmitReceive+0xac>
 8009600:	2f01      	cmp	r7, #1
 8009602:	d92d      	bls.n	8009660 <HAL_SPI_TransmitReceive+0x108>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009604:	6822      	ldr	r2, [r4, #0]
 8009606:	6853      	ldr	r3, [r2, #4]
 8009608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800960c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009616:	d103      	bne.n	8009620 <HAL_SPI_TransmitReceive+0xc8>
    __HAL_SPI_ENABLE(hspi);
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800961e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009620:	68e3      	ldr	r3, [r4, #12]
 8009622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009626:	d97d      	bls.n	8009724 <HAL_SPI_TransmitReceive+0x1cc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009628:	6863      	ldr	r3, [r4, #4]
 800962a:	b10b      	cbz	r3, 8009630 <HAL_SPI_TransmitReceive+0xd8>
 800962c:	2f01      	cmp	r7, #1
 800962e:	d10b      	bne.n	8009648 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009630:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	8812      	ldrh	r2, [r2, #0]
 8009636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800963a:	3302      	adds	r3, #2
 800963c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800963e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29b      	uxth	r3, r3
 8009646:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009648:	2701      	movs	r7, #1
 800964a:	e042      	b.n	80096d2 <HAL_SPI_TransmitReceive+0x17a>
    SPI_RESET_CRC(hspi);
 800964c:	6813      	ldr	r3, [r2, #0]
 800964e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	e7cb      	b.n	80095f8 <HAL_SPI_TransmitReceive+0xa0>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	6853      	ldr	r3, [r2, #4]
 8009664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009668:	6053      	str	r3, [r2, #4]
 800966a:	e7d0      	b.n	800960e <HAL_SPI_TransmitReceive+0xb6>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800966c:	f018 0f04 	tst.w	r8, #4
 8009670:	d107      	bne.n	8009682 <HAL_SPI_TransmitReceive+0x12a>
 8009672:	f019 0f08 	tst.w	r9, #8
 8009676:	d004      	beq.n	8009682 <HAL_SPI_TransmitReceive+0x12a>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009678:	6822      	ldr	r2, [r4, #0]
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009680:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009682:	6822      	ldr	r2, [r4, #0]
 8009684:	6813      	ldr	r3, [r2, #0]
 8009686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800968a:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 800968c:	2700      	movs	r7, #0
 800968e:	e000      	b.n	8009692 <HAL_SPI_TransmitReceive+0x13a>
 8009690:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	f012 0f01 	tst.w	r2, #1
 800969a:	d011      	beq.n	80096c0 <HAL_SPI_TransmitReceive+0x168>
 800969c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80096a0:	b292      	uxth	r2, r2
 80096a2:	b16a      	cbz	r2, 80096c0 <HAL_SPI_TransmitReceive+0x168>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ac:	3302      	adds	r3, #2
 80096ae:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80096b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80096be:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80096c0:	f7fd fd12 	bl	80070e8 <HAL_GetTick>
 80096c4:	1b80      	subs	r0, r0, r6
 80096c6:	42a8      	cmp	r0, r5
 80096c8:	d303      	bcc.n	80096d2 <HAL_SPI_TransmitReceive+0x17a>
 80096ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 80096ce:	f040 8140 	bne.w	8009952 <HAL_SPI_TransmitReceive+0x3fa>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	b92b      	cbnz	r3, 80096e4 <HAL_SPI_TransmitReceive+0x18c>
 80096d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80096dc:	b29b      	uxth	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 80d1 	beq.w	8009886 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	689a      	ldr	r2, [r3, #8]
 80096e8:	f012 0f02 	tst.w	r2, #2
 80096ec:	d0d1      	beq.n	8009692 <HAL_SPI_TransmitReceive+0x13a>
 80096ee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80096f0:	b292      	uxth	r2, r2
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	d0cd      	beq.n	8009692 <HAL_SPI_TransmitReceive+0x13a>
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	d0cb      	beq.n	8009692 <HAL_SPI_TransmitReceive+0x13a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096fc:	8812      	ldrh	r2, [r2, #0]
 80096fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009702:	3302      	adds	r3, #2
 8009704:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009706:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29b      	uxth	r3, r3
 800970e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009710:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1bb      	bne.n	8009690 <HAL_SPI_TransmitReceive+0x138>
 8009718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800971e:	d0a5      	beq.n	800966c <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 8009720:	2700      	movs	r7, #0
 8009722:	e7b6      	b.n	8009692 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009724:	6863      	ldr	r3, [r4, #4]
 8009726:	b10b      	cbz	r3, 800972c <HAL_SPI_TransmitReceive+0x1d4>
 8009728:	2f01      	cmp	r7, #1
 800972a:	d10f      	bne.n	800974c <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800972c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800972e:	b29b      	uxth	r3, r3
 8009730:	2b01      	cmp	r3, #1
 8009732:	d90d      	bls.n	8009750 <HAL_SPI_TransmitReceive+0x1f8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009734:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	8812      	ldrh	r2, [r2, #0]
 800973a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800973c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800973e:	3302      	adds	r3, #2
 8009740:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009742:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b02      	subs	r3, #2
 8009748:	b29b      	uxth	r3, r3
 800974a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800974c:	2701      	movs	r7, #1
 800974e:	e065      	b.n	800981c <HAL_SPI_TransmitReceive+0x2c4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009750:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8009758:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800975a:	3301      	adds	r3, #1
 800975c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800975e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29b      	uxth	r3, r3
 8009766:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009768:	e7f0      	b.n	800974c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->TxXferCount > 1U)
 800976a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800976c:	b292      	uxth	r2, r2
 800976e:	2a01      	cmp	r2, #1
 8009770:	d913      	bls.n	800979a <HAL_SPI_TransmitReceive+0x242>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009772:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009774:	8812      	ldrh	r2, [r2, #0]
 8009776:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800977a:	3302      	adds	r3, #2
 800977c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800977e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b02      	subs	r3, #2
 8009784:	b29b      	uxth	r3, r3
 8009786:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009788:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800978a:	b29b      	uxth	r3, r3
 800978c:	bb1b      	cbnz	r3, 80097d6 <HAL_SPI_TransmitReceive+0x27e>
 800978e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009794:	d00d      	beq.n	80097b2 <HAL_SPI_TransmitReceive+0x25a>
        txallowed = 0U;
 8009796:	2700      	movs	r7, #0
 8009798:	e052      	b.n	8009840 <HAL_SPI_TransmitReceive+0x2e8>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800979a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 80097a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097a2:	3301      	adds	r3, #1
 80097a4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80097a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80097b0:	e7ea      	b.n	8009788 <HAL_SPI_TransmitReceive+0x230>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80097b2:	f018 0f04 	tst.w	r8, #4
 80097b6:	d107      	bne.n	80097c8 <HAL_SPI_TransmitReceive+0x270>
 80097b8:	f019 0f08 	tst.w	r9, #8
 80097bc:	d004      	beq.n	80097c8 <HAL_SPI_TransmitReceive+0x270>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80097be:	6822      	ldr	r2, [r4, #0]
 80097c0:	6813      	ldr	r3, [r2, #0]
 80097c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097c6:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	6813      	ldr	r3, [r2, #0]
 80097cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097d0:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 80097d2:	2700      	movs	r7, #0
 80097d4:	e034      	b.n	8009840 <HAL_SPI_TransmitReceive+0x2e8>
 80097d6:	2700      	movs	r7, #0
 80097d8:	e032      	b.n	8009840 <HAL_SPI_TransmitReceive+0x2e8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097da:	6822      	ldr	r2, [r4, #0]
 80097dc:	6853      	ldr	r3, [r2, #4]
 80097de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097e2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 80097e4:	2701      	movs	r7, #1
 80097e6:	e00d      	b.n	8009804 <HAL_SPI_TransmitReceive+0x2ac>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80097ea:	7b1b      	ldrb	r3, [r3, #12]
 80097ec:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 80097ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097f0:	3301      	adds	r3, #1
 80097f2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80097f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8009802:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009804:	f7fd fc70 	bl	80070e8 <HAL_GetTick>
 8009808:	1b80      	subs	r0, r0, r6
 800980a:	42a8      	cmp	r0, r5
 800980c:	d303      	bcc.n	8009816 <HAL_SPI_TransmitReceive+0x2be>
 800980e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009812:	f040 80a0 	bne.w	8009956 <HAL_SPI_TransmitReceive+0x3fe>
 8009816:	2d00      	cmp	r5, #0
 8009818:	f000 809f 	beq.w	800995a <HAL_SPI_TransmitReceive+0x402>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800981c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800981e:	b29b      	uxth	r3, r3
 8009820:	b923      	cbnz	r3, 800982c <HAL_SPI_TransmitReceive+0x2d4>
 8009822:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d02c      	beq.n	8009886 <HAL_SPI_TransmitReceive+0x32e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	f012 0f02 	tst.w	r2, #2
 8009834:	d004      	beq.n	8009840 <HAL_SPI_TransmitReceive+0x2e8>
 8009836:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009838:	b292      	uxth	r2, r2
 800983a:	b10a      	cbz	r2, 8009840 <HAL_SPI_TransmitReceive+0x2e8>
 800983c:	2f00      	cmp	r7, #0
 800983e:	d194      	bne.n	800976a <HAL_SPI_TransmitReceive+0x212>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009840:	6823      	ldr	r3, [r4, #0]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	f012 0f01 	tst.w	r2, #1
 8009848:	d0dc      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x2ac>
 800984a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800984e:	b292      	uxth	r2, r2
 8009850:	2a00      	cmp	r2, #0
 8009852:	d0d7      	beq.n	8009804 <HAL_SPI_TransmitReceive+0x2ac>
        if (hspi->RxXferCount > 1U)
 8009854:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8009858:	b292      	uxth	r2, r2
 800985a:	2a01      	cmp	r2, #1
 800985c:	d9c4      	bls.n	80097e8 <HAL_SPI_TransmitReceive+0x290>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009862:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009866:	3302      	adds	r3, #2
 8009868:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800986a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b02      	subs	r3, #2
 8009872:	b29b      	uxth	r3, r3
 8009874:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009878:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b01      	cmp	r3, #1
 8009880:	d9ab      	bls.n	80097da <HAL_SPI_TransmitReceive+0x282>
        txallowed = 1U;
 8009882:	2701      	movs	r7, #1
 8009884:	e7be      	b.n	8009804 <HAL_SPI_TransmitReceive+0x2ac>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800988c:	d017      	beq.n	80098be <HAL_SPI_TransmitReceive+0x366>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	f012 0f10 	tst.w	r2, #16
 8009896:	d045      	beq.n	8009924 <HAL_SPI_TransmitReceive+0x3cc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009898:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800989a:	f042 0202 	orr.w	r2, r2, #2
 800989e:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80098a0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80098a4:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 80098a6:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a8:	4632      	mov	r2, r6
 80098aa:	4629      	mov	r1, r5
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7ff fc79 	bl	80091a4 <SPI_EndRxTxTransaction>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	d039      	beq.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b6:	2320      	movs	r3, #32
 80098b8:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80098ba:	2701      	movs	r7, #1
 80098bc:	e035      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80098be:	9600      	str	r6, [sp, #0]
 80098c0:	462b      	mov	r3, r5
 80098c2:	2201      	movs	r2, #1
 80098c4:	4611      	mov	r1, r2
 80098c6:	4620      	mov	r0, r4
 80098c8:	f7ff fb90 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 80098cc:	b9c8      	cbnz	r0, 8009902 <HAL_SPI_TransmitReceive+0x3aa>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098ce:	68e3      	ldr	r3, [r4, #12]
 80098d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098d4:	d01b      	beq.n	800990e <HAL_SPI_TransmitReceive+0x3b6>
      tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	7b1b      	ldrb	r3, [r3, #12]
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 80098de:	9b03      	ldr	r3, [sp, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80098e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d1d3      	bne.n	800988e <HAL_SPI_TransmitReceive+0x336>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80098e6:	9600      	str	r6, [sp, #0]
 80098e8:	462b      	mov	r3, r5
 80098ea:	2201      	movs	r2, #1
 80098ec:	4611      	mov	r1, r2
 80098ee:	4620      	mov	r0, r4
 80098f0:	f7ff fb7c 	bl	8008fec <SPI_WaitFlagStateUntilTimeout>
 80098f4:	b980      	cbnz	r0, 8009918 <HAL_SPI_TransmitReceive+0x3c0>
        tmpreg = READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	7b1b      	ldrb	r3, [r3, #12]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	e7c5      	b.n	800988e <HAL_SPI_TransmitReceive+0x336>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009902:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009904:	f043 0302 	orr.w	r3, r3, #2
 8009908:	6623      	str	r3, [r4, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800990a:	2703      	movs	r7, #3
      goto error;
 800990c:	e00d      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
      tmpreg = READ_REG(hspi->Instance->DR);
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	e7ba      	b.n	800988e <HAL_SPI_TransmitReceive+0x336>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009918:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800991a:	f043 0302 	orr.w	r3, r3, #2
 800991e:	6623      	str	r3, [r4, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8009920:	2703      	movs	r7, #3
          goto error;
 8009922:	e002      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009924:	2700      	movs	r7, #0
 8009926:	e7bf      	b.n	80098a8 <HAL_SPI_TransmitReceive+0x350>
    errorcode = HAL_BUSY;
 8009928:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 800992a:	2301      	movs	r3, #1
 800992c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009930:	2300      	movs	r3, #0
 8009932:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8009936:	4638      	mov	r0, r7
 8009938:	b005      	add	sp, #20
 800993a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 800993e:	2702      	movs	r7, #2
 8009940:	e7f3      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
 8009942:	2702      	movs	r7, #2
 8009944:	e7f1      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
    errorcode = HAL_ERROR;
 8009946:	2701      	movs	r7, #1
 8009948:	e7ef      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
 800994a:	2701      	movs	r7, #1
 800994c:	e7ed      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
 800994e:	2701      	movs	r7, #1
 8009950:	e7eb      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8009952:	2703      	movs	r7, #3
 8009954:	e7e9      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
        errorcode = HAL_TIMEOUT;
 8009956:	2703      	movs	r7, #3
 8009958:	e7e7      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
 800995a:	2703      	movs	r7, #3
 800995c:	e7e5      	b.n	800992a <HAL_SPI_TransmitReceive+0x3d2>
  __HAL_LOCK(hspi);
 800995e:	2702      	movs	r7, #2
 8009960:	e7e9      	b.n	8009936 <HAL_SPI_TransmitReceive+0x3de>

08009962 <HAL_SPI_GetState>:
  return hspi->State;
 8009962:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8009966:	4770      	bx	lr

08009968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996a:	6a03      	ldr	r3, [r0, #32]
 800996c:	f023 0301 	bic.w	r3, r3, #1
 8009970:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009972:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009974:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009976:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009978:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800997c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009980:	680c      	ldr	r4, [r1, #0]
 8009982:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009984:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009988:	688c      	ldr	r4, [r1, #8]
 800998a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800998c:	4c1d      	ldr	r4, [pc, #116]	; (8009a04 <TIM_OC1_SetConfig+0x9c>)
 800998e:	42a0      	cmp	r0, r4
 8009990:	d00f      	beq.n	80099b2 <TIM_OC1_SetConfig+0x4a>
 8009992:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8009996:	42a0      	cmp	r0, r4
 8009998:	d00b      	beq.n	80099b2 <TIM_OC1_SetConfig+0x4a>
 800999a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 800999e:	42a0      	cmp	r0, r4
 80099a0:	d007      	beq.n	80099b2 <TIM_OC1_SetConfig+0x4a>
 80099a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80099a6:	42a0      	cmp	r0, r4
 80099a8:	d003      	beq.n	80099b2 <TIM_OC1_SetConfig+0x4a>
 80099aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80099ae:	42a0      	cmp	r0, r4
 80099b0:	d105      	bne.n	80099be <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099b2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099b6:	68cc      	ldr	r4, [r1, #12]
 80099b8:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ba:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099be:	4c11      	ldr	r4, [pc, #68]	; (8009a04 <TIM_OC1_SetConfig+0x9c>)
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d00f      	beq.n	80099e4 <TIM_OC1_SetConfig+0x7c>
 80099c4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d00b      	beq.n	80099e4 <TIM_OC1_SetConfig+0x7c>
 80099cc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80099d0:	42a0      	cmp	r0, r4
 80099d2:	d007      	beq.n	80099e4 <TIM_OC1_SetConfig+0x7c>
 80099d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80099d8:	42a0      	cmp	r0, r4
 80099da:	d003      	beq.n	80099e4 <TIM_OC1_SetConfig+0x7c>
 80099dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80099e0:	42a0      	cmp	r0, r4
 80099e2:	d107      	bne.n	80099f4 <TIM_OC1_SetConfig+0x8c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099e4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099e8:	694c      	ldr	r4, [r1, #20]
 80099ea:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099ee:	698d      	ldr	r5, [r1, #24]
 80099f0:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099f8:	684a      	ldr	r2, [r1, #4]
 80099fa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099fc:	6203      	str	r3, [r0, #32]
}
 80099fe:	bc30      	pop	{r4, r5}
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40012c00 	.word	0x40012c00

08009a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a0a:	6a03      	ldr	r3, [r0, #32]
 8009a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a16:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009a1c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a20:	680d      	ldr	r5, [r1, #0]
 8009a22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a28:	688d      	ldr	r5, [r1, #8]
 8009a2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a2e:	4d18      	ldr	r5, [pc, #96]	; (8009a90 <TIM_OC3_SetConfig+0x88>)
 8009a30:	42a8      	cmp	r0, r5
 8009a32:	d003      	beq.n	8009a3c <TIM_OC3_SetConfig+0x34>
 8009a34:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a38:	42a8      	cmp	r0, r5
 8009a3a:	d106      	bne.n	8009a4a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a40:	68cd      	ldr	r5, [r1, #12]
 8009a42:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a4a:	4d11      	ldr	r5, [pc, #68]	; (8009a90 <TIM_OC3_SetConfig+0x88>)
 8009a4c:	42a8      	cmp	r0, r5
 8009a4e:	d00f      	beq.n	8009a70 <TIM_OC3_SetConfig+0x68>
 8009a50:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009a54:	42a8      	cmp	r0, r5
 8009a56:	d00b      	beq.n	8009a70 <TIM_OC3_SetConfig+0x68>
 8009a58:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009a5c:	42a8      	cmp	r0, r5
 8009a5e:	d007      	beq.n	8009a70 <TIM_OC3_SetConfig+0x68>
 8009a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a64:	42a8      	cmp	r0, r5
 8009a66:	d003      	beq.n	8009a70 <TIM_OC3_SetConfig+0x68>
 8009a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009a6c:	42a8      	cmp	r0, r5
 8009a6e:	d107      	bne.n	8009a80 <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a70:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a74:	694c      	ldr	r4, [r1, #20]
 8009a76:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a7a:	698c      	ldr	r4, [r1, #24]
 8009a7c:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a80:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a82:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a84:	684a      	ldr	r2, [r1, #4]
 8009a86:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a88:	6203      	str	r3, [r0, #32]
}
 8009a8a:	bc30      	pop	{r4, r5}
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	40012c00 	.word	0x40012c00

08009a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a96:	6a03      	ldr	r3, [r0, #32]
 8009a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aa2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009aa4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009aa8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aac:	680d      	ldr	r5, [r1, #0]
 8009aae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ab2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ab6:	688d      	ldr	r5, [r1, #8]
 8009ab8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009abc:	4d0f      	ldr	r5, [pc, #60]	; (8009afc <TIM_OC4_SetConfig+0x68>)
 8009abe:	42a8      	cmp	r0, r5
 8009ac0:	d00f      	beq.n	8009ae2 <TIM_OC4_SetConfig+0x4e>
 8009ac2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009ac6:	42a8      	cmp	r0, r5
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_OC4_SetConfig+0x4e>
 8009aca:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009ace:	42a8      	cmp	r0, r5
 8009ad0:	d007      	beq.n	8009ae2 <TIM_OC4_SetConfig+0x4e>
 8009ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ad6:	42a8      	cmp	r0, r5
 8009ad8:	d003      	beq.n	8009ae2 <TIM_OC4_SetConfig+0x4e>
 8009ada:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009ade:	42a8      	cmp	r0, r5
 8009ae0:	d104      	bne.n	8009aec <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ae2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ae6:	694d      	ldr	r5, [r1, #20]
 8009ae8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aee:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009af0:	684a      	ldr	r2, [r1, #4]
 8009af2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009af4:	6203      	str	r3, [r0, #32]
}
 8009af6:	bc30      	pop	{r4, r5}
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	40012c00 	.word	0x40012c00

08009b00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b02:	6a03      	ldr	r3, [r0, #32]
 8009b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b0c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b0e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009b14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b18:	680d      	ldr	r5, [r1, #0]
 8009b1a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b20:	688d      	ldr	r5, [r1, #8]
 8009b22:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b26:	4d0f      	ldr	r5, [pc, #60]	; (8009b64 <TIM_OC5_SetConfig+0x64>)
 8009b28:	42a8      	cmp	r0, r5
 8009b2a:	d00f      	beq.n	8009b4c <TIM_OC5_SetConfig+0x4c>
 8009b2c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b30:	42a8      	cmp	r0, r5
 8009b32:	d00b      	beq.n	8009b4c <TIM_OC5_SetConfig+0x4c>
 8009b34:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009b38:	42a8      	cmp	r0, r5
 8009b3a:	d007      	beq.n	8009b4c <TIM_OC5_SetConfig+0x4c>
 8009b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b40:	42a8      	cmp	r0, r5
 8009b42:	d003      	beq.n	8009b4c <TIM_OC5_SetConfig+0x4c>
 8009b44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009b48:	42a8      	cmp	r0, r5
 8009b4a:	d104      	bne.n	8009b56 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b4c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b50:	694d      	ldr	r5, [r1, #20]
 8009b52:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b56:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b58:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b5a:	684a      	ldr	r2, [r1, #4]
 8009b5c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5e:	6203      	str	r3, [r0, #32]
}
 8009b60:	bc30      	pop	{r4, r5}
 8009b62:	4770      	bx	lr
 8009b64:	40012c00 	.word	0x40012c00

08009b68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b68:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b6a:	6a03      	ldr	r3, [r0, #32]
 8009b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009b70:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b72:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b76:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009b7c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b80:	680d      	ldr	r5, [r1, #0]
 8009b82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b8a:	688d      	ldr	r5, [r1, #8]
 8009b8c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b90:	4d0f      	ldr	r5, [pc, #60]	; (8009bd0 <TIM_OC6_SetConfig+0x68>)
 8009b92:	42a8      	cmp	r0, r5
 8009b94:	d00f      	beq.n	8009bb6 <TIM_OC6_SetConfig+0x4e>
 8009b96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009b9a:	42a8      	cmp	r0, r5
 8009b9c:	d00b      	beq.n	8009bb6 <TIM_OC6_SetConfig+0x4e>
 8009b9e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8009ba2:	42a8      	cmp	r0, r5
 8009ba4:	d007      	beq.n	8009bb6 <TIM_OC6_SetConfig+0x4e>
 8009ba6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009baa:	42a8      	cmp	r0, r5
 8009bac:	d003      	beq.n	8009bb6 <TIM_OC6_SetConfig+0x4e>
 8009bae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009bb2:	42a8      	cmp	r0, r5
 8009bb4:	d104      	bne.n	8009bc0 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bb6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bba:	694d      	ldr	r5, [r1, #20]
 8009bbc:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bc0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bc2:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bc4:	684a      	ldr	r2, [r1, #4]
 8009bc6:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc8:	6203      	str	r3, [r0, #32]
}
 8009bca:	bc30      	pop	{r4, r5}
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40012c00 	.word	0x40012c00

08009bd4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8009bd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d136      	bne.n	8009c4c <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 8009bde:	2302      	movs	r3, #2
 8009be0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009be4:	6802      	ldr	r2, [r0, #0]
 8009be6:	68d3      	ldr	r3, [r2, #12]
 8009be8:	f043 0301 	orr.w	r3, r3, #1
 8009bec:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	4a19      	ldr	r2, [pc, #100]	; (8009c58 <HAL_TIM_Base_Start_IT+0x84>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d01c      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bfa:	d019      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009bfc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d015      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009c04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d011      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009c0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00d      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009c14:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d009      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
 8009c1c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d005      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	f042 0201 	orr.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c30:	6899      	ldr	r1, [r3, #8]
 8009c32:	4a0a      	ldr	r2, [pc, #40]	; (8009c5c <HAL_TIM_Base_Start_IT+0x88>)
 8009c34:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c36:	2a06      	cmp	r2, #6
 8009c38:	d00a      	beq.n	8009c50 <HAL_TIM_Base_Start_IT+0x7c>
 8009c3a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009c3e:	d009      	beq.n	8009c54 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8009c48:	2000      	movs	r0, #0
 8009c4a:	4770      	bx	lr
    return HAL_ERROR;
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	4770      	bx	lr
  return HAL_OK;
 8009c50:	2000      	movs	r0, #0
 8009c52:	4770      	bx	lr
 8009c54:	2000      	movs	r0, #0
}
 8009c56:	4770      	bx	lr
 8009c58:	40012c00 	.word	0x40012c00
 8009c5c:	00010007 	.word	0x00010007

08009c60 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8009c60:	290c      	cmp	r1, #12
 8009c62:	d814      	bhi.n	8009c8e <HAL_TIM_ReadCapturedValue+0x2e>
 8009c64:	e8df f001 	tbb	[pc, r1]
 8009c68:	13131307 	.word	0x13131307
 8009c6c:	1313130a 	.word	0x1313130a
 8009c70:	1313130d 	.word	0x1313130d
 8009c74:	10          	.byte	0x10
 8009c75:	00          	.byte	0x00
      tmpreg =  htim->Instance->CCR1;
 8009c76:	6803      	ldr	r3, [r0, #0]
 8009c78:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8009c7a:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8009c7c:	6803      	ldr	r3, [r0, #0]
 8009c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8009c80:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8009c82:	6803      	ldr	r3, [r0, #0]
 8009c84:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8009c86:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8009c88:	6803      	ldr	r3, [r0, #0]
 8009c8a:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8009c8c:	4770      	bx	lr
  switch (Channel)
 8009c8e:	2000      	movs	r0, #0
}
 8009c90:	4770      	bx	lr

08009c92 <HAL_TIM_IC_CaptureCallback>:
}
 8009c92:	4770      	bx	lr

08009c94 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8009c94:	4770      	bx	lr

08009c96 <HAL_TIM_TriggerCallback>:
}
 8009c96:	4770      	bx	lr

08009c98 <HAL_TIM_IRQHandler>:
{
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c9c:	6803      	ldr	r3, [r0, #0]
 8009c9e:	691a      	ldr	r2, [r3, #16]
 8009ca0:	f012 0f02 	tst.w	r2, #2
 8009ca4:	d011      	beq.n	8009cca <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	f012 0f02 	tst.w	r2, #2
 8009cac:	d00d      	beq.n	8009cca <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cae:	f06f 0202 	mvn.w	r2, #2
 8009cb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cb8:	6803      	ldr	r3, [r0, #0]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	f013 0f03 	tst.w	r3, #3
 8009cc0:	d079      	beq.n	8009db6 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009cc2:	f7ff ffe6 	bl	8009c92 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	691a      	ldr	r2, [r3, #16]
 8009cce:	f012 0f04 	tst.w	r2, #4
 8009cd2:	d012      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	f012 0f04 	tst.w	r2, #4
 8009cda:	d00e      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cdc:	f06f 0204 	mvn.w	r2, #4
 8009ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009cee:	d068      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7ff ffce 	bl	8009c92 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	691a      	ldr	r2, [r3, #16]
 8009cfe:	f012 0f08 	tst.w	r2, #8
 8009d02:	d012      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	f012 0f08 	tst.w	r2, #8
 8009d0a:	d00e      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d0c:	f06f 0208 	mvn.w	r2, #8
 8009d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d12:	2304      	movs	r3, #4
 8009d14:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	f013 0f03 	tst.w	r3, #3
 8009d1e:	d057      	beq.n	8009dd0 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d20:	4620      	mov	r0, r4
 8009d22:	f7ff ffb6 	bl	8009c92 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d26:	2300      	movs	r3, #0
 8009d28:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	691a      	ldr	r2, [r3, #16]
 8009d2e:	f012 0f10 	tst.w	r2, #16
 8009d32:	d012      	beq.n	8009d5a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d34:	68da      	ldr	r2, [r3, #12]
 8009d36:	f012 0f10 	tst.w	r2, #16
 8009d3a:	d00e      	beq.n	8009d5a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d3c:	f06f 0210 	mvn.w	r2, #16
 8009d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d42:	2308      	movs	r3, #8
 8009d44:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009d4e:	d046      	beq.n	8009dde <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff ff9e 	bl	8009c92 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d56:	2300      	movs	r3, #0
 8009d58:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	f012 0f01 	tst.w	r2, #1
 8009d62:	d003      	beq.n	8009d6c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	f012 0f01 	tst.w	r2, #1
 8009d6a:	d13f      	bne.n	8009dec <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d7c:	d13d      	bne.n	8009dfa <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	691a      	ldr	r2, [r3, #16]
 8009d82:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009d86:	d003      	beq.n	8009d90 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009d8e:	d13b      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	691a      	ldr	r2, [r3, #16]
 8009d94:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009d98:	d003      	beq.n	8009da2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009da0:	d139      	bne.n	8009e16 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	691a      	ldr	r2, [r3, #16]
 8009da6:	f012 0f20 	tst.w	r2, #32
 8009daa:	d003      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	f012 0f20 	tst.w	r2, #32
 8009db2:	d137      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x18c>
}
 8009db4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db6:	f7fb fd67 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f7ff ff6a 	bl	8009c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dc0:	e781      	b.n	8009cc6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7fb fd60 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7ff ff63 	bl	8009c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dce:	e792      	b.n	8009cf6 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7fb fd59 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f7ff ff5c 	bl	8009c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009ddc:	e7a3      	b.n	8009d26 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7fb fd52 	bl	8005888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de4:	4620      	mov	r0, r4
 8009de6:	f7ff ff55 	bl	8009c94 <HAL_TIM_PWM_PulseFinishedCallback>
 8009dea:	e7b4      	b.n	8009d56 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dec:	f06f 0201 	mvn.w	r2, #1
 8009df0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009df2:	4620      	mov	r0, r4
 8009df4:	f7fb fd5e 	bl	80058b4 <HAL_TIM_PeriodElapsedCallback>
 8009df8:	e7b8      	b.n	8009d6c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dfe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 fab8 	bl	800a376 <HAL_TIMEx_BreakCallback>
 8009e06:	e7ba      	b.n	8009d7e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 fab2 	bl	800a378 <HAL_TIMEx_Break2Callback>
 8009e14:	e7bc      	b.n	8009d90 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7ff ff3a 	bl	8009c96 <HAL_TIM_TriggerCallback>
 8009e22:	e7be      	b.n	8009da2 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e24:	f06f 0220 	mvn.w	r2, #32
 8009e28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f000 faa2 	bl	800a374 <HAL_TIMEx_CommutCallback>
}
 8009e30:	e7c0      	b.n	8009db4 <HAL_TIM_IRQHandler+0x11c>
	...

08009e34 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8009e34:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e36:	4a30      	ldr	r2, [pc, #192]	; (8009ef8 <TIM_Base_SetConfig+0xc4>)
 8009e38:	4290      	cmp	r0, r2
 8009e3a:	d012      	beq.n	8009e62 <TIM_Base_SetConfig+0x2e>
 8009e3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009e40:	d00f      	beq.n	8009e62 <TIM_Base_SetConfig+0x2e>
 8009e42:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009e46:	4290      	cmp	r0, r2
 8009e48:	d00b      	beq.n	8009e62 <TIM_Base_SetConfig+0x2e>
 8009e4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e4e:	4290      	cmp	r0, r2
 8009e50:	d007      	beq.n	8009e62 <TIM_Base_SetConfig+0x2e>
 8009e52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e56:	4290      	cmp	r0, r2
 8009e58:	d003      	beq.n	8009e62 <TIM_Base_SetConfig+0x2e>
 8009e5a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009e5e:	4290      	cmp	r0, r2
 8009e60:	d103      	bne.n	8009e6a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009e66:	684a      	ldr	r2, [r1, #4]
 8009e68:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e6a:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <TIM_Base_SetConfig+0xc4>)
 8009e6c:	4290      	cmp	r0, r2
 8009e6e:	d01e      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009e74:	d01b      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009e7a:	4290      	cmp	r0, r2
 8009e7c:	d017      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e82:	4290      	cmp	r0, r2
 8009e84:	d013      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e8a:	4290      	cmp	r0, r2
 8009e8c:	d00f      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e8e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8009e92:	4290      	cmp	r0, r2
 8009e94:	d00b      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e96:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8009e9a:	4290      	cmp	r0, r2
 8009e9c:	d007      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ea2:	4290      	cmp	r0, r2
 8009ea4:	d003      	beq.n	8009eae <TIM_Base_SetConfig+0x7a>
 8009ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009eaa:	4290      	cmp	r0, r2
 8009eac:	d103      	bne.n	8009eb6 <TIM_Base_SetConfig+0x82>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eb2:	68ca      	ldr	r2, [r1, #12]
 8009eb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eba:	694a      	ldr	r2, [r1, #20]
 8009ebc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009ebe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ec0:	688b      	ldr	r3, [r1, #8]
 8009ec2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009ec4:	680b      	ldr	r3, [r1, #0]
 8009ec6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ec8:	4b0b      	ldr	r3, [pc, #44]	; (8009ef8 <TIM_Base_SetConfig+0xc4>)
 8009eca:	4298      	cmp	r0, r3
 8009ecc:	d00f      	beq.n	8009eee <TIM_Base_SetConfig+0xba>
 8009ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed2:	4298      	cmp	r0, r3
 8009ed4:	d00b      	beq.n	8009eee <TIM_Base_SetConfig+0xba>
 8009ed6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009eda:	4298      	cmp	r0, r3
 8009edc:	d007      	beq.n	8009eee <TIM_Base_SetConfig+0xba>
 8009ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ee2:	4298      	cmp	r0, r3
 8009ee4:	d003      	beq.n	8009eee <TIM_Base_SetConfig+0xba>
 8009ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009eea:	4298      	cmp	r0, r3
 8009eec:	d101      	bne.n	8009ef2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	6143      	str	r3, [r0, #20]
}
 8009ef6:	4770      	bx	lr
 8009ef8:	40012c00 	.word	0x40012c00

08009efc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009efc:	b360      	cbz	r0, 8009f58 <HAL_TIM_Base_Init+0x5c>
{
 8009efe:	b510      	push	{r4, lr}
 8009f00:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f06:	b313      	cbz	r3, 8009f4e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f0e:	4621      	mov	r1, r4
 8009f10:	f851 0b04 	ldr.w	r0, [r1], #4
 8009f14:	f7ff ff8e 	bl	8009e34 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009f22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009f2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009f42:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009f4a:	2000      	movs	r0, #0
}
 8009f4c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009f4e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009f52:	f7fc fc1f 	bl	8006794 <HAL_TIM_Base_MspInit>
 8009f56:	e7d7      	b.n	8009f08 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8009f58:	2001      	movs	r0, #1
}
 8009f5a:	4770      	bx	lr

08009f5c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8009f5c:	b360      	cbz	r0, 8009fb8 <HAL_TIM_OC_Init+0x5c>
{
 8009f5e:	b510      	push	{r4, lr}
 8009f60:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8009f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f66:	b313      	cbz	r3, 8009fae <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f851 0b04 	ldr.w	r0, [r1], #4
 8009f74:	f7ff ff5e 	bl	8009e34 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009f82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009f86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009f8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009fa2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009faa:	2000      	movs	r0, #0
}
 8009fac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009fae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8009fb2:	f7fc fc27 	bl	8006804 <HAL_TIM_OC_MspInit>
 8009fb6:	e7d7      	b.n	8009f68 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8009fb8:	2001      	movs	r0, #1
}
 8009fba:	4770      	bx	lr

08009fbc <TIM_OC2_SetConfig>:
{
 8009fbc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fbe:	6a03      	ldr	r3, [r0, #32]
 8009fc0:	f023 0310 	bic.w	r3, r3, #16
 8009fc4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009fc6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8009fc8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8009fca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fcc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009fd0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fd4:	680d      	ldr	r5, [r1, #0]
 8009fd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8009fda:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fde:	688d      	ldr	r5, [r1, #8]
 8009fe0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fe4:	4d17      	ldr	r5, [pc, #92]	; (800a044 <TIM_OC2_SetConfig+0x88>)
 8009fe6:	42a8      	cmp	r0, r5
 8009fe8:	d003      	beq.n	8009ff2 <TIM_OC2_SetConfig+0x36>
 8009fea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8009fee:	42a8      	cmp	r0, r5
 8009ff0:	d106      	bne.n	800a000 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ff6:	68cd      	ldr	r5, [r1, #12]
 8009ff8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a000:	4d10      	ldr	r5, [pc, #64]	; (800a044 <TIM_OC2_SetConfig+0x88>)
 800a002:	42a8      	cmp	r0, r5
 800a004:	d00f      	beq.n	800a026 <TIM_OC2_SetConfig+0x6a>
 800a006:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800a00a:	42a8      	cmp	r0, r5
 800a00c:	d00b      	beq.n	800a026 <TIM_OC2_SetConfig+0x6a>
 800a00e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800a012:	42a8      	cmp	r0, r5
 800a014:	d007      	beq.n	800a026 <TIM_OC2_SetConfig+0x6a>
 800a016:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a01a:	42a8      	cmp	r0, r5
 800a01c:	d003      	beq.n	800a026 <TIM_OC2_SetConfig+0x6a>
 800a01e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800a022:	42a8      	cmp	r0, r5
 800a024:	d107      	bne.n	800a036 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a026:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a02a:	694c      	ldr	r4, [r1, #20]
 800a02c:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a030:	698c      	ldr	r4, [r1, #24]
 800a032:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800a036:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800a038:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800a03a:	684a      	ldr	r2, [r1, #4]
 800a03c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800a03e:	6203      	str	r3, [r0, #32]
}
 800a040:	bc30      	pop	{r4, r5}
 800a042:	4770      	bx	lr
 800a044:	40012c00 	.word	0x40012c00

0800a048 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800a048:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d02e      	beq.n	800a0ae <HAL_TIM_OC_ConfigChannel+0x66>
{
 800a050:	b510      	push	{r4, lr}
 800a052:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800a054:	2301      	movs	r3, #1
 800a056:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800a05a:	2a14      	cmp	r2, #20
 800a05c:	d80f      	bhi.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
 800a05e:	e8df f002 	tbb	[pc, r2]
 800a062:	0e0b      	.short	0x0e0b
 800a064:	0e120e0e 	.word	0x0e120e0e
 800a068:	0e160e0e 	.word	0x0e160e0e
 800a06c:	0e1a0e0e 	.word	0x0e1a0e0e
 800a070:	0e1e0e0e 	.word	0x0e1e0e0e
 800a074:	0e0e      	.short	0x0e0e
 800a076:	22          	.byte	0x22
 800a077:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a078:	6800      	ldr	r0, [r0, #0]
 800a07a:	f7ff fc75 	bl	8009968 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800a07e:	2000      	movs	r0, #0
 800a080:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800a084:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a086:	6800      	ldr	r0, [r0, #0]
 800a088:	f7ff ff98 	bl	8009fbc <TIM_OC2_SetConfig>
      break;
 800a08c:	e7f7      	b.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a08e:	6800      	ldr	r0, [r0, #0]
 800a090:	f7ff fcba 	bl	8009a08 <TIM_OC3_SetConfig>
      break;
 800a094:	e7f3      	b.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a096:	6800      	ldr	r0, [r0, #0]
 800a098:	f7ff fcfc 	bl	8009a94 <TIM_OC4_SetConfig>
      break;
 800a09c:	e7ef      	b.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a09e:	6800      	ldr	r0, [r0, #0]
 800a0a0:	f7ff fd2e 	bl	8009b00 <TIM_OC5_SetConfig>
      break;
 800a0a4:	e7eb      	b.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0a6:	6800      	ldr	r0, [r0, #0]
 800a0a8:	f7ff fd5e 	bl	8009b68 <TIM_OC6_SetConfig>
      break;
 800a0ac:	e7e7      	b.n	800a07e <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 800a0ae:	2002      	movs	r0, #2
}
 800a0b0:	4770      	bx	lr

0800a0b2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0b2:	f001 011f 	and.w	r1, r1, #31
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0bc:	6a03      	ldr	r3, [r0, #32]
 800a0be:	ea23 030c 	bic.w	r3, r3, ip
 800a0c2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0c4:	6a03      	ldr	r3, [r0, #32]
 800a0c6:	fa02 f101 	lsl.w	r1, r2, r1
 800a0ca:	430b      	orrs	r3, r1
 800a0cc:	6203      	str	r3, [r0, #32]
}
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_TIM_OC_Start_IT>:
{
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0d4:	4608      	mov	r0, r1
 800a0d6:	b9c1      	cbnz	r1, 800a10a <HAL_TIM_OC_Start_IT+0x3a>
 800a0d8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	bf18      	it	ne
 800a0e2:	2301      	movne	r3, #1
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f040 80ba 	bne.w	800a25e <HAL_TIM_OC_Start_IT+0x18e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d138      	bne.n	800a160 <HAL_TIM_OC_Start_IT+0x90>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  switch (Channel)
 800a0f4:	280c      	cmp	r0, #12
 800a0f6:	d854      	bhi.n	800a1a2 <HAL_TIM_OC_Start_IT+0xd2>
 800a0f8:	e8df f000 	tbb	[pc, r0]
 800a0fc:	5353534e 	.word	0x5353534e
 800a100:	53535391 	.word	0x53535391
 800a104:	53535397 	.word	0x53535397
 800a108:	9d          	.byte	0x9d
 800a109:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a10a:	2904      	cmp	r1, #4
 800a10c:	d00c      	beq.n	800a128 <HAL_TIM_OC_Start_IT+0x58>
 800a10e:	2908      	cmp	r1, #8
 800a110:	d011      	beq.n	800a136 <HAL_TIM_OC_Start_IT+0x66>
 800a112:	290c      	cmp	r1, #12
 800a114:	d016      	beq.n	800a144 <HAL_TIM_OC_Start_IT+0x74>
 800a116:	2910      	cmp	r1, #16
 800a118:	d01b      	beq.n	800a152 <HAL_TIM_OC_Start_IT+0x82>
 800a11a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	3b01      	subs	r3, #1
 800a122:	bf18      	it	ne
 800a124:	2301      	movne	r3, #1
 800a126:	e7dd      	b.n	800a0e4 <HAL_TIM_OC_Start_IT+0x14>
 800a128:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	3b01      	subs	r3, #1
 800a130:	bf18      	it	ne
 800a132:	2301      	movne	r3, #1
 800a134:	e7d6      	b.n	800a0e4 <HAL_TIM_OC_Start_IT+0x14>
 800a136:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	3b01      	subs	r3, #1
 800a13e:	bf18      	it	ne
 800a140:	2301      	movne	r3, #1
 800a142:	e7cf      	b.n	800a0e4 <HAL_TIM_OC_Start_IT+0x14>
 800a144:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	3b01      	subs	r3, #1
 800a14c:	bf18      	it	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	e7c8      	b.n	800a0e4 <HAL_TIM_OC_Start_IT+0x14>
 800a152:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a156:	b2db      	uxtb	r3, r3
 800a158:	3b01      	subs	r3, #1
 800a15a:	bf18      	it	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	e7c1      	b.n	800a0e4 <HAL_TIM_OC_Start_IT+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a160:	2804      	cmp	r0, #4
 800a162:	d009      	beq.n	800a178 <HAL_TIM_OC_Start_IT+0xa8>
 800a164:	2808      	cmp	r0, #8
 800a166:	d00b      	beq.n	800a180 <HAL_TIM_OC_Start_IT+0xb0>
 800a168:	280c      	cmp	r0, #12
 800a16a:	d00d      	beq.n	800a188 <HAL_TIM_OC_Start_IT+0xb8>
 800a16c:	2810      	cmp	r0, #16
 800a16e:	d00f      	beq.n	800a190 <HAL_TIM_OC_Start_IT+0xc0>
 800a170:	2302      	movs	r3, #2
 800a172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a176:	e7bd      	b.n	800a0f4 <HAL_TIM_OC_Start_IT+0x24>
 800a178:	2302      	movs	r3, #2
 800a17a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a17e:	e7b9      	b.n	800a0f4 <HAL_TIM_OC_Start_IT+0x24>
 800a180:	2302      	movs	r3, #2
 800a182:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a186:	e7b5      	b.n	800a0f4 <HAL_TIM_OC_Start_IT+0x24>
 800a188:	2302      	movs	r3, #2
 800a18a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a18e:	e7b1      	b.n	800a0f4 <HAL_TIM_OC_Start_IT+0x24>
 800a190:	2302      	movs	r3, #2
 800a192:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a196:	e7ad      	b.n	800a0f4 <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a198:	6822      	ldr	r2, [r4, #0]
 800a19a:	68d3      	ldr	r3, [r2, #12]
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	6820      	ldr	r0, [r4, #0]
 800a1a8:	f7ff ff83 	bl	800a0b2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	4a2f      	ldr	r2, [pc, #188]	; (800a26c <HAL_TIM_OC_Start_IT+0x19c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00f      	beq.n	800a1d4 <HAL_TIM_OC_Start_IT+0x104>
 800a1b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00b      	beq.n	800a1d4 <HAL_TIM_OC_Start_IT+0x104>
 800a1bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d007      	beq.n	800a1d4 <HAL_TIM_OC_Start_IT+0x104>
 800a1c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <HAL_TIM_OC_Start_IT+0x104>
 800a1cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d103      	bne.n	800a1dc <HAL_TIM_OC_Start_IT+0x10c>
    __HAL_TIM_MOE_ENABLE(htim);
 800a1d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1da:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	4a23      	ldr	r2, [pc, #140]	; (800a26c <HAL_TIM_OC_Start_IT+0x19c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d02e      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a1e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e8:	d02b      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a1ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d027      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a1f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d023      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a1fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d01f      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a202:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a206:	4293      	cmp	r3, r2
 800a208:	d01b      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
 800a20a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a20e:	4293      	cmp	r3, r2
 800a210:	d017      	beq.n	800a242 <HAL_TIM_OC_Start_IT+0x172>
    __HAL_TIM_ENABLE(htim);
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a21a:	2000      	movs	r0, #0
 800a21c:	e020      	b.n	800a260 <HAL_TIM_OC_Start_IT+0x190>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a21e:	6822      	ldr	r2, [r4, #0]
 800a220:	68d3      	ldr	r3, [r2, #12]
 800a222:	f043 0304 	orr.w	r3, r3, #4
 800a226:	60d3      	str	r3, [r2, #12]
      break;
 800a228:	e7bb      	b.n	800a1a2 <HAL_TIM_OC_Start_IT+0xd2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a22a:	6822      	ldr	r2, [r4, #0]
 800a22c:	68d3      	ldr	r3, [r2, #12]
 800a22e:	f043 0308 	orr.w	r3, r3, #8
 800a232:	60d3      	str	r3, [r2, #12]
      break;
 800a234:	e7b5      	b.n	800a1a2 <HAL_TIM_OC_Start_IT+0xd2>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	68d3      	ldr	r3, [r2, #12]
 800a23a:	f043 0310 	orr.w	r3, r3, #16
 800a23e:	60d3      	str	r3, [r2, #12]
      break;
 800a240:	e7af      	b.n	800a1a2 <HAL_TIM_OC_Start_IT+0xd2>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a242:	6899      	ldr	r1, [r3, #8]
 800a244:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <HAL_TIM_OC_Start_IT+0x1a0>)
 800a246:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a248:	2a06      	cmp	r2, #6
 800a24a:	d00a      	beq.n	800a262 <HAL_TIM_OC_Start_IT+0x192>
 800a24c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a250:	d009      	beq.n	800a266 <HAL_TIM_OC_Start_IT+0x196>
      __HAL_TIM_ENABLE(htim);
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	f042 0201 	orr.w	r2, r2, #1
 800a258:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a25a:	2000      	movs	r0, #0
 800a25c:	e000      	b.n	800a260 <HAL_TIM_OC_Start_IT+0x190>
    return HAL_ERROR;
 800a25e:	2001      	movs	r0, #1
}
 800a260:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800a262:	2000      	movs	r0, #0
 800a264:	e7fc      	b.n	800a260 <HAL_TIM_OC_Start_IT+0x190>
 800a266:	2000      	movs	r0, #0
 800a268:	e7fa      	b.n	800a260 <HAL_TIM_OC_Start_IT+0x190>
 800a26a:	bf00      	nop
 800a26c:	40012c00 	.word	0x40012c00
 800a270:	00010007 	.word	0x00010007

0800a274 <HAL_TIM_OC_Stop_IT>:
{
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4605      	mov	r5, r0
 800a278:	460c      	mov	r4, r1
  switch (Channel)
 800a27a:	290c      	cmp	r1, #12
 800a27c:	d80d      	bhi.n	800a29a <HAL_TIM_OC_Stop_IT+0x26>
 800a27e:	e8df f001 	tbb	[pc, r1]
 800a282:	0c07      	.short	0x0c07
 800a284:	0c480c0c 	.word	0x0c480c0c
 800a288:	0c4e0c0c 	.word	0x0c4e0c0c
 800a28c:	0c0c      	.short	0x0c0c
 800a28e:	54          	.byte	0x54
 800a28f:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a290:	6802      	ldr	r2, [r0, #0]
 800a292:	68d3      	ldr	r3, [r2, #12]
 800a294:	f023 0302 	bic.w	r3, r3, #2
 800a298:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a29a:	2200      	movs	r2, #0
 800a29c:	4621      	mov	r1, r4
 800a29e:	6828      	ldr	r0, [r5, #0]
 800a2a0:	f7ff ff07 	bl	800a0b2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	4a32      	ldr	r2, [pc, #200]	; (800a370 <HAL_TIM_OC_Stop_IT+0xfc>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d00f      	beq.n	800a2cc <HAL_TIM_OC_Stop_IT+0x58>
 800a2ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00b      	beq.n	800a2cc <HAL_TIM_OC_Stop_IT+0x58>
 800a2b4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d007      	beq.n	800a2cc <HAL_TIM_OC_Stop_IT+0x58>
 800a2bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <HAL_TIM_OC_Stop_IT+0x58>
 800a2c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d10d      	bne.n	800a2e8 <HAL_TIM_OC_Stop_IT+0x74>
    __HAL_TIM_MOE_DISABLE(htim);
 800a2cc:	6a19      	ldr	r1, [r3, #32]
 800a2ce:	f241 1211 	movw	r2, #4369	; 0x1111
 800a2d2:	4211      	tst	r1, r2
 800a2d4:	d108      	bne.n	800a2e8 <HAL_TIM_OC_Stop_IT+0x74>
 800a2d6:	6a19      	ldr	r1, [r3, #32]
 800a2d8:	f240 4244 	movw	r2, #1092	; 0x444
 800a2dc:	4211      	tst	r1, r2
 800a2de:	d103      	bne.n	800a2e8 <HAL_TIM_OC_Stop_IT+0x74>
 800a2e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2e6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	6a19      	ldr	r1, [r3, #32]
 800a2ec:	f241 1211 	movw	r2, #4369	; 0x1111
 800a2f0:	4211      	tst	r1, r2
 800a2f2:	d108      	bne.n	800a306 <HAL_TIM_OC_Stop_IT+0x92>
 800a2f4:	6a19      	ldr	r1, [r3, #32]
 800a2f6:	f240 4244 	movw	r2, #1092	; 0x444
 800a2fa:	4211      	tst	r1, r2
 800a2fc:	d103      	bne.n	800a306 <HAL_TIM_OC_Stop_IT+0x92>
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	f022 0201 	bic.w	r2, r2, #1
 800a304:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a306:	b9b4      	cbnz	r4, 800a336 <HAL_TIM_OC_Stop_IT+0xc2>
 800a308:	2301      	movs	r3, #1
 800a30a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
}
 800a30e:	2000      	movs	r0, #0
 800a310:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a312:	6802      	ldr	r2, [r0, #0]
 800a314:	68d3      	ldr	r3, [r2, #12]
 800a316:	f023 0304 	bic.w	r3, r3, #4
 800a31a:	60d3      	str	r3, [r2, #12]
      break;
 800a31c:	e7bd      	b.n	800a29a <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a31e:	6802      	ldr	r2, [r0, #0]
 800a320:	68d3      	ldr	r3, [r2, #12]
 800a322:	f023 0308 	bic.w	r3, r3, #8
 800a326:	60d3      	str	r3, [r2, #12]
      break;
 800a328:	e7b7      	b.n	800a29a <HAL_TIM_OC_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a32a:	6802      	ldr	r2, [r0, #0]
 800a32c:	68d3      	ldr	r3, [r2, #12]
 800a32e:	f023 0310 	bic.w	r3, r3, #16
 800a332:	60d3      	str	r3, [r2, #12]
      break;
 800a334:	e7b1      	b.n	800a29a <HAL_TIM_OC_Stop_IT+0x26>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a336:	2c04      	cmp	r4, #4
 800a338:	d009      	beq.n	800a34e <HAL_TIM_OC_Stop_IT+0xda>
 800a33a:	2c08      	cmp	r4, #8
 800a33c:	d00b      	beq.n	800a356 <HAL_TIM_OC_Stop_IT+0xe2>
 800a33e:	2c0c      	cmp	r4, #12
 800a340:	d00d      	beq.n	800a35e <HAL_TIM_OC_Stop_IT+0xea>
 800a342:	2c10      	cmp	r4, #16
 800a344:	d00f      	beq.n	800a366 <HAL_TIM_OC_Stop_IT+0xf2>
 800a346:	2301      	movs	r3, #1
 800a348:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
 800a34c:	e7df      	b.n	800a30e <HAL_TIM_OC_Stop_IT+0x9a>
 800a34e:	2301      	movs	r3, #1
 800a350:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 800a354:	e7db      	b.n	800a30e <HAL_TIM_OC_Stop_IT+0x9a>
 800a356:	2301      	movs	r3, #1
 800a358:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800a35c:	e7d7      	b.n	800a30e <HAL_TIM_OC_Stop_IT+0x9a>
 800a35e:	2301      	movs	r3, #1
 800a360:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
 800a364:	e7d3      	b.n	800a30e <HAL_TIM_OC_Stop_IT+0x9a>
 800a366:	2301      	movs	r3, #1
 800a368:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 800a36c:	e7cf      	b.n	800a30e <HAL_TIM_OC_Stop_IT+0x9a>
 800a36e:	bf00      	nop
 800a370:	40012c00 	.word	0x40012c00

0800a374 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a374:	4770      	bx	lr

0800a376 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a376:	4770      	bx	lr

0800a378 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a378:	4770      	bx	lr
	...

0800a37c <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800a37c:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a37e:	3301      	adds	r3, #1
 800a380:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <USB_CoreReset+0x38>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d811      	bhi.n	800a3aa <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a386:	6902      	ldr	r2, [r0, #16]
 800a388:	2a00      	cmp	r2, #0
 800a38a:	daf8      	bge.n	800a37e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a38c:	6903      	ldr	r3, [r0, #16]
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	6103      	str	r3, [r0, #16]
  count = 0U;
 800a394:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800a396:	3301      	adds	r3, #1
 800a398:	4a06      	ldr	r2, [pc, #24]	; (800a3b4 <USB_CoreReset+0x38>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d807      	bhi.n	800a3ae <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a39e:	6902      	ldr	r2, [r0, #16]
 800a3a0:	f012 0f01 	tst.w	r2, #1
 800a3a4:	d1f7      	bne.n	800a396 <USB_CoreReset+0x1a>

  return HAL_OK;
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a3aa:	2003      	movs	r0, #3
 800a3ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a3ae:	2003      	movs	r0, #3
}
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	00030d40 	.word	0x00030d40

0800a3b8 <USB_CoreInit>:
{
 800a3b8:	b084      	sub	sp, #16
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	4604      	mov	r4, r0
 800a3be:	f10d 0c0c 	add.w	ip, sp, #12
 800a3c2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a3c6:	68c3      	ldr	r3, [r0, #12]
 800a3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3cc:	60c3      	str	r3, [r0, #12]
  ret = USB_CoreReset(USBx);
 800a3ce:	f7ff ffd5 	bl	800a37c <USB_CoreReset>
  if (cfg.battery_charging_enable == 0U)
 800a3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3d4:	b93b      	cbnz	r3, 800a3e6 <USB_CoreInit+0x2e>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a3d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3dc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800a3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e2:	b004      	add	sp, #16
 800a3e4:	4770      	bx	lr
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a3e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800a3ee:	e7f6      	b.n	800a3de <USB_CoreInit+0x26>

0800a3f0 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800a3f0:	2a02      	cmp	r2, #2
 800a3f2:	d00a      	beq.n	800a40a <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3f4:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3f6:	68c2      	ldr	r2, [r0, #12]
 800a3f8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800a3fc:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3fe:	68c3      	ldr	r3, [r0, #12]
 800a400:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800a404:	60c3      	str	r3, [r0, #12]
}
 800a406:	2000      	movs	r0, #0
 800a408:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a40a:	4b23      	ldr	r3, [pc, #140]	; (800a498 <USB_SetTurnaroundTime+0xa8>)
 800a40c:	440b      	add	r3, r1
 800a40e:	4a23      	ldr	r2, [pc, #140]	; (800a49c <USB_SetTurnaroundTime+0xac>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d92f      	bls.n	800a474 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a414:	4b22      	ldr	r3, [pc, #136]	; (800a4a0 <USB_SetTurnaroundTime+0xb0>)
 800a416:	440b      	add	r3, r1
 800a418:	4a22      	ldr	r2, [pc, #136]	; (800a4a4 <USB_SetTurnaroundTime+0xb4>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d92c      	bls.n	800a478 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a41e:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800a422:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 800a426:	4a20      	ldr	r2, [pc, #128]	; (800a4a8 <USB_SetTurnaroundTime+0xb8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d927      	bls.n	800a47c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a42c:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800a430:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 800a434:	4a1d      	ldr	r2, [pc, #116]	; (800a4ac <USB_SetTurnaroundTime+0xbc>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d322      	bcc.n	800a480 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <USB_SetTurnaroundTime+0xc0>)
 800a43c:	440b      	add	r3, r1
 800a43e:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <USB_SetTurnaroundTime+0xc4>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d91f      	bls.n	800a484 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a444:	4b1c      	ldr	r3, [pc, #112]	; (800a4b8 <USB_SetTurnaroundTime+0xc8>)
 800a446:	440b      	add	r3, r1
 800a448:	4a1c      	ldr	r2, [pc, #112]	; (800a4bc <USB_SetTurnaroundTime+0xcc>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d31c      	bcc.n	800a488 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a44e:	4b1c      	ldr	r3, [pc, #112]	; (800a4c0 <USB_SetTurnaroundTime+0xd0>)
 800a450:	440b      	add	r3, r1
 800a452:	4a1c      	ldr	r2, [pc, #112]	; (800a4c4 <USB_SetTurnaroundTime+0xd4>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d319      	bcc.n	800a48c <USB_SetTurnaroundTime+0x9c>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a458:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 800a45c:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800a460:	4a19      	ldr	r2, [pc, #100]	; (800a4c8 <USB_SetTurnaroundTime+0xd8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d314      	bcc.n	800a490 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a466:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <USB_SetTurnaroundTime+0xdc>)
 800a468:	440b      	add	r3, r1
 800a46a:	4a19      	ldr	r2, [pc, #100]	; (800a4d0 <USB_SetTurnaroundTime+0xe0>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d211      	bcs.n	800a494 <USB_SetTurnaroundTime+0xa4>
      UsbTrd = 0x7U;
 800a470:	2107      	movs	r1, #7
 800a472:	e7c0      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800a474:	210f      	movs	r1, #15
 800a476:	e7be      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 800a478:	210e      	movs	r1, #14
 800a47a:	e7bc      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 800a47c:	210d      	movs	r1, #13
 800a47e:	e7ba      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800a480:	210c      	movs	r1, #12
 800a482:	e7b8      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800a484:	210b      	movs	r1, #11
 800a486:	e7b6      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 800a488:	210a      	movs	r1, #10
 800a48a:	e7b4      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 800a48c:	2109      	movs	r1, #9
 800a48e:	e7b2      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800a490:	2108      	movs	r1, #8
 800a492:	e7b0      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 800a494:	2106      	movs	r1, #6
 800a496:	e7ae      	b.n	800a3f6 <USB_SetTurnaroundTime+0x6>
 800a498:	ff275340 	.word	0xff275340
 800a49c:	000c34ff 	.word	0x000c34ff
 800a4a0:	ff1b1e40 	.word	0xff1b1e40
 800a4a4:	000f423f 	.word	0x000f423f
 800a4a8:	00124f7f 	.word	0x00124f7f
 800a4ac:	0013d620 	.word	0x0013d620
 800a4b0:	fee5b660 	.word	0xfee5b660
 800a4b4:	0016e35f 	.word	0x0016e35f
 800a4b8:	feced300 	.word	0xfeced300
 800a4bc:	001b7740 	.word	0x001b7740
 800a4c0:	feb35bc0 	.word	0xfeb35bc0
 800a4c4:	002191c0 	.word	0x002191c0
 800a4c8:	00387520 	.word	0x00387520
 800a4cc:	fe5954e0 	.word	0xfe5954e0
 800a4d0:	00419ce0 	.word	0x00419ce0

0800a4d4 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4d4:	6883      	ldr	r3, [r0, #8]
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	6083      	str	r3, [r0, #8]
}
 800a4dc:	2000      	movs	r0, #0
 800a4de:	4770      	bx	lr

0800a4e0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4e0:	6883      	ldr	r3, [r0, #8]
 800a4e2:	f023 0301 	bic.w	r3, r3, #1
 800a4e6:	6083      	str	r3, [r0, #8]
}
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	4770      	bx	lr

0800a4ec <USB_SetCurrentMode>:
{
 800a4ec:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4ee:	68c3      	ldr	r3, [r0, #12]
 800a4f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a4f4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800a4f6:	2901      	cmp	r1, #1
 800a4f8:	d009      	beq.n	800a50e <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800a4fa:	b969      	cbnz	r1, 800a518 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a4fc:	68c3      	ldr	r3, [r0, #12]
 800a4fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a502:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800a504:	2032      	movs	r0, #50	; 0x32
 800a506:	f7fb fd5f 	bl	8005fc8 <HAL_Delay>
  return HAL_OK;
 800a50a:	2000      	movs	r0, #0
}
 800a50c:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a50e:	68c3      	ldr	r3, [r0, #12]
 800a510:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a514:	60c3      	str	r3, [r0, #12]
 800a516:	e7f5      	b.n	800a504 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800a518:	2001      	movs	r0, #1
 800a51a:	e7f7      	b.n	800a50c <USB_SetCurrentMode+0x20>

0800a51c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a51c:	0189      	lsls	r1, r1, #6
 800a51e:	f041 0120 	orr.w	r1, r1, #32
 800a522:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800a524:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a526:	3301      	adds	r3, #1
 800a528:	4a05      	ldr	r2, [pc, #20]	; (800a540 <USB_FlushTxFifo+0x24>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d805      	bhi.n	800a53a <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a52e:	6902      	ldr	r2, [r0, #16]
 800a530:	f012 0f20 	tst.w	r2, #32
 800a534:	d1f7      	bne.n	800a526 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800a536:	2000      	movs	r0, #0
 800a538:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a53a:	2003      	movs	r0, #3
}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	00030d40 	.word	0x00030d40

0800a544 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a544:	2310      	movs	r3, #16
 800a546:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 800a548:	2300      	movs	r3, #0
    if (++count > 200000U)
 800a54a:	3301      	adds	r3, #1
 800a54c:	4a05      	ldr	r2, [pc, #20]	; (800a564 <USB_FlushRxFifo+0x20>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d805      	bhi.n	800a55e <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a552:	6902      	ldr	r2, [r0, #16]
 800a554:	f012 0f10 	tst.w	r2, #16
 800a558:	d1f7      	bne.n	800a54a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800a55a:	2000      	movs	r0, #0
 800a55c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800a55e:	2003      	movs	r0, #3
}
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	00030d40 	.word	0x00030d40

0800a568 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800a568:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800a56c:	4319      	orrs	r1, r3
 800a56e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800a572:	2000      	movs	r0, #0
 800a574:	4770      	bx	lr
	...

0800a578 <USB_DevInit>:
{
 800a578:	b084      	sub	sp, #16
 800a57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57e:	4604      	mov	r4, r0
 800a580:	a807      	add	r0, sp, #28
 800a582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800a586:	2300      	movs	r3, #0
 800a588:	e006      	b.n	800a598 <USB_DevInit+0x20>
    USBx->DIEPTXF[i] = 0U;
 800a58a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800a58e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a592:	2100      	movs	r1, #0
 800a594:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800a596:	3301      	adds	r3, #1
 800a598:	2b0e      	cmp	r3, #14
 800a59a:	d9f6      	bls.n	800a58a <USB_DevInit+0x12>
  if (cfg.vbus_sensing_enable == 0U)
 800a59c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800a59e:	bb8f      	cbnz	r7, 800a604 <USB_DevInit+0x8c>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5a0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800a5a4:	f043 0302 	orr.w	r3, r3, #2
 800a5a8:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a5b2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ba:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c2:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a5ca:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 800a5ce:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800a5d2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a5d6:	2103      	movs	r1, #3
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7ff ffc5 	bl	800a568 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5de:	2110      	movs	r1, #16
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff ff9b 	bl	800a51c <USB_FlushTxFifo>
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	b108      	cbz	r0, 800a5ee <USB_DevInit+0x76>
    ret = HAL_ERROR;
 800a5ea:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7ff ffa8 	bl	800a544 <USB_FlushRxFifo>
 800a5f4:	b108      	cbz	r0, 800a5fa <USB_DevInit+0x82>
    ret = HAL_ERROR;
 800a5f6:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5fe:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a600:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a602:	e00f      	b.n	800a624 <USB_DevInit+0xac>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a604:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a60a:	63a3      	str	r3, [r4, #56]	; 0x38
 800a60c:	e7da      	b.n	800a5c4 <USB_DevInit+0x4c>
      if (i == 0U)
 800a60e:	b9c3      	cbnz	r3, 800a642 <USB_DevInit+0xca>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a610:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800a614:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a618:	2200      	movs	r2, #0
 800a61a:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a61c:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a620:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a622:	3301      	adds	r3, #1
 800a624:	9907      	ldr	r1, [sp, #28]
 800a626:	4299      	cmp	r1, r3
 800a628:	d910      	bls.n	800a64c <USB_DevInit+0xd4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a62a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800a62e:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800a632:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800a636:	2800      	cmp	r0, #0
 800a638:	dbe9      	blt.n	800a60e <USB_DevInit+0x96>
      USBx_INEP(i)->DIEPCTL = 0U;
 800a63a:	2000      	movs	r0, #0
 800a63c:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a640:	e7ea      	b.n	800a618 <USB_DevInit+0xa0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a646:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800a64a:	e7e5      	b.n	800a618 <USB_DevInit+0xa0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a64c:	2300      	movs	r3, #0
 800a64e:	e00a      	b.n	800a666 <USB_DevInit+0xee>
      if (i == 0U)
 800a650:	b1c3      	cbz	r3, 800a684 <USB_DevInit+0x10c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a652:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
 800a656:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a65a:	2200      	movs	r2, #0
 800a65c:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a65e:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800a662:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a664:	3301      	adds	r3, #1
 800a666:	4299      	cmp	r1, r3
 800a668:	d911      	bls.n	800a68e <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a66a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800a66e:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800a672:	f8d2 6b00 	ldr.w	r6, [r2, #2816]	; 0xb00
 800a676:	2e00      	cmp	r6, #0
 800a678:	dbea      	blt.n	800a650 <USB_DevInit+0xd8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a67a:	f04f 0c00 	mov.w	ip, #0
 800a67e:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 800a682:	e7ea      	b.n	800a65a <USB_DevInit+0xe2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a684:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800a688:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
 800a68c:	e7e5      	b.n	800a65a <USB_DevInit+0xe2>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a68e:	692b      	ldr	r3, [r5, #16]
 800a690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a694:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a69a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800a69e:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6a0:	69a3      	ldr	r3, [r4, #24]
 800a6a2:	f043 0310 	orr.w	r3, r3, #16
 800a6a6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a6a8:	69a2      	ldr	r2, [r4, #24]
 800a6aa:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <USB_DevInit+0x160>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800a6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6b2:	b11b      	cbz	r3, 800a6bc <USB_DevInit+0x144>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a6b4:	69a3      	ldr	r3, [r4, #24]
 800a6b6:	f043 0308 	orr.w	r3, r3, #8
 800a6ba:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800a6bc:	2f01      	cmp	r7, #1
 800a6be:	d004      	beq.n	800a6ca <USB_DevInit+0x152>
}
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	b004      	add	sp, #16
 800a6c8:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a6ca:	69a3      	ldr	r3, [r4, #24]
 800a6cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6d0:	f043 0304 	orr.w	r3, r3, #4
 800a6d4:	61a3      	str	r3, [r4, #24]
 800a6d6:	e7f3      	b.n	800a6c0 <USB_DevInit+0x148>
 800a6d8:	803c3800 	.word	0x803c3800

0800a6dc <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6dc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800a6e0:	f003 0306 	and.w	r3, r3, #6
  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d005      	beq.n	800a6f4 <USB_GetDevSpeed+0x18>
 800a6e8:	2b06      	cmp	r3, #6
 800a6ea:	d001      	beq.n	800a6f0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 800a6ec:	200f      	movs	r0, #15
}
 800a6ee:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 800a6f0:	2002      	movs	r0, #2
 800a6f2:	4770      	bx	lr
 800a6f4:	2002      	movs	r0, #2
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_ActivateEndpoint>:
{
 800a6f8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a6fa:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 800a6fe:	784b      	ldrb	r3, [r1, #1]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d023      	beq.n	800a74c <USB_ActivateEndpoint+0x54>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a704:	f500 6e00 	add.w	lr, r0, #2048	; 0x800
 800a708:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 800a70c:	f00c 040f 	and.w	r4, ip, #15
 800a710:	2201      	movs	r2, #1
 800a712:	40a2      	lsls	r2, r4
 800a714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a718:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a71c:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a720:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a724:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a728:	d10e      	bne.n	800a748 <USB_ActivateEndpoint+0x50>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a72a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a72e:	688a      	ldr	r2, [r1, #8]
 800a730:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a734:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a736:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800a73a:	4313      	orrs	r3, r2
 800a73c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a744:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a748:	2000      	movs	r0, #0
 800a74a:	bd10      	pop	{r4, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a74c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a750:	f00c 0e0f 	and.w	lr, ip, #15
 800a754:	fa03 f30e 	lsl.w	r3, r3, lr
 800a758:	b29b      	uxth	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a760:	eb00 104c 	add.w	r0, r0, ip, lsl #5
 800a764:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a768:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a76c:	d1ec      	bne.n	800a748 <USB_ActivateEndpoint+0x50>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a76e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800a772:	688a      	ldr	r2, [r1, #8]
 800a774:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a778:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a77a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a77e:	ea42 5c8c 	orr.w	ip, r2, ip, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a782:	ea43 030c 	orr.w	r3, r3, ip
 800a786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a78e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800a792:	e7d9      	b.n	800a748 <USB_ActivateEndpoint+0x50>

0800a794 <USB_DeactivateEndpoint>:
{
 800a794:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 800a796:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a798:	784a      	ldrb	r2, [r1, #1]
 800a79a:	2a01      	cmp	r2, #1
 800a79c:	d026      	beq.n	800a7ec <USB_DeactivateEndpoint+0x58>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a79e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a7a2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	db52      	blt.n	800a850 <USB_DeactivateEndpoint+0xbc>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7aa:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 800a7ae:	780a      	ldrb	r2, [r1, #0]
 800a7b0:	f002 020f 	and.w	r2, r2, #15
 800a7b4:	f04f 0c01 	mov.w	ip, #1
 800a7b8:	fa0c f202 	lsl.w	r2, ip, r2
 800a7bc:	ea24 4202 	bic.w	r2, r4, r2, lsl #16
 800a7c0:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7c4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a7c8:	7809      	ldrb	r1, [r1, #0]
 800a7ca:	f001 010f 	and.w	r1, r1, #15
 800a7ce:	fa0c fc01 	lsl.w	ip, ip, r1
 800a7d2:	ea22 420c 	bic.w	r2, r2, ip, lsl #16
 800a7d6:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7da:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800a7de:	4a23      	ldr	r2, [pc, #140]	; (800a86c <USB_DeactivateEndpoint+0xd8>)
 800a7e0:	400a      	ands	r2, r1
 800a7e2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	bc30      	pop	{r4, r5}
 800a7ea:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7ec:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a7f0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	db1e      	blt.n	800a836 <USB_DeactivateEndpoint+0xa2>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7f8:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800a7fc:	780a      	ldrb	r2, [r1, #0]
 800a7fe:	f002 020f 	and.w	r2, r2, #15
 800a802:	2401      	movs	r4, #1
 800a804:	fa04 f202 	lsl.w	r2, r4, r2
 800a808:	b292      	uxth	r2, r2
 800a80a:	ea25 0202 	bic.w	r2, r5, r2
 800a80e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a812:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 800a816:	7809      	ldrb	r1, [r1, #0]
 800a818:	f001 010f 	and.w	r1, r1, #15
 800a81c:	408c      	lsls	r4, r1
 800a81e:	b2a4      	uxth	r4, r4
 800a820:	ea22 0404 	bic.w	r4, r2, r4
 800a824:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a828:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800a82c:	4a10      	ldr	r2, [pc, #64]	; (800a870 <USB_DeactivateEndpoint+0xdc>)
 800a82e:	400a      	ands	r2, r1
 800a830:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a834:	e7d7      	b.n	800a7e6 <USB_DeactivateEndpoint+0x52>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a836:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a83a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a83e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a842:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a84a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800a84e:	e7d3      	b.n	800a7f8 <USB_DeactivateEndpoint+0x64>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a850:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a854:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a858:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a85c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a864:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800a868:	e79f      	b.n	800a7aa <USB_DeactivateEndpoint+0x16>
 800a86a:	bf00      	nop
 800a86c:	eff37800 	.word	0xeff37800
 800a870:	ec337800 	.word	0xec337800

0800a874 <USB_EP0StartXfer>:
  uint32_t epnum = (uint32_t)ep->num;
 800a874:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a876:	784a      	ldrb	r2, [r1, #1]
 800a878:	2a01      	cmp	r2, #1
 800a87a:	d023      	beq.n	800a8c4 <USB_EP0StartXfer+0x50>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a87c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800a880:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800a884:	691a      	ldr	r2, [r3, #16]
 800a886:	0cd2      	lsrs	r2, r2, #19
 800a888:	04d2      	lsls	r2, r2, #19
 800a88a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a88c:	691a      	ldr	r2, [r3, #16]
 800a88e:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 800a892:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 800a896:	611a      	str	r2, [r3, #16]
    if (ep->xfer_len > 0U)
 800a898:	694a      	ldr	r2, [r1, #20]
 800a89a:	b10a      	cbz	r2, 800a8a0 <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 800a89c:	688a      	ldr	r2, [r1, #8]
 800a89e:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a8a0:	691a      	ldr	r2, [r3, #16]
 800a8a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a8a6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	6889      	ldr	r1, [r1, #8]
 800a8ac:	f3c1 0112 	ubfx	r1, r1, #0, #19
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a8b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800a8b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	4770      	bx	lr
{
 800a8c4:	b430      	push	{r4, r5}
    if (ep->xfer_len == 0U)
 800a8c6:	694a      	ldr	r2, [r1, #20]
 800a8c8:	bb62      	cbnz	r2, 800a924 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8ca:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a8ce:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a8d2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a8d6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a8da:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8de:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a8e2:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a8e6:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8ea:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a8ee:	0ce4      	lsrs	r4, r4, #19
 800a8f0:	04e4      	lsls	r4, r4, #19
 800a8f2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8f6:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a8fa:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800a8fe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a902:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->xfer_len > 0U)
 800a906:	694b      	ldr	r3, [r1, #20]
 800a908:	b14b      	cbz	r3, 800a91e <USB_EP0StartXfer+0xaa>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a90a:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800a90e:	780a      	ldrb	r2, [r1, #0]
 800a910:	f002 010f 	and.w	r1, r2, #15
 800a914:	2201      	movs	r2, #1
 800a916:	408a      	lsls	r2, r1
 800a918:	4313      	orrs	r3, r2
 800a91a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 800a91e:	2000      	movs	r0, #0
 800a920:	bc30      	pop	{r4, r5}
 800a922:	4770      	bx	lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a924:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a92c:	6914      	ldr	r4, [r2, #16]
 800a92e:	0ce4      	lsrs	r4, r4, #19
 800a930:	04e4      	lsls	r4, r4, #19
 800a932:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a934:	6914      	ldr	r4, [r2, #16]
 800a936:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a93a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a93e:	6114      	str	r4, [r2, #16]
      if (ep->xfer_len > ep->maxpacket)
 800a940:	688c      	ldr	r4, [r1, #8]
 800a942:	694d      	ldr	r5, [r1, #20]
 800a944:	42a5      	cmp	r5, r4
 800a946:	d900      	bls.n	800a94a <USB_EP0StartXfer+0xd6>
        ep->xfer_len = ep->maxpacket;
 800a948:	614c      	str	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a94a:	6914      	ldr	r4, [r2, #16]
 800a94c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a950:	6114      	str	r4, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a952:	6914      	ldr	r4, [r2, #16]
 800a954:	694d      	ldr	r5, [r1, #20]
 800a956:	f3c5 0c12 	ubfx	ip, r5, #0, #19
 800a95a:	ea44 040c 	orr.w	r4, r4, ip
 800a95e:	6114      	str	r4, [r2, #16]
 800a960:	e7c9      	b.n	800a8f6 <USB_EP0StartXfer+0x82>

0800a962 <USB_WritePacket>:
{
 800a962:	b510      	push	{r4, lr}
  count32b = ((uint32_t)len + 3U) / 4U;
 800a964:	f103 0e03 	add.w	lr, r3, #3
 800a968:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  for (i = 0U; i < count32b; i++)
 800a96c:	f04f 0c00 	mov.w	ip, #0
 800a970:	e008      	b.n	800a984 <USB_WritePacket+0x22>
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a972:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800a976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a97a:	f851 4b04 	ldr.w	r4, [r1], #4
 800a97e:	601c      	str	r4, [r3, #0]
  for (i = 0U; i < count32b; i++)
 800a980:	f10c 0c01 	add.w	ip, ip, #1
 800a984:	45f4      	cmp	ip, lr
 800a986:	d3f4      	bcc.n	800a972 <USB_WritePacket+0x10>
}
 800a988:	2000      	movs	r0, #0
 800a98a:	bd10      	pop	{r4, pc}

0800a98c <USB_EPStartXfer>:
{
 800a98c:	b570      	push	{r4, r5, r6, lr}
  uint32_t epnum = (uint32_t)ep->num;
 800a98e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800a990:	784a      	ldrb	r2, [r1, #1]
 800a992:	2a01      	cmp	r2, #1
 800a994:	d027      	beq.n	800a9e6 <USB_EPStartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a996:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800a99a:	f503 6230 	add.w	r2, r3, #2816	; 0xb00
 800a99e:	6914      	ldr	r4, [r2, #16]
 800a9a0:	0ce4      	lsrs	r4, r4, #19
 800a9a2:	04e4      	lsls	r4, r4, #19
 800a9a4:	6114      	str	r4, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9a6:	6914      	ldr	r4, [r2, #16]
 800a9a8:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a9ac:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a9b0:	6114      	str	r4, [r2, #16]
    if (ep->xfer_len == 0U)
 800a9b2:	694c      	ldr	r4, [r1, #20]
 800a9b4:	2c00      	cmp	r4, #0
 800a9b6:	f040 8093 	bne.w	800aae0 <USB_EPStartXfer+0x154>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a9ba:	6914      	ldr	r4, [r2, #16]
 800a9bc:	688d      	ldr	r5, [r1, #8]
 800a9be:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800a9c2:	432c      	orrs	r4, r5
 800a9c4:	6114      	str	r4, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9c6:	6914      	ldr	r4, [r2, #16]
 800a9c8:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800a9cc:	6114      	str	r4, [r2, #16]
    if (ep->type == EP_TYPE_ISOC)
 800a9ce:	78ca      	ldrb	r2, [r1, #3]
 800a9d0:	2a01      	cmp	r2, #1
 800a9d2:	f000 809b 	beq.w	800ab0c <USB_EPStartXfer+0x180>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a9d6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800a9da:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800a9de:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len == 0U)
 800a9e6:	694a      	ldr	r2, [r1, #20]
 800a9e8:	bb72      	cbnz	r2, 800aa48 <USB_EPStartXfer+0xbc>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9ea:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800a9ee:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800a9f2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800a9f6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800a9fa:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9fe:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800aa02:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800aa06:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa0a:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800aa0e:	0ce4      	lsrs	r4, r4, #19
 800aa10:	04e4      	lsls	r4, r4, #19
 800aa12:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa16:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800aa1a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800aa1e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800aa22:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    if (ep->type != EP_TYPE_ISOC)
 800aa26:	78ca      	ldrb	r2, [r1, #3]
 800aa28:	2a01      	cmp	r2, #1
 800aa2a:	d041      	beq.n	800aab0 <USB_EPStartXfer+0x124>
      if (ep->xfer_len > 0U)
 800aa2c:	694b      	ldr	r3, [r1, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0d7      	beq.n	800a9e2 <USB_EPStartXfer+0x56>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa32:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 800aa36:	780a      	ldrb	r2, [r1, #0]
 800aa38:	f002 010f 	and.w	r1, r2, #15
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	408a      	lsls	r2, r1
 800aa40:	4313      	orrs	r3, r2
 800aa42:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800aa46:	e7cc      	b.n	800a9e2 <USB_EPStartXfer+0x56>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa48:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800aa4c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800aa50:	0ce4      	lsrs	r4, r4, #19
 800aa52:	04e4      	lsls	r4, r4, #19
 800aa54:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa58:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800aa5c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800aa60:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 800aa64:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa68:	f8d2 5910 	ldr.w	r5, [r2, #2320]	; 0x910
 800aa6c:	694c      	ldr	r4, [r1, #20]
 800aa6e:	688e      	ldr	r6, [r1, #8]
 800aa70:	4434      	add	r4, r6
 800aa72:	3c01      	subs	r4, #1
 800aa74:	fbb4 f4f6 	udiv	r4, r4, r6
 800aa78:	4e2e      	ldr	r6, [pc, #184]	; (800ab34 <USB_EPStartXfer+0x1a8>)
 800aa7a:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800aa7e:	432c      	orrs	r4, r5
 800aa80:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aa84:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 800aa88:	694d      	ldr	r5, [r1, #20]
 800aa8a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800aa8e:	432c      	orrs	r4, r5
 800aa90:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800aa98:	78cc      	ldrb	r4, [r1, #3]
 800aa9a:	2c01      	cmp	r4, #1
 800aa9c:	d1bb      	bne.n	800aa16 <USB_EPStartXfer+0x8a>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa9e:	6914      	ldr	r4, [r2, #16]
 800aaa0:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 800aaa4:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aaa6:	6914      	ldr	r4, [r2, #16]
 800aaa8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 800aaac:	6114      	str	r4, [r2, #16]
 800aaae:	e7b2      	b.n	800aa16 <USB_EPStartXfer+0x8a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aab0:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800aab4:	f412 7f80 	tst.w	r2, #256	; 0x100
 800aab8:	d10b      	bne.n	800aad2 <USB_EPStartXfer+0x146>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aaba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800aabe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800aac2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800aac6:	8a8b      	ldrh	r3, [r1, #20]
 800aac8:	780a      	ldrb	r2, [r1, #0]
 800aaca:	68c9      	ldr	r1, [r1, #12]
 800aacc:	f7ff ff49 	bl	800a962 <USB_WritePacket>
 800aad0:	e787      	b.n	800a9e2 <USB_EPStartXfer+0x56>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aad2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800aad6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aada:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800aade:	e7f2      	b.n	800aac6 <USB_EPStartXfer+0x13a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aae0:	688d      	ldr	r5, [r1, #8]
 800aae2:	442c      	add	r4, r5
 800aae4:	3c01      	subs	r4, #1
 800aae6:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aaea:	6915      	ldr	r5, [r2, #16]
 800aaec:	fa1f fc84 	uxth.w	ip, r4
 800aaf0:	4e10      	ldr	r6, [pc, #64]	; (800ab34 <USB_EPStartXfer+0x1a8>)
 800aaf2:	ea06 44c4 	and.w	r4, r6, r4, lsl #19
 800aaf6:	4325      	orrs	r5, r4
 800aaf8:	6115      	str	r5, [r2, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aafa:	6915      	ldr	r5, [r2, #16]
 800aafc:	688c      	ldr	r4, [r1, #8]
 800aafe:	fb0c f404 	mul.w	r4, ip, r4
 800ab02:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800ab06:	432c      	orrs	r4, r5
 800ab08:	6114      	str	r4, [r2, #16]
 800ab0a:	e760      	b.n	800a9ce <USB_EPStartXfer+0x42>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab0c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800ab10:	f412 7f80 	tst.w	r2, #256	; 0x100
 800ab14:	d106      	bne.n	800ab24 <USB_EPStartXfer+0x198>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab16:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ab1a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800ab1e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800ab22:	e758      	b.n	800a9d6 <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab24:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800ab28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ab2c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800ab30:	e751      	b.n	800a9d6 <USB_EPStartXfer+0x4a>
 800ab32:	bf00      	nop
 800ab34:	1ff80000 	.word	0x1ff80000

0800ab38 <USB_ReadPacket>:
{
 800ab38:	4684      	mov	ip, r0
 800ab3a:	4608      	mov	r0, r1
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ab3c:	1cd1      	adds	r1, r2, #3
 800ab3e:	0889      	lsrs	r1, r1, #2
  for (i = 0U; i < count32b; i++)
 800ab40:	2300      	movs	r3, #0
 800ab42:	e005      	b.n	800ab50 <USB_ReadPacket+0x18>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab44:	f50c 5280 	add.w	r2, ip, #4096	; 0x1000
 800ab48:	6812      	ldr	r2, [r2, #0]
 800ab4a:	f840 2b04 	str.w	r2, [r0], #4
  for (i = 0U; i < count32b; i++)
 800ab4e:	3301      	adds	r3, #1
 800ab50:	428b      	cmp	r3, r1
 800ab52:	d3f7      	bcc.n	800ab44 <USB_ReadPacket+0xc>
}
 800ab54:	4770      	bx	lr

0800ab56 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800ab56:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800ab58:	784a      	ldrb	r2, [r1, #1]
 800ab5a:	2a01      	cmp	r2, #1
 800ab5c:	d014      	beq.n	800ab88 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab5e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ab62:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	db06      	blt.n	800ab78 <USB_EPSetStall+0x22>
 800ab6a:	b12b      	cbz	r3, 800ab78 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab6c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ab70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab74:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab78:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ab7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 800ab84:	2000      	movs	r0, #0
 800ab86:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab88:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ab8c:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	db06      	blt.n	800aba2 <USB_EPSetStall+0x4c>
 800ab94:	b12b      	cbz	r3, 800aba2 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab96:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800ab9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab9e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aba2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800aba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800abaa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800abae:	e7e9      	b.n	800ab84 <USB_EPSetStall+0x2e>

0800abb0 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800abb0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800abb2:	784a      	ldrb	r2, [r1, #1]
 800abb4:	2a01      	cmp	r2, #1
 800abb6:	d00e      	beq.n	800abd6 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800abb8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800abbc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800abc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abc4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abc8:	78cb      	ldrb	r3, [r1, #3]
 800abca:	3b02      	subs	r3, #2
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d915      	bls.n	800abfe <USB_EPClearStall+0x4e>
}
 800abd2:	2000      	movs	r0, #0
 800abd4:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abd6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800abda:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800abde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abe2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abe6:	78cb      	ldrb	r3, [r1, #3]
 800abe8:	3b02      	subs	r3, #2
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b01      	cmp	r3, #1
 800abee:	d8f0      	bhi.n	800abd2 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abf0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800abf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800abfc:	e7e9      	b.n	800abd2 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abfe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800ac02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac06:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800ac0a:	e7e2      	b.n	800abd2 <USB_EPClearStall+0x22>

0800ac0c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac0c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ac10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ac14:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac18:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800ac1c:	0109      	lsls	r1, r1, #4
 800ac1e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800ac22:	4319      	orrs	r1, r3
 800ac24:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800ac28:	2000      	movs	r0, #0
 800ac2a:	4770      	bx	lr

0800ac2c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac2c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac38:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ac3c:	f023 0302 	bic.w	r3, r3, #2
 800ac40:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800ac44:	2000      	movs	r0, #0
 800ac46:	4770      	bx	lr

0800ac48 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac48:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800ac4c:	f023 0303 	bic.w	r3, r3, #3
 800ac50:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac54:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ac58:	f043 0302 	orr.w	r3, r3, #2
 800ac5c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800ac60:	2000      	movs	r0, #0
 800ac62:	4770      	bx	lr

0800ac64 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800ac64:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800ac66:	6980      	ldr	r0, [r0, #24]
}
 800ac68:	4010      	ands	r0, r2
 800ac6a:	4770      	bx	lr

0800ac6c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ac6c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ac70:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac74:	69c0      	ldr	r0, [r0, #28]
 800ac76:	4018      	ands	r0, r3
}
 800ac78:	0c00      	lsrs	r0, r0, #16
 800ac7a:	4770      	bx	lr

0800ac7c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800ac7c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800ac80:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac84:	69c0      	ldr	r0, [r0, #28]
 800ac86:	4018      	ands	r0, r3
}
 800ac88:	b280      	uxth	r0, r0
 800ac8a:	4770      	bx	lr

0800ac8c <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac8c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800ac90:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac94:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ac98:	6940      	ldr	r0, [r0, #20]
}
 800ac9a:	4010      	ands	r0, r2
 800ac9c:	4770      	bx	lr

0800ac9e <USB_ReadDevInEPInterrupt>:
{
 800ac9e:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 800aca0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aca4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aca8:	f001 020f 	and.w	r2, r1, #15
 800acac:	40d3      	lsrs	r3, r2
 800acae:	01db      	lsls	r3, r3, #7
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800acb4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800acb8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 800acbc:	6880      	ldr	r0, [r0, #8]
}
 800acbe:	4018      	ands	r0, r3
 800acc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800acc6:	6940      	ldr	r0, [r0, #20]
}
 800acc8:	f000 0001 	and.w	r0, r0, #1
 800accc:	4770      	bx	lr

0800acce <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800acd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800acd6:	f023 0307 	bic.w	r3, r3, #7
 800acda:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acde:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800ace2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800acea:	2000      	movs	r0, #0
 800acec:	4770      	bx	lr
	...

0800acf0 <USB_EP0_OutStart>:
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800acf0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800acf2:	4b0f      	ldr	r3, [pc, #60]	; (800ad30 <USB_EP0_OutStart+0x40>)
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d903      	bls.n	800ad00 <USB_EP0_OutStart+0x10>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800acf8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	db14      	blt.n	800ad2a <USB_EP0_OutStart+0x3a>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad06:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800ad0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad0e:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad12:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800ad16:	f043 0318 	orr.w	r3, r3, #24
 800ad1a:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad1e:	f8d0 3b10 	ldr.w	r3, [r0, #2832]	; 0xb10
 800ad22:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad26:	f8c0 3b10 	str.w	r3, [r0, #2832]	; 0xb10
}
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	4f54300a 	.word	0x4f54300a

0800ad34 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800ad34:	b510      	push	{r4, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	461c      	mov	r4, r3
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800ad3a:	f88d 000c 	strb.w	r0, [sp, #12]
  cp.privacy_enabled = privacy_enabled;
 800ad3e:	f88d 100d 	strb.w	r1, [sp, #13]
  cp.device_name_char_len = device_name_char_len;
 800ad42:	f88d 200e 	strb.w	r2, [sp, #14]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ad46:	2100      	movs	r1, #0
 800ad48:	9101      	str	r1, [sp, #4]
 800ad4a:	f8cd 1007 	str.w	r1, [sp, #7]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ad4e:	9104      	str	r1, [sp, #16]
 800ad50:	9105      	str	r1, [sp, #20]
 800ad52:	9106      	str	r1, [sp, #24]
 800ad54:	9107      	str	r1, [sp, #28]
 800ad56:	9108      	str	r1, [sp, #32]
 800ad58:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_VENDOR_CMD;
 800ad5a:	233f      	movs	r3, #63	; 0x3f
 800ad5c:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800ad60:	238a      	movs	r3, #138	; 0x8a
 800ad62:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800ad66:	ab03      	add	r3, sp, #12
 800ad68:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800ad6e:	ab01      	add	r3, sp, #4
 800ad70:	9308      	str	r3, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800ad72:	2307      	movs	r3, #7
 800ad74:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800ad76:	a804      	add	r0, sp, #16
 800ad78:	f000 fbfe 	bl	800b578 <hci_send_req>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	db0f      	blt.n	800ada0 <aci_gap_init_IDB05A1+0x6c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800ad80:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ad84:	b950      	cbnz	r0, 800ad9c <aci_gap_init_IDB05A1+0x68>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800ad86:	f8bd 3005 	ldrh.w	r3, [sp, #5]
 800ad8a:	8023      	strh	r3, [r4, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800ad8c:	f8bd 2007 	ldrh.w	r2, [sp, #7]
 800ad90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad92:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800ad94:	f8bd 2009 	ldrh.w	r2, [sp, #9]
 800ad98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad9a:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800ad9c:	b00a      	add	sp, #40	; 0x28
 800ad9e:	bd10      	pop	{r4, pc}
    return BLE_STATUS_TIMEOUT;
 800ada0:	20ff      	movs	r0, #255	; 0xff
 800ada2:	e7fb      	b.n	800ad9c <aci_gap_init_IDB05A1+0x68>

0800ada4 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	b092      	sub	sp, #72	; 0x48
 800ada8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800adac:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800adb0:	192e      	adds	r6, r5, r4
 800adb2:	360e      	adds	r6, #14
 800adb4:	2e28      	cmp	r6, #40	; 0x28
 800adb6:	d851      	bhi.n	800ae5c <aci_gap_set_discoverable+0xb8>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 800adb8:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800adbc:	f8ad 1005 	strh.w	r1, [sp, #5]
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800adc0:	f8ad 2007 	strh.w	r2, [sp, #7]
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 800adc4:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 800adc8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800adcc:	f88d 300a 	strb.w	r3, [sp, #10]
  indx++;
    
  buffer[indx] = LocalNameLen;
 800add0:	f88d 500b 	strb.w	r5, [sp, #11]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800add4:	ae01      	add	r6, sp, #4
 800add6:	462a      	mov	r2, r5
 800add8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adda:	a803      	add	r0, sp, #12
 800addc:	f003 fd94 	bl	800e908 <memcpy>
  indx +=  LocalNameLen;
 800ade0:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 800ade4:	aa12      	add	r2, sp, #72	; 0x48
 800ade6:	fa52 f383 	uxtab	r3, r2, r3
 800adea:	f803 4c44 	strb.w	r4, [r3, #-68]
  indx++;
 800adee:	3509      	adds	r5, #9
 800adf0:	b2ed      	uxtb	r5, r5

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800adf2:	4622      	mov	r2, r4
 800adf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800adf6:	1970      	adds	r0, r6, r5
 800adf8:	f003 fd86 	bl	800e908 <memcpy>
  indx +=  ServiceUUIDLen;  
 800adfc:	442c      	add	r4, r5
 800adfe:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 800ae00:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800ae04:	446b      	add	r3, sp
 800ae06:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800ae0a:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;
 800ae0e:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800ae10:	aa12      	add	r2, sp, #72	; 0x48
 800ae12:	fa52 f383 	uxtab	r3, r2, r3
 800ae16:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 800ae1a:	f823 2c44 	strh.w	r2, [r3, #-68]
  indx +=  2;    
 800ae1e:	3404      	adds	r4, #4
 800ae20:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ae22:	2100      	movs	r1, #0
 800ae24:	910c      	str	r1, [sp, #48]	; 0x30
 800ae26:	910d      	str	r1, [sp, #52]	; 0x34
 800ae28:	910e      	str	r1, [sp, #56]	; 0x38
 800ae2a:	910f      	str	r1, [sp, #60]	; 0x3c
 800ae2c:	9110      	str	r1, [sp, #64]	; 0x40
 800ae2e:	9111      	str	r1, [sp, #68]	; 0x44
  rq.ogf = OGF_VENDOR_CMD;
 800ae30:	233f      	movs	r3, #63	; 0x3f
 800ae32:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800ae36:	2383      	movs	r3, #131	; 0x83
 800ae38:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  rq.cparam = (void *)buffer;
 800ae3c:	960e      	str	r6, [sp, #56]	; 0x38
  rq.clen = indx;
 800ae3e:	940f      	str	r4, [sp, #60]	; 0x3c
  rq.rparam = &status;
 800ae40:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ae44:	9310      	str	r3, [sp, #64]	; 0x40
  rq.rlen = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	9311      	str	r3, [sp, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800ae4a:	a80c      	add	r0, sp, #48	; 0x30
 800ae4c:	f000 fb94 	bl	800b578 <hci_send_req>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	db05      	blt.n	800ae60 <aci_gap_set_discoverable+0xbc>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800ae54:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    return status;
  }

  return 0;
}
 800ae58:	b012      	add	sp, #72	; 0x48
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800ae5c:	2042      	movs	r0, #66	; 0x42
 800ae5e:	e7fb      	b.n	800ae58 <aci_gap_set_discoverable+0xb4>
    return BLE_STATUS_TIMEOUT;
 800ae60:	20ff      	movs	r0, #255	; 0xff
 800ae62:	e7f9      	b.n	800ae58 <aci_gap_set_discoverable+0xb4>

0800ae64 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800ae64:	b500      	push	{lr}
 800ae66:	b08f      	sub	sp, #60	; 0x3c
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800ae68:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.oob_enable = oob_enable;
 800ae6c:	f88d 1005 	strb.w	r1, [sp, #5]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 800ae70:	b161      	cbz	r1, 800ae8c <aci_gap_set_auth_requirement+0x28>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800ae72:	f8d2 c000 	ldr.w	ip, [r2]
 800ae76:	6850      	ldr	r0, [r2, #4]
 800ae78:	6891      	ldr	r1, [r2, #8]
 800ae7a:	68d2      	ldr	r2, [r2, #12]
 800ae7c:	f8cd c006 	str.w	ip, [sp, #6]
 800ae80:	f8cd 000a 	str.w	r0, [sp, #10]
 800ae84:	f8cd 100e 	str.w	r1, [sp, #14]
 800ae88:	f8cd 2012 	str.w	r2, [sp, #18]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 800ae8c:	f88d 3016 	strb.w	r3, [sp, #22]
  cp.max_encryption_key_size = max_encryption_key_size;
 800ae90:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800ae94:	f88d 3017 	strb.w	r3, [sp, #23]
  cp.use_fixed_pin = use_fixed_pin;
 800ae98:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800ae9c:	f88d 3018 	strb.w	r3, [sp, #24]
  cp.fixed_pin = htobl(fixed_pin);
 800aea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aea2:	f8cd 3019 	str.w	r3, [sp, #25]
  cp.bonding_mode = bonding_mode;
 800aea6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800aeaa:	f88d 301d 	strb.w	r3, [sp, #29]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800aeae:	2100      	movs	r1, #0
 800aeb0:	9108      	str	r1, [sp, #32]
 800aeb2:	9109      	str	r1, [sp, #36]	; 0x24
 800aeb4:	910a      	str	r1, [sp, #40]	; 0x28
 800aeb6:	910b      	str	r1, [sp, #44]	; 0x2c
 800aeb8:	910c      	str	r1, [sp, #48]	; 0x30
 800aeba:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800aebc:	233f      	movs	r3, #63	; 0x3f
 800aebe:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800aec2:	2386      	movs	r3, #134	; 0x86
 800aec4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = &cp;
 800aec8:	ab01      	add	r3, sp, #4
 800aeca:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = sizeof(cp);
 800aecc:	231a      	movs	r3, #26
 800aece:	930b      	str	r3, [sp, #44]	; 0x2c
  rq.rparam = &status;
 800aed0:	f10d 0303 	add.w	r3, sp, #3
 800aed4:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800aeda:	a808      	add	r0, sp, #32
 800aedc:	f000 fb4c 	bl	800b578 <hci_send_req>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	db04      	blt.n	800aeee <aci_gap_set_auth_requirement+0x8a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800aee4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    return status;
  }
    
  return 0;
}
 800aee8:	b00f      	add	sp, #60	; 0x3c
 800aeea:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800aeee:	20ff      	movs	r0, #255	; 0xff
 800aef0:	e7fa      	b.n	800aee8 <aci_gap_set_auth_requirement+0x84>

0800aef2 <aci_gap_update_adv_data>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 800aef2:	281f      	cmp	r0, #31
 800aef4:	d829      	bhi.n	800af4a <aci_gap_update_adv_data+0x58>
{
 800aef6:	b510      	push	{r4, lr}
 800aef8:	b090      	sub	sp, #64	; 0x40
 800aefa:	4604      	mov	r4, r0
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 800aefc:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 800af00:	4602      	mov	r2, r0
 800af02:	f10d 0005 	add.w	r0, sp, #5
 800af06:	f003 fcff 	bl	800e908 <memcpy>
  indx +=  AdvLen;
 800af0a:	3401      	adds	r4, #1
 800af0c:	b2e4      	uxtb	r4, r4
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800af0e:	2100      	movs	r1, #0
 800af10:	910a      	str	r1, [sp, #40]	; 0x28
 800af12:	910b      	str	r1, [sp, #44]	; 0x2c
 800af14:	910c      	str	r1, [sp, #48]	; 0x30
 800af16:	910d      	str	r1, [sp, #52]	; 0x34
 800af18:	910e      	str	r1, [sp, #56]	; 0x38
 800af1a:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_VENDOR_CMD;
 800af1c:	233f      	movs	r3, #63	; 0x3f
 800af1e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 800af22:	238e      	movs	r3, #142	; 0x8e
 800af24:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = (void *)buffer;
 800af28:	ab01      	add	r3, sp, #4
 800af2a:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 800af2c:	940d      	str	r4, [sp, #52]	; 0x34
  rq.rparam = &status;
 800af2e:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 800af32:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800af34:	2301      	movs	r3, #1
 800af36:	930f      	str	r3, [sp, #60]	; 0x3c
    
  if (hci_send_req(&rq, FALSE) < 0)
 800af38:	a80a      	add	r0, sp, #40	; 0x28
 800af3a:	f000 fb1d 	bl	800b578 <hci_send_req>
 800af3e:	2800      	cmp	r0, #0
 800af40:	db05      	blt.n	800af4e <aci_gap_update_adv_data+0x5c>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 800af42:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 800af46:	b010      	add	sp, #64	; 0x40
 800af48:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800af4a:	2042      	movs	r0, #66	; 0x42
}
 800af4c:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800af4e:	20ff      	movs	r0, #255	; 0xff
 800af50:	e7f9      	b.n	800af46 <aci_gap_update_adv_data+0x54>

0800af52 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800af52:	b500      	push	{lr}
 800af54:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800af56:	2100      	movs	r1, #0
 800af58:	9102      	str	r1, [sp, #8]
 800af5a:	9103      	str	r1, [sp, #12]
 800af5c:	9104      	str	r1, [sp, #16]
 800af5e:	9105      	str	r1, [sp, #20]
 800af60:	9106      	str	r1, [sp, #24]
 800af62:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800af64:	233f      	movs	r3, #63	; 0x3f
 800af66:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 800af6a:	f240 1301 	movw	r3, #257	; 0x101
 800af6e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800af72:	f10d 0307 	add.w	r3, sp, #7
 800af76:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800af78:	2301      	movs	r3, #1
 800af7a:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800af7c:	a802      	add	r0, sp, #8
 800af7e:	f000 fafb 	bl	800b578 <hci_send_req>
 800af82:	2800      	cmp	r0, #0
 800af84:	db04      	blt.n	800af90 <aci_gatt_init+0x3e>
    return BLE_STATUS_TIMEOUT;

  return status;
 800af86:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800af8a:	b009      	add	sp, #36	; 0x24
 800af8c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800af90:	20ff      	movs	r0, #255	; 0xff
 800af92:	e7fa      	b.n	800af8a <aci_gatt_init+0x38>

0800af94 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	b08c      	sub	sp, #48	; 0x30
 800af98:	4616      	mov	r6, r2
 800af9a:	461d      	mov	r5, r3
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800af9c:	f88d 0000 	strb.w	r0, [sp]
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
 800afa0:	2801      	cmp	r0, #1
 800afa2:	d038      	beq.n	800b016 <aci_gatt_add_serv+0x82>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800afa4:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800afa6:	4622      	mov	r2, r4
 800afa8:	f10d 0001 	add.w	r0, sp, #1
 800afac:	f003 fcac 	bl	800e908 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800afb0:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800afb4:	446b      	add	r3, sp
 800afb6:	f803 6c30 	strb.w	r6, [r3, #-48]
  indx++;
    
  buffer[indx] = max_attr_records;
 800afba:	f104 0332 	add.w	r3, r4, #50	; 0x32
 800afbe:	eb0d 0203 	add.w	r2, sp, r3
 800afc2:	f802 5c30 	strb.w	r5, [r2, #-48]
  indx++;
 800afc6:	3403      	adds	r4, #3
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800afc8:	ab05      	add	r3, sp, #20
 800afca:	2100      	movs	r1, #0
 800afcc:	f8ad 1014 	strh.w	r1, [sp, #20]
 800afd0:	f88d 1016 	strb.w	r1, [sp, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800afd4:	9106      	str	r1, [sp, #24]
 800afd6:	9107      	str	r1, [sp, #28]
 800afd8:	9108      	str	r1, [sp, #32]
 800afda:	9109      	str	r1, [sp, #36]	; 0x24
 800afdc:	910a      	str	r1, [sp, #40]	; 0x28
 800afde:	910b      	str	r1, [sp, #44]	; 0x2c
  rq.ogf = OGF_VENDOR_CMD;
 800afe0:	223f      	movs	r2, #63	; 0x3f
 800afe2:	f8ad 2018 	strh.w	r2, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800afe6:	f44f 7281 	mov.w	r2, #258	; 0x102
 800afea:	f8ad 201a 	strh.w	r2, [sp, #26]
  rq.cparam = (void *)buffer;
 800afee:	f8cd d020 	str.w	sp, [sp, #32]
  rq.clen = indx;
 800aff2:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800aff4:	930a      	str	r3, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800aff6:	2303      	movs	r3, #3
 800aff8:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 800affa:	a806      	add	r0, sp, #24
 800affc:	f000 fabc 	bl	800b578 <hci_send_req>
 800b000:	2800      	cmp	r0, #0
 800b002:	db0a      	blt.n	800b01a <aci_gatt_add_serv+0x86>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800b004:	f89d 0014 	ldrb.w	r0, [sp, #20]
 800b008:	b918      	cbnz	r0, 800b012 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 800b00a:	f8bd 2015 	ldrh.w	r2, [sp, #21]
 800b00e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b010:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800b012:	b00c      	add	sp, #48	; 0x30
 800b014:	bd70      	pop	{r4, r5, r6, pc}
    uuid_len = 2;
 800b016:	2402      	movs	r4, #2
 800b018:	e7c5      	b.n	800afa6 <aci_gatt_add_serv+0x12>
    return BLE_STATUS_TIMEOUT;
 800b01a:	20ff      	movs	r0, #255	; 0xff
 800b01c:	e7f9      	b.n	800b012 <aci_gatt_add_serv+0x7e>

0800b01e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800b01e:	b530      	push	{r4, r5, lr}
 800b020:	b08f      	sub	sp, #60	; 0x3c
 800b022:	460c      	mov	r4, r1
 800b024:	4611      	mov	r1, r2
 800b026:	461d      	mov	r5, r3
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800b028:	f8ad 0000 	strh.w	r0, [sp]
  indx += 2;
    
  buffer[indx] = charUuidType;
 800b02c:	f88d 4002 	strb.w	r4, [sp, #2]
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
 800b030:	2c01      	cmp	r4, #1
 800b032:	d056      	beq.n	800b0e2 <aci_gatt_add_char+0xc4>
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 800b034:	2410      	movs	r4, #16
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800b036:	4622      	mov	r2, r4
 800b038:	f10d 0003 	add.w	r0, sp, #3
 800b03c:	f003 fc64 	bl	800e908 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 800b040:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 800b044:	eb0d 0203 	add.w	r2, sp, r3
 800b048:	f802 5c38 	strb.w	r5, [r2, #-56]
  indx++;
    
  buffer[indx] = charProperties;
 800b04c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b050:	446b      	add	r3, sp
 800b052:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800b056:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = secPermissions;
 800b05a:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 800b05e:	446b      	add	r3, sp
 800b060:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 800b064:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = gattEvtMask;
 800b068:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800b06c:	446b      	add	r3, sp
 800b06e:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800b072:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = encryKeySize;
 800b076:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 800b07a:	446b      	add	r3, sp
 800b07c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800b080:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
    
  buffer[indx] = isVariable;
 800b084:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b088:	446b      	add	r3, sp
 800b08a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800b08e:	f803 2c38 	strb.w	r2, [r3, #-56]
  indx++;
 800b092:	3409      	adds	r4, #9
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b094:	ab07      	add	r3, sp, #28
 800b096:	2100      	movs	r1, #0
 800b098:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b09c:	f88d 101e 	strb.w	r1, [sp, #30]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b0a0:	9108      	str	r1, [sp, #32]
 800b0a2:	9109      	str	r1, [sp, #36]	; 0x24
 800b0a4:	910a      	str	r1, [sp, #40]	; 0x28
 800b0a6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0a8:	910c      	str	r1, [sp, #48]	; 0x30
 800b0aa:	910d      	str	r1, [sp, #52]	; 0x34
  rq.ogf = OGF_VENDOR_CMD;
 800b0ac:	223f      	movs	r2, #63	; 0x3f
 800b0ae:	f8ad 2020 	strh.w	r2, [sp, #32]
  rq.ocf = OCF_GATT_ADD_CHAR;
 800b0b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b0b6:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 800b0ba:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.clen = indx;
 800b0be:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rparam = &resp;
 800b0c0:	930c      	str	r3, [sp, #48]	; 0x30
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 800b0c6:	a808      	add	r0, sp, #32
 800b0c8:	f000 fa56 	bl	800b578 <hci_send_req>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	db0a      	blt.n	800b0e6 <aci_gatt_add_char+0xc8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800b0d0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800b0d4:	b918      	cbnz	r0, 800b0de <aci_gatt_add_char+0xc0>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800b0d6:	f8bd 201d 	ldrh.w	r2, [sp, #29]
 800b0da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0dc:	801a      	strh	r2, [r3, #0]

  return 0;
}
 800b0de:	b00f      	add	sp, #60	; 0x3c
 800b0e0:	bd30      	pop	{r4, r5, pc}
    uuid_len = 2;
 800b0e2:	2402      	movs	r4, #2
 800b0e4:	e7a7      	b.n	800b036 <aci_gatt_add_char+0x18>
    return BLE_STATUS_TIMEOUT;
 800b0e6:	20ff      	movs	r0, #255	; 0xff
 800b0e8:	e7f9      	b.n	800b0de <aci_gatt_add_char+0xc0>

0800b0ea <aci_gatt_update_char_value>:
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800b0ea:	2b7a      	cmp	r3, #122	; 0x7a
 800b0ec:	d831      	bhi.n	800b152 <aci_gatt_update_char_value+0x68>
{
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	b0a8      	sub	sp, #160	; 0xa0
 800b0f2:	461c      	mov	r4, r3
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800b0f4:	f8ad 0004 	strh.w	r0, [sp, #4]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800b0f8:	f8ad 1006 	strh.w	r1, [sp, #6]
  indx += 2;
    
  buffer[indx] = charValOffset;
 800b0fc:	f88d 2008 	strb.w	r2, [sp, #8]
  indx++;
    
  buffer[indx] = charValueLen;
 800b100:	f88d 3009 	strb.w	r3, [sp, #9]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800b104:	461a      	mov	r2, r3
 800b106:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800b108:	f10d 000a 	add.w	r0, sp, #10
 800b10c:	f003 fbfc 	bl	800e908 <memcpy>
  indx +=  charValueLen;
 800b110:	3406      	adds	r4, #6
 800b112:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b114:	2100      	movs	r1, #0
 800b116:	9122      	str	r1, [sp, #136]	; 0x88
 800b118:	9123      	str	r1, [sp, #140]	; 0x8c
 800b11a:	9124      	str	r1, [sp, #144]	; 0x90
 800b11c:	9125      	str	r1, [sp, #148]	; 0x94
 800b11e:	9126      	str	r1, [sp, #152]	; 0x98
 800b120:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800b122:	233f      	movs	r3, #63	; 0x3f
 800b124:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 800b128:	f44f 7383 	mov.w	r3, #262	; 0x106
 800b12c:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800b130:	ab01      	add	r3, sp, #4
 800b132:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800b134:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800b136:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800b13a:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800b13c:	2301      	movs	r3, #1
 800b13e:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800b140:	a822      	add	r0, sp, #136	; 0x88
 800b142:	f000 fa19 	bl	800b578 <hci_send_req>
 800b146:	2800      	cmp	r0, #0
 800b148:	db05      	blt.n	800b156 <aci_gatt_update_char_value+0x6c>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800b14a:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
    return status;
  }

  return 0;
}
 800b14e:	b028      	add	sp, #160	; 0xa0
 800b150:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800b152:	2042      	movs	r0, #66	; 0x42
}
 800b154:	4770      	bx	lr
    return BLE_STATUS_TIMEOUT;
 800b156:	20ff      	movs	r0, #255	; 0xff
 800b158:	e7f9      	b.n	800b14e <aci_gatt_update_char_value+0x64>

0800b15a <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 800b15a:	b500      	push	{lr}
 800b15c:	b089      	sub	sp, #36	; 0x24
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 800b15e:	f8ad 0004 	strh.w	r0, [sp, #4]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 800b162:	2100      	movs	r1, #0
 800b164:	9102      	str	r1, [sp, #8]
 800b166:	9103      	str	r1, [sp, #12]
 800b168:	9104      	str	r1, [sp, #16]
 800b16a:	9105      	str	r1, [sp, #20]
 800b16c:	9106      	str	r1, [sp, #24]
 800b16e:	9107      	str	r1, [sp, #28]
    rq.ogf = OGF_VENDOR_CMD;
 800b170:	233f      	movs	r3, #63	; 0x3f
 800b172:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 800b176:	f240 1327 	movw	r3, #295	; 0x127
 800b17a:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 800b17e:	ab01      	add	r3, sp, #4
 800b180:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 800b182:	2302      	movs	r3, #2
 800b184:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 800b186:	f10d 0303 	add.w	r3, sp, #3
 800b18a:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;
 800b18c:	2301      	movs	r3, #1
 800b18e:	9307      	str	r3, [sp, #28]

    if (hci_send_req(&rq, FALSE) < 0)
 800b190:	a802      	add	r0, sp, #8
 800b192:	f000 f9f1 	bl	800b578 <hci_send_req>
 800b196:	2800      	cmp	r0, #0
 800b198:	db04      	blt.n	800b1a4 <aci_gatt_allow_read+0x4a>
      return BLE_STATUS_TIMEOUT;

    return status;
 800b19a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800b19e:	b009      	add	sp, #36	; 0x24
 800b1a0:	f85d fb04 	ldr.w	pc, [sp], #4
      return BLE_STATUS_TIMEOUT;
 800b1a4:	20ff      	movs	r0, #255	; 0xff
 800b1a6:	e7fa      	b.n	800b19e <aci_gatt_allow_read+0x44>

0800b1a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	b0a8      	sub	sp, #160	; 0xa0
 800b1ac:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800b1ae:	297e      	cmp	r1, #126	; 0x7e
 800b1b0:	d829      	bhi.n	800b206 <aci_hal_write_config_data+0x5e>
 800b1b2:	4611      	mov	r1, r2
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 800b1b4:	f88d 0004 	strb.w	r0, [sp, #4]
  indx++;
    
  buffer[indx] = len;
 800b1b8:	f88d 4005 	strb.w	r4, [sp, #5]
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 800b1bc:	4622      	mov	r2, r4
 800b1be:	f10d 0006 	add.w	r0, sp, #6
 800b1c2:	f003 fba1 	bl	800e908 <memcpy>
  indx +=  len;
 800b1c6:	3402      	adds	r4, #2
 800b1c8:	b2e4      	uxtb	r4, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	9122      	str	r1, [sp, #136]	; 0x88
 800b1ce:	9123      	str	r1, [sp, #140]	; 0x8c
 800b1d0:	9124      	str	r1, [sp, #144]	; 0x90
 800b1d2:	9125      	str	r1, [sp, #148]	; 0x94
 800b1d4:	9126      	str	r1, [sp, #152]	; 0x98
 800b1d6:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800b1d8:	233f      	movs	r3, #63	; 0x3f
 800b1da:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800b1de:	230c      	movs	r3, #12
 800b1e0:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = (void *)buffer;
 800b1e4:	ab01      	add	r3, sp, #4
 800b1e6:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = indx;
 800b1e8:	9425      	str	r4, [sp, #148]	; 0x94
  rq.rparam = &status;
 800b1ea:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 800b1ee:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = 1;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	9327      	str	r3, [sp, #156]	; 0x9c

  if (hci_send_req(&rq, FALSE) < 0)
 800b1f4:	a822      	add	r0, sp, #136	; 0x88
 800b1f6:	f000 f9bf 	bl	800b578 <hci_send_req>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	db05      	blt.n	800b20a <aci_hal_write_config_data+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 800b1fe:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
}
 800b202:	b028      	add	sp, #160	; 0xa0
 800b204:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 800b206:	2042      	movs	r0, #66	; 0x42
 800b208:	e7fb      	b.n	800b202 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_TIMEOUT;
 800b20a:	20ff      	movs	r0, #255	; 0xff
 800b20c:	e7f9      	b.n	800b202 <aci_hal_write_config_data+0x5a>

0800b20e <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 800b20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b210:	b0a9      	sub	sp, #164	; 0xa4
 800b212:	460c      	mov	r4, r1
 800b214:	4616      	mov	r6, r2
 800b216:	461d      	mov	r5, r3
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 800b218:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b21c:	2100      	movs	r1, #0
 800b21e:	9122      	str	r1, [sp, #136]	; 0x88
 800b220:	9123      	str	r1, [sp, #140]	; 0x8c
 800b222:	9124      	str	r1, [sp, #144]	; 0x90
 800b224:	9125      	str	r1, [sp, #148]	; 0x94
 800b226:	9126      	str	r1, [sp, #152]	; 0x98
 800b228:	9127      	str	r1, [sp, #156]	; 0x9c
  rq.ogf = OGF_VENDOR_CMD;
 800b22a:	233f      	movs	r3, #63	; 0x3f
 800b22c:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 800b230:	230d      	movs	r3, #13
 800b232:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
  rq.cparam = &cp;
 800b236:	ab21      	add	r3, sp, #132	; 0x84
 800b238:	9324      	str	r3, [sp, #144]	; 0x90
  rq.clen = sizeof(cp);
 800b23a:	2301      	movs	r3, #1
 800b23c:	9325      	str	r3, [sp, #148]	; 0x94
  rq.rparam = &rp;
 800b23e:	ab01      	add	r3, sp, #4
 800b240:	9326      	str	r3, [sp, #152]	; 0x98
  rq.rlen = sizeof(rp);
 800b242:	2380      	movs	r3, #128	; 0x80
 800b244:	9327      	str	r3, [sp, #156]	; 0x9c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b246:	a822      	add	r0, sp, #136	; 0x88
 800b248:	f000 f996 	bl	800b578 <hci_send_req>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	db18      	blt.n	800b282 <aci_hal_read_config_data+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if(rp.status)
 800b250:	f89d 7004 	ldrb.w	r7, [sp, #4]
 800b254:	b987      	cbnz	r7, 800b278 <aci_hal_read_config_data+0x6a>
    return rp.status;
  
  *data_len_out_p = rq.rlen-1;
 800b256:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800b258:	f103 3cff 	add.w	ip, r3, #4294967295
 800b25c:	fa5f fc8c 	uxtb.w	ip, ip
 800b260:	f886 c000 	strb.w	ip, [r6]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800b264:	fa1f f38c 	uxth.w	r3, ip
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d908      	bls.n	800b27e <aci_hal_read_config_data+0x70>
 800b26c:	4622      	mov	r2, r4
 800b26e:	f10d 0105 	add.w	r1, sp, #5
 800b272:	4628      	mov	r0, r5
 800b274:	f003 fb48 	bl	800e908 <memcpy>
  
  return 0;
}
 800b278:	4638      	mov	r0, r7
 800b27a:	b029      	add	sp, #164	; 0xa4
 800b27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 800b27e:	4662      	mov	r2, ip
 800b280:	e7f5      	b.n	800b26e <aci_hal_read_config_data+0x60>
    return BLE_STATUS_TIMEOUT;
 800b282:	27ff      	movs	r7, #255	; 0xff
 800b284:	e7f8      	b.n	800b278 <aci_hal_read_config_data+0x6a>

0800b286 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800b286:	b500      	push	{lr}
 800b288:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 800b28a:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800b28e:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b292:	2100      	movs	r1, #0
 800b294:	9102      	str	r1, [sp, #8]
 800b296:	9103      	str	r1, [sp, #12]
 800b298:	9104      	str	r1, [sp, #16]
 800b29a:	9105      	str	r1, [sp, #20]
 800b29c:	9106      	str	r1, [sp, #24]
 800b29e:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_VENDOR_CMD;
 800b2a0:	233f      	movs	r3, #63	; 0x3f
 800b2a2:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800b2a6:	230f      	movs	r3, #15
 800b2a8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800b2ac:	ab01      	add	r3, sp, #4
 800b2ae:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800b2b4:	f10d 0303 	add.w	r3, sp, #3
 800b2b8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800b2be:	a802      	add	r0, sp, #8
 800b2c0:	f000 f95a 	bl	800b578 <hci_send_req>
 800b2c4:	2800      	cmp	r0, #0
 800b2c6:	db04      	blt.n	800b2d2 <aci_hal_set_tx_power_level+0x4c>
    return BLE_STATUS_TIMEOUT;

  return status;
 800b2c8:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 800b2cc:	b009      	add	sp, #36	; 0x24
 800b2ce:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800b2d2:	20ff      	movs	r0, #255	; 0xff
 800b2d4:	e7fa      	b.n	800b2cc <aci_hal_set_tx_power_level+0x46>

0800b2d6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800b2d6:	b530      	push	{r4, r5, lr}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	4605      	mov	r5, r0
 800b2dc:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800b2de:	ab02      	add	r3, sp, #8
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	f10d 030a 	add.w	r3, sp, #10
 800b2e6:	f10d 020e 	add.w	r2, sp, #14
 800b2ea:	a903      	add	r1, sp, #12
 800b2ec:	f10d 000f 	add.w	r0, sp, #15
 800b2f0:	f000 f83a 	bl	800b368 <hci_le_read_local_version>
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800b2f4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800b2f8:	d115      	bne.n	800b326 <getBlueNRGVersion+0x50>
    *hwVersion = hci_revision >> 8;
 800b2fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b2fe:	0a1a      	lsrs	r2, r3, #8
 800b300:	702a      	strb	r2, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 800b302:	021b      	lsls	r3, r3, #8
 800b304:	b29a      	uxth	r2, r3
 800b306:	8022      	strh	r2, [r4, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800b308:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800b30c:	091b      	lsrs	r3, r3, #4
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b314:	4313      	orrs	r3, r2
 800b316:	b21b      	sxth	r3, r3
 800b318:	8023      	strh	r3, [r4, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800b31a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b31e:	f002 020f 	and.w	r2, r2, #15
 800b322:	4313      	orrs	r3, r2
 800b324:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800b326:	b005      	add	sp, #20
 800b328:	bd30      	pop	{r4, r5, pc}

0800b32a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800b32a:	b500      	push	{lr}
 800b32c:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b32e:	2100      	movs	r1, #0
 800b330:	9102      	str	r1, [sp, #8]
 800b332:	9103      	str	r1, [sp, #12]
 800b334:	9104      	str	r1, [sp, #16]
 800b336:	9105      	str	r1, [sp, #20]
 800b338:	9106      	str	r1, [sp, #24]
 800b33a:	9107      	str	r1, [sp, #28]
  rq.ogf = OGF_HOST_CTL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800b342:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800b346:	f10d 0307 	add.w	r3, sp, #7
 800b34a:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
 800b34c:	2301      	movs	r3, #1
 800b34e:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b350:	a802      	add	r0, sp, #8
 800b352:	f000 f911 	bl	800b578 <hci_send_req>
 800b356:	2800      	cmp	r0, #0
 800b358:	db04      	blt.n	800b364 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 800b35a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b35e:	b009      	add	sp, #36	; 0x24
 800b360:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLE_STATUS_TIMEOUT;
 800b364:	20ff      	movs	r0, #255	; 0xff
 800b366:	e7fa      	b.n	800b35e <hci_reset+0x34>

0800b368 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b36c:	b08a      	sub	sp, #40	; 0x28
 800b36e:	4680      	mov	r8, r0
 800b370:	460f      	mov	r7, r1
 800b372:	4616      	mov	r6, r2
 800b374:	461d      	mov	r5, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800b376:	ac01      	add	r4, sp, #4
 800b378:	2100      	movs	r1, #0
 800b37a:	9101      	str	r1, [sp, #4]
 800b37c:	9102      	str	r1, [sp, #8]
 800b37e:	f88d 100c 	strb.w	r1, [sp, #12]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b382:	9104      	str	r1, [sp, #16]
 800b384:	9105      	str	r1, [sp, #20]
 800b386:	9106      	str	r1, [sp, #24]
 800b388:	9107      	str	r1, [sp, #28]
 800b38a:	9108      	str	r1, [sp, #32]
 800b38c:	9109      	str	r1, [sp, #36]	; 0x24
  rq.ogf = OGF_INFO_PARAM;
 800b38e:	2304      	movs	r3, #4
 800b390:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800b394:	2301      	movs	r3, #1
 800b396:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800b39a:	9408      	str	r4, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800b39c:	2309      	movs	r3, #9
 800b39e:	9309      	str	r3, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b3a0:	a804      	add	r0, sp, #16
 800b3a2:	f000 f8e9 	bl	800b578 <hci_send_req>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	db16      	blt.n	800b3d8 <hci_le_read_local_version+0x70>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800b3aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b3ae:	b980      	cbnz	r0, 800b3d2 <hci_le_read_local_version+0x6a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800b3b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b3b4:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 800b3b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b3bc:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 800b3be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b3c2:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800b3c4:	f8bd 3009 	ldrh.w	r3, [sp, #9]
 800b3c8:	802b      	strh	r3, [r5, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 800b3ca:	f8bd 200b 	ldrh.w	r2, [sp, #11]
 800b3ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b3d0:	801a      	strh	r2, [r3, #0]
  
  return 0;
}
 800b3d2:	b00a      	add	sp, #40	; 0x28
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 800b3d8:	20ff      	movs	r0, #255	; 0xff
 800b3da:	e7fa      	b.n	800b3d2 <hci_le_read_local_version+0x6a>

0800b3dc <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3de:	b091      	sub	sp, #68	; 0x44
 800b3e0:	4604      	mov	r4, r0
 800b3e2:	460d      	mov	r5, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	2620      	movs	r6, #32
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f003 fa99 	bl	800e924 <memset>
  scan_resp_cp.length = length;
 800b3f2:	f88d 4008 	strb.w	r4, [sp, #8]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	2c1f      	cmp	r4, #31
 800b3fa:	bf28      	it	cs
 800b3fc:	221f      	movcs	r2, #31
 800b3fe:	4629      	mov	r1, r5
 800b400:	f10d 0009 	add.w	r0, sp, #9
 800b404:	f003 fa80 	bl	800e908 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800b408:	2100      	movs	r1, #0
 800b40a:	910a      	str	r1, [sp, #40]	; 0x28
 800b40c:	910b      	str	r1, [sp, #44]	; 0x2c
 800b40e:	910c      	str	r1, [sp, #48]	; 0x30
 800b410:	910d      	str	r1, [sp, #52]	; 0x34
 800b412:	910e      	str	r1, [sp, #56]	; 0x38
 800b414:	910f      	str	r1, [sp, #60]	; 0x3c
  rq.ogf = OGF_LE_CTL;
 800b416:	2308      	movs	r3, #8
 800b418:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800b41c:	2309      	movs	r3, #9
 800b41e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
  rq.cparam = &scan_resp_cp;
 800b422:	970c      	str	r7, [sp, #48]	; 0x30
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 800b424:	960d      	str	r6, [sp, #52]	; 0x34
  rq.rparam = &status;
 800b426:	f10d 0307 	add.w	r3, sp, #7
 800b42a:	930e      	str	r3, [sp, #56]	; 0x38
  rq.rlen = 1;
 800b42c:	2301      	movs	r3, #1
 800b42e:	930f      	str	r3, [sp, #60]	; 0x3c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800b430:	a80a      	add	r0, sp, #40	; 0x28
 800b432:	f000 f8a1 	bl	800b578 <hci_send_req>
 800b436:	2800      	cmp	r0, #0
 800b438:	db03      	blt.n	800b442 <hci_le_set_scan_resp_data+0x66>
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800b43a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800b43e:	b011      	add	sp, #68	; 0x44
 800b440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800b442:	20ff      	movs	r0, #255	; 0xff
 800b444:	e7fb      	b.n	800b43e <hci_le_set_scan_resp_data+0x62>

0800b446 <verify_packet>:
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800b446:	7a03      	ldrb	r3, [r0, #8]
 800b448:	2b04      	cmp	r3, #4
 800b44a:	d107      	bne.n	800b45c <verify_packet+0x16>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800b44c:	7a82      	ldrb	r2, [r0, #10]
 800b44e:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800b452:	3b03      	subs	r3, #3
 800b454:	429a      	cmp	r2, r3
 800b456:	d103      	bne.n	800b460 <verify_packet+0x1a>
    return 2; /* Wrong length (packet truncated or too long) */
  
  return 0;      
 800b458:	2000      	movs	r0, #0
 800b45a:	4770      	bx	lr
    return 1; /* Incorrect type */
 800b45c:	2001      	movs	r0, #1
 800b45e:	4770      	bx	lr
    return 2; /* Wrong length (packet truncated or too long) */
 800b460:	2002      	movs	r0, #2
}
 800b462:	4770      	bx	lr

0800b464 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800b464:	b510      	push	{r4, lr}
 800b466:	b0a2      	sub	sp, #136	; 0x88
 800b468:	4614      	mov	r4, r2
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800b46a:	f3c1 0c09 	ubfx	ip, r1, #0, #10
 800b46e:	ea4c 2c80 	orr.w	ip, ip, r0, lsl #10
 800b472:	f8ad c004 	strh.w	ip, [sp, #4]
  hc.plen = plen;
 800b476:	f88d 2006 	strb.w	r2, [sp, #6]

  payload[0] = HCI_COMMAND_PKT;
 800b47a:	2101      	movs	r1, #1
 800b47c:	f88d 1008 	strb.w	r1, [sp, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800b480:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800b484:	b2d1      	uxtb	r1, r2
 800b486:	f8ad 0009 	strh.w	r0, [sp, #9]
 800b48a:	f88d 100b 	strb.w	r1, [sp, #11]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800b48e:	4619      	mov	r1, r3
 800b490:	a803      	add	r0, sp, #12
 800b492:	f003 fa39 	bl	800e908 <memcpy>
  
  if (hciContext.io.Send)
 800b496:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <send_cmd+0x44>)
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	b113      	cbz	r3, 800b4a2 <send_cmd+0x3e>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800b49c:	1d21      	adds	r1, r4, #4
 800b49e:	a802      	add	r0, sp, #8
 800b4a0:	4798      	blx	r3
  }
}
 800b4a2:	b022      	add	sp, #136	; 0x88
 800b4a4:	bd10      	pop	{r4, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200026a8 	.word	0x200026a8

0800b4ac <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800b4ac:	b510      	push	{r4, lr}
 800b4ae:	b082      	sub	sp, #8
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b4b0:	e00a      	b.n	800b4c8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800b4b2:	4c09      	ldr	r4, [pc, #36]	; (800b4d8 <free_event_list+0x2c>)
 800b4b4:	a901      	add	r1, sp, #4
 800b4b6:	f104 0020 	add.w	r0, r4, #32
 800b4ba:	f000 f997 	bl	800b7ec <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800b4be:	9901      	ldr	r1, [sp, #4]
 800b4c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b4c4:	f000 f97b 	bl	800b7be <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800b4c8:	4804      	ldr	r0, [pc, #16]	; (800b4dc <free_event_list+0x30>)
 800b4ca:	f000 f9b1 	bl	800b830 <list_get_size>
 800b4ce:	2801      	cmp	r0, #1
 800b4d0:	ddef      	ble.n	800b4b2 <free_event_list+0x6>
  }
}
 800b4d2:	b002      	add	sp, #8
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	200026a8 	.word	0x200026a8
 800b4dc:	200026d0 	.word	0x200026d0

0800b4e0 <move_list>:
{
 800b4e0:	b530      	push	{r4, r5, lr}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	460c      	mov	r4, r1
  while (!list_is_empty(src_list))
 800b4e8:	e007      	b.n	800b4fa <move_list+0x1a>
    list_remove_tail(src_list, &tmp_node);
 800b4ea:	a901      	add	r1, sp, #4
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f000 f98e 	bl	800b80e <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800b4f2:	9901      	ldr	r1, [sp, #4]
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f000 f956 	bl	800b7a6 <list_insert_head>
  while (!list_is_empty(src_list))
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 f947 	bl	800b78e <list_is_empty>
 800b500:	2800      	cmp	r0, #0
 800b502:	d0f2      	beq.n	800b4ea <move_list+0xa>
}
 800b504:	b003      	add	sp, #12
 800b506:	bd30      	pop	{r4, r5, pc}

0800b508 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b508:	b510      	push	{r4, lr}
  uint8_t index;

  if(UserEvtRx != NULL)
 800b50a:	b108      	cbz	r0, 800b510 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800b50c:	4a12      	ldr	r2, [pc, #72]	; (800b558 <hci_init+0x50>)
 800b50e:	61d0      	str	r0, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800b510:	4c11      	ldr	r4, [pc, #68]	; (800b558 <hci_init+0x50>)
 800b512:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b516:	f000 f937 	bl	800b788 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800b51a:	f104 0020 	add.w	r0, r4, #32
 800b51e:	f000 f933 	bl	800b788 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800b522:	f7f9 ff63 	bl	80053ec <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b526:	2400      	movs	r4, #0
 800b528:	e00a      	b.n	800b540 <hci_init+0x38>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800b52a:	480b      	ldr	r0, [pc, #44]	; (800b558 <hci_init+0x50>)
 800b52c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b530:	218c      	movs	r1, #140	; 0x8c
 800b532:	fb01 3104 	mla	r1, r1, r4, r3
 800b536:	3028      	adds	r0, #40	; 0x28
 800b538:	f000 f941 	bl	800b7be <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800b53c:	3401      	adds	r4, #1
 800b53e:	b2e4      	uxtb	r4, r4
 800b540:	2c04      	cmp	r4, #4
 800b542:	d9f2      	bls.n	800b52a <hci_init+0x22>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800b544:	4b04      	ldr	r3, [pc, #16]	; (800b558 <hci_init+0x50>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	b10b      	cbz	r3, 800b54e <hci_init+0x46>
 800b54a:	2000      	movs	r0, #0
 800b54c:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800b54e:	4b02      	ldr	r3, [pc, #8]	; (800b558 <hci_init+0x50>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	b103      	cbz	r3, 800b556 <hci_init+0x4e>
 800b554:	4798      	blx	r3
}
 800b556:	bd10      	pop	{r4, pc}
 800b558:	200026a8 	.word	0x200026a8

0800b55c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b55c:	6802      	ldr	r2, [r0, #0]
 800b55e:	4b05      	ldr	r3, [pc, #20]	; (800b574 <hci_register_io_bus+0x18>)
 800b560:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 800b562:	68c2      	ldr	r2, [r0, #12]
 800b564:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 800b566:	6902      	ldr	r2, [r0, #16]
 800b568:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b56a:	6982      	ldr	r2, [r0, #24]
 800b56c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;
 800b56e:	6882      	ldr	r2, [r0, #8]
 800b570:	609a      	str	r2, [r3, #8]
}
 800b572:	4770      	bx	lr
 800b574:	200026a8 	.word	0x200026a8

0800b578 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	4605      	mov	r5, r0
 800b57e:	460c      	mov	r4, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b580:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800b584:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b588:	8802      	ldrh	r2, [r0, #0]
 800b58a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800b58e:	b29e      	uxth	r6, r3
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	9303      	str	r3, [sp, #12]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b594:	a801      	add	r0, sp, #4
 800b596:	f000 f8f7 	bl	800b788 <list_init_head>

  free_event_list();
 800b59a:	f7ff ff87 	bl	800b4ac <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b59e:	68ab      	ldr	r3, [r5, #8]
 800b5a0:	7b2a      	ldrb	r2, [r5, #12]
 800b5a2:	8869      	ldrh	r1, [r5, #2]
 800b5a4:	8828      	ldrh	r0, [r5, #0]
 800b5a6:	f7ff ff5d 	bl	800b464 <send_cmd>
  
  if (async)
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	f040 8086 	bne.w	800b6bc <hci_send_req+0x144>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b5b0:	f7fb fd9a 	bl	80070e8 <HAL_GetTick>
 800b5b4:	4604      	mov	r4, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b5b6:	f7fb fd97 	bl	80070e8 <HAL_GetTick>
 800b5ba:	1b00      	subs	r0, r0, r4
 800b5bc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b5c0:	d822      	bhi.n	800b608 <hci_send_req+0x90>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b5c2:	483f      	ldr	r0, [pc, #252]	; (800b6c0 <hci_send_req+0x148>)
 800b5c4:	f000 f8e3 	bl	800b78e <list_is_empty>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d1f4      	bne.n	800b5b6 <hci_send_req+0x3e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b5cc:	a903      	add	r1, sp, #12
 800b5ce:	483c      	ldr	r0, [pc, #240]	; (800b6c0 <hci_send_req+0x148>)
 800b5d0:	f000 f90c 	bl	800b7ec <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b5d4:	9b03      	ldr	r3, [sp, #12]

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b5d6:	7a1a      	ldrb	r2, [r3, #8]
 800b5d8:	2a04      	cmp	r2, #4
 800b5da:	d128      	bne.n	800b62e <hci_send_req+0xb6>
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b5dc:	f103 010b 	add.w	r1, r3, #11
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b5e0:	f893 0088 	ldrb.w	r0, [r3, #136]	; 0x88
 800b5e4:	1ec4      	subs	r4, r0, #3
    
      switch (event_pckt->evt) 
 800b5e6:	7a5a      	ldrb	r2, [r3, #9]
 800b5e8:	2a10      	cmp	r2, #16
 800b5ea:	d00d      	beq.n	800b608 <hci_send_req+0x90>
 800b5ec:	d819      	bhi.n	800b622 <hci_send_req+0xaa>
 800b5ee:	2a0e      	cmp	r2, #14
 800b5f0:	d036      	beq.n	800b660 <hci_send_req+0xe8>
 800b5f2:	2a0f      	cmp	r2, #15
 800b5f4:	d11b      	bne.n	800b62e <hci_send_req+0xb6>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800b5f6:	f8b3 200d 	ldrh.w	r2, [r3, #13]
 800b5fa:	42b2      	cmp	r2, r6
 800b5fc:	d104      	bne.n	800b608 <hci_send_req+0x90>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b5fe:	686a      	ldr	r2, [r5, #4]
 800b600:	2a0f      	cmp	r2, #15
 800b602:	d024      	beq.n	800b64e <hci_send_req+0xd6>
          if (cs->status) {
 800b604:	7adb      	ldrb	r3, [r3, #11]
 800b606:	b193      	cbz	r3, 800b62e <hci_send_req+0xb6>
      hciReadPacket=NULL;
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b608:	9903      	ldr	r1, [sp, #12]
 800b60a:	b111      	cbz	r1, 800b612 <hci_send_req+0x9a>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b60c:	482d      	ldr	r0, [pc, #180]	; (800b6c4 <hci_send_req+0x14c>)
 800b60e:	f000 f8ca 	bl	800b7a6 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b612:	a901      	add	r1, sp, #4
 800b614:	482a      	ldr	r0, [pc, #168]	; (800b6c0 <hci_send_req+0x148>)
 800b616:	f7ff ff63 	bl	800b4e0 <move_list>

  return -1;
 800b61a:	f04f 30ff 	mov.w	r0, #4294967295
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);

  return 0;
}
 800b61e:	b004      	add	sp, #16
 800b620:	bd70      	pop	{r4, r5, r6, pc}
      switch (event_pckt->evt) 
 800b622:	2a3e      	cmp	r2, #62	; 0x3e
 800b624:	d103      	bne.n	800b62e <hci_send_req+0xb6>
        if (me->subevent != r->event)
 800b626:	7ad9      	ldrb	r1, [r3, #11]
 800b628:	686a      	ldr	r2, [r5, #4]
 800b62a:	4291      	cmp	r1, r2
 800b62c:	d033      	beq.n	800b696 <hci_send_req+0x11e>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b62e:	4825      	ldr	r0, [pc, #148]	; (800b6c4 <hci_send_req+0x14c>)
 800b630:	f000 f8ad 	bl	800b78e <list_is_empty>
 800b634:	b120      	cbz	r0, 800b640 <hci_send_req+0xc8>
 800b636:	4822      	ldr	r0, [pc, #136]	; (800b6c0 <hci_send_req+0x148>)
 800b638:	f000 f8a9 	bl	800b78e <list_is_empty>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d136      	bne.n	800b6ae <hci_send_req+0x136>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b640:	9903      	ldr	r1, [sp, #12]
 800b642:	a801      	add	r0, sp, #4
 800b644:	f000 f8bb 	bl	800b7be <list_insert_tail>
      hciReadPacket=NULL;
 800b648:	2300      	movs	r3, #0
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	e7b0      	b.n	800b5b0 <hci_send_req+0x38>
        r->rlen = MIN(len, r->rlen);
 800b64e:	696a      	ldr	r2, [r5, #20]
 800b650:	42a2      	cmp	r2, r4
 800b652:	bf28      	it	cs
 800b654:	4622      	movcs	r2, r4
 800b656:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b658:	6928      	ldr	r0, [r5, #16]
 800b65a:	f003 f955 	bl	800e908 <memcpy>
        goto done;
 800b65e:	e00d      	b.n	800b67c <hci_send_req+0x104>
        if (cc->opcode != opcode)
 800b660:	899a      	ldrh	r2, [r3, #12]
 800b662:	42b2      	cmp	r2, r6
 800b664:	d1d0      	bne.n	800b608 <hci_send_req+0x90>
        len -= EVT_CMD_COMPLETE_SIZE;
 800b666:	1f82      	subs	r2, r0, #6
        r->rlen = MIN(len, r->rlen);
 800b668:	6968      	ldr	r0, [r5, #20]
 800b66a:	4282      	cmp	r2, r0
 800b66c:	bf28      	it	cs
 800b66e:	4602      	movcs	r2, r0
 800b670:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b672:	f103 010e 	add.w	r1, r3, #14
 800b676:	6928      	ldr	r0, [r5, #16]
 800b678:	f003 f946 	bl	800e908 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b67c:	4c12      	ldr	r4, [pc, #72]	; (800b6c8 <hci_send_req+0x150>)
 800b67e:	9903      	ldr	r1, [sp, #12]
 800b680:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b684:	f000 f88f 	bl	800b7a6 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b688:	a901      	add	r1, sp, #4
 800b68a:	f104 0020 	add.w	r0, r4, #32
 800b68e:	f7ff ff27 	bl	800b4e0 <move_list>
  return 0;
 800b692:	2000      	movs	r0, #0
 800b694:	e7c3      	b.n	800b61e <hci_send_req+0xa6>
        len -= 1;
 800b696:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 800b698:	696a      	ldr	r2, [r5, #20]
 800b69a:	4282      	cmp	r2, r0
 800b69c:	bf28      	it	cs
 800b69e:	4602      	movcs	r2, r0
 800b6a0:	616a      	str	r2, [r5, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b6a2:	f103 010c 	add.w	r1, r3, #12
 800b6a6:	6928      	ldr	r0, [r5, #16]
 800b6a8:	f003 f92e 	bl	800e908 <memcpy>
        goto done;
 800b6ac:	e7e6      	b.n	800b67c <hci_send_req+0x104>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b6ae:	9903      	ldr	r1, [sp, #12]
 800b6b0:	4804      	ldr	r0, [pc, #16]	; (800b6c4 <hci_send_req+0x14c>)
 800b6b2:	f000 f884 	bl	800b7be <list_insert_tail>
      hciReadPacket=NULL;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	e779      	b.n	800b5b0 <hci_send_req+0x38>
    return 0;
 800b6bc:	2000      	movs	r0, #0
 800b6be:	e7ae      	b.n	800b61e <hci_send_req+0xa6>
 800b6c0:	200026c8 	.word	0x200026c8
 800b6c4:	200026d0 	.word	0x200026d0
 800b6c8:	200026a8 	.word	0x200026a8

0800b6cc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b6cc:	b510      	push	{r4, lr}
 800b6ce:	b082      	sub	sp, #8
  tHciDataPacket * hciReadPacket = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b6d4:	e006      	b.n	800b6e4 <hci_user_evt_proc+0x18>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);

    if (hciContext.UserEvtRx != NULL)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b6d6:	9801      	ldr	r0, [sp, #4]
 800b6d8:	3008      	adds	r0, #8
 800b6da:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b6dc:	9901      	ldr	r1, [sp, #4]
 800b6de:	4809      	ldr	r0, [pc, #36]	; (800b704 <hci_user_evt_proc+0x38>)
 800b6e0:	f000 f86d 	bl	800b7be <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b6e4:	4808      	ldr	r0, [pc, #32]	; (800b708 <hci_user_evt_proc+0x3c>)
 800b6e6:	f000 f852 	bl	800b78e <list_is_empty>
 800b6ea:	b948      	cbnz	r0, 800b700 <hci_user_evt_proc+0x34>
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b6ec:	4c07      	ldr	r4, [pc, #28]	; (800b70c <hci_user_evt_proc+0x40>)
 800b6ee:	a901      	add	r1, sp, #4
 800b6f0:	f104 0020 	add.w	r0, r4, #32
 800b6f4:	f000 f87a 	bl	800b7ec <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800b6f8:	69e3      	ldr	r3, [r4, #28]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1eb      	bne.n	800b6d6 <hci_user_evt_proc+0xa>
 800b6fe:	e7ed      	b.n	800b6dc <hci_user_evt_proc+0x10>
  }
}
 800b700:	b002      	add	sp, #8
 800b702:	bd10      	pop	{r4, pc}
 800b704:	200026d0 	.word	0x200026d0
 800b708:	200026c8 	.word	0x200026c8
 800b70c:	200026a8 	.word	0x200026a8

0800b710 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b710:	b530      	push	{r4, r5, lr}
 800b712:	b083      	sub	sp, #12
  tHciDataPacket * hciReadPacket = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b718:	4818      	ldr	r0, [pc, #96]	; (800b77c <hci_notify_asynch_evt+0x6c>)
 800b71a:	f000 f838 	bl	800b78e <list_is_empty>
 800b71e:	b118      	cbz	r0, 800b728 <hci_notify_asynch_evt+0x18>
      }
    }
  }
  else 
  {
    ret = 1;
 800b720:	2401      	movs	r4, #1
  }
  return ret;

}
 800b722:	4620      	mov	r0, r4
 800b724:	b003      	add	sp, #12
 800b726:	bd30      	pop	{r4, r5, pc}
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b728:	4c15      	ldr	r4, [pc, #84]	; (800b780 <hci_notify_asynch_evt+0x70>)
 800b72a:	a901      	add	r1, sp, #4
 800b72c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b730:	f000 f85c 	bl	800b7ec <list_remove_head>
    if (hciContext.io.Receive)
 800b734:	68e3      	ldr	r3, [r4, #12]
 800b736:	b1fb      	cbz	r3, 800b778 <hci_notify_asynch_evt+0x68>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b738:	2180      	movs	r1, #128	; 0x80
 800b73a:	9801      	ldr	r0, [sp, #4]
 800b73c:	3008      	adds	r0, #8
 800b73e:	4798      	blx	r3
      if (data_len > 0)
 800b740:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800b744:	d012      	beq.n	800b76c <hci_notify_asynch_evt+0x5c>
        hciReadPacket->data_len = data_len;
 800b746:	9d01      	ldr	r5, [sp, #4]
 800b748:	f885 0088 	strb.w	r0, [r5, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b74c:	4628      	mov	r0, r5
 800b74e:	f7ff fe7a 	bl	800b446 <verify_packet>
 800b752:	4604      	mov	r4, r0
 800b754:	b920      	cbnz	r0, 800b760 <hci_notify_asynch_evt+0x50>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b756:	4629      	mov	r1, r5
 800b758:	480a      	ldr	r0, [pc, #40]	; (800b784 <hci_notify_asynch_evt+0x74>)
 800b75a:	f000 f830 	bl	800b7be <list_insert_tail>
 800b75e:	e7e0      	b.n	800b722 <hci_notify_asynch_evt+0x12>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b760:	4629      	mov	r1, r5
 800b762:	4806      	ldr	r0, [pc, #24]	; (800b77c <hci_notify_asynch_evt+0x6c>)
 800b764:	f000 f81f 	bl	800b7a6 <list_insert_head>
  int32_t ret = 0;
 800b768:	2400      	movs	r4, #0
 800b76a:	e7da      	b.n	800b722 <hci_notify_asynch_evt+0x12>
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b76c:	9901      	ldr	r1, [sp, #4]
 800b76e:	4803      	ldr	r0, [pc, #12]	; (800b77c <hci_notify_asynch_evt+0x6c>)
 800b770:	f000 f819 	bl	800b7a6 <list_insert_head>
  int32_t ret = 0;
 800b774:	2400      	movs	r4, #0
 800b776:	e7d4      	b.n	800b722 <hci_notify_asynch_evt+0x12>
 800b778:	2400      	movs	r4, #0
  return ret;
 800b77a:	e7d2      	b.n	800b722 <hci_notify_asynch_evt+0x12>
 800b77c:	200026d0 	.word	0x200026d0
 800b780:	200026a8 	.word	0x200026a8
 800b784:	200026c8 	.word	0x200026c8

0800b788 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 800b788:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800b78a:	6040      	str	r0, [r0, #4]
}
 800b78c:	4770      	bx	lr

0800b78e <list_is_empty>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b78e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b792:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b794:	6802      	ldr	r2, [r0, #0]
 800b796:	4282      	cmp	r2, r0
 800b798:	d003      	beq.n	800b7a2 <list_is_empty+0x14>
  {
    return_value = 1;
  }
  else
  {
    return_value = 0;
 800b79a:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b79c:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800b7a0:	4770      	bx	lr
    return_value = 1;
 800b7a2:	2001      	movs	r0, #1
 800b7a4:	e7fa      	b.n	800b79c <list_is_empty+0xe>

0800b7a6 <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7a6:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7aa:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b7ac:	6802      	ldr	r2, [r0, #0]
 800b7ae:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 800b7b0:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800b7b2:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800b7b4:	680a      	ldr	r2, [r1, #0]
 800b7b6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7b8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b7bc:	4770      	bx	lr

0800b7be <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7be:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c2:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b7c4:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
 800b7c6:	6842      	ldr	r2, [r0, #4]
 800b7c8:	604a      	str	r2, [r1, #4]
  listHead->prev = node;
 800b7ca:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800b7cc:	684a      	ldr	r2, [r1, #4]
 800b7ce:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7d0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b7d4:	4770      	bx	lr

0800b7d6 <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7d6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7da:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b7dc:	6841      	ldr	r1, [r0, #4]
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	600b      	str	r3, [r1, #0]
  (node->next)->prev = node->prev;
 800b7e2:	6841      	ldr	r1, [r0, #4]
 800b7e4:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e6:	f382 8810 	msr	PRIMASK, r2
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b7ea:	4770      	bx	lr

0800b7ec <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b7f4:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b7f6:	6800      	ldr	r0, [r0, #0]
 800b7f8:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->next);
 800b7fa:	f7ff ffec 	bl	800b7d6 <list_remove_node>
  (*node)->next = NULL;
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b804:	6822      	ldr	r2, [r4, #0]
 800b806:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b808:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b80c:	bd38      	pop	{r3, r4, r5, pc}

0800b80e <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b80e:	b538      	push	{r3, r4, r5, lr}
 800b810:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b812:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b816:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b818:	6840      	ldr	r0, [r0, #4]
 800b81a:	6008      	str	r0, [r1, #0]
  list_remove_node (listHead->prev);
 800b81c:	f7ff ffdb 	bl	800b7d6 <list_remove_node>
  (*node)->next = NULL;
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	2300      	movs	r3, #0
 800b824:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800b826:	6822      	ldr	r2, [r4, #0]
 800b828:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b82a:	f385 8810 	msr	PRIMASK, r5
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b82e:	bd38      	pop	{r3, r4, r5, pc}

0800b830 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b830:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b832:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800b836:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b838:	6803      	ldr	r3, [r0, #0]
  int size = 0;
 800b83a:	2000      	movs	r0, #0
  while (temp != listHead)
 800b83c:	e001      	b.n	800b842 <list_get_size+0x12>
  {
    size++;
 800b83e:	3001      	adds	r0, #1
    temp = temp->next;		
 800b840:	681b      	ldr	r3, [r3, #0]
  while (temp != listHead)
 800b842:	4293      	cmp	r3, r2
 800b844:	d1fb      	bne.n	800b83e <list_get_size+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b846:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 800b84a:	4770      	bx	lr

0800b84c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b84c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b84e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800b852:	b184      	cbz	r4, 800b876 <USBD_CDC_EP0_RxReady+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b854:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b858:	b17b      	cbz	r3, 800b87a <USBD_CDC_EP0_RxReady+0x2e>
 800b85a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b85e:	28ff      	cmp	r0, #255	; 0xff
 800b860:	d00d      	beq.n	800b87e <USBD_CDC_EP0_RxReady+0x32>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b868:	4621      	mov	r1, r4
 800b86a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800b86c:	23ff      	movs	r3, #255	; 0xff
 800b86e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b872:	2000      	movs	r0, #0
}
 800b874:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800b876:	2003      	movs	r0, #3
 800b878:	e7fc      	b.n	800b874 <USBD_CDC_EP0_RxReady+0x28>
  return (uint8_t)USBD_OK;
 800b87a:	2000      	movs	r0, #0
 800b87c:	e7fa      	b.n	800b874 <USBD_CDC_EP0_RxReady+0x28>
 800b87e:	2000      	movs	r0, #0
 800b880:	e7f8      	b.n	800b874 <USBD_CDC_EP0_RxReady+0x28>
	...

0800b884 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b884:	2343      	movs	r3, #67	; 0x43
 800b886:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800b888:	4800      	ldr	r0, [pc, #0]	; (800b88c <USBD_CDC_GetFSCfgDesc+0x8>)
 800b88a:	4770      	bx	lr
 800b88c:	20000090 	.word	0x20000090

0800b890 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b890:	2343      	movs	r3, #67	; 0x43
 800b892:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800b894:	4800      	ldr	r0, [pc, #0]	; (800b898 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b896:	4770      	bx	lr
 800b898:	200000d4 	.word	0x200000d4

0800b89c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b89c:	2343      	movs	r3, #67	; 0x43
 800b89e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b8a0:	4800      	ldr	r0, [pc, #0]	; (800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b8a2:	4770      	bx	lr
 800b8a4:	20000118 	.word	0x20000118

0800b8a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8a8:	230a      	movs	r3, #10
 800b8aa:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 800b8ac:	4800      	ldr	r0, [pc, #0]	; (800b8b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b8ae:	4770      	bx	lr
 800b8b0:	2000015c 	.word	0x2000015c

0800b8b4 <USBD_CDC_DataOut>:
{
 800b8b4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8b6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 800b8ba:	b175      	cbz	r5, 800b8da <USBD_CDC_DataOut+0x26>
 800b8bc:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8be:	f7fb f9b7 	bl	8006c30 <USBD_LL_GetRxDataSize>
 800b8c2:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8c6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800b8d0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800b8d4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 800b8d6:	2000      	movs	r0, #0
}
 800b8d8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800b8da:	2003      	movs	r0, #3
 800b8dc:	e7fc      	b.n	800b8d8 <USBD_CDC_DataOut+0x24>

0800b8de <USBD_CDC_DataIn>:
{
 800b8de:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b8e0:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 800b8e4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800b8e8:	b353      	cbz	r3, 800b940 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b8ea:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800b8ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800b8f2:	6992      	ldr	r2, [r2, #24]
 800b8f4:	b14a      	cbz	r2, 800b90a <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b8f6:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 800b8fa:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 800b8fe:	6c64      	ldr	r4, [r4, #68]	; 0x44
 800b900:	fbb2 fcf4 	udiv	ip, r2, r4
 800b904:	fb04 221c 	mls	r2, r4, ip, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b908:	b172      	cbz	r2, 800b928 <USBD_CDC_DataIn+0x4a>
    hcdc->TxState = 0U;
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b910:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800b914:	6914      	ldr	r4, [r2, #16]
 800b916:	b1ac      	cbz	r4, 800b944 <USBD_CDC_DataIn+0x66>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b918:	460a      	mov	r2, r1
 800b91a:	f503 7104 	add.w	r1, r3, #528	; 0x210
 800b91e:	f8d3 0208 	ldr.w	r0, [r3, #520]	; 0x208
 800b922:	47a0      	blx	r4
  return (uint8_t)USBD_OK;
 800b924:	2000      	movs	r0, #0
}
 800b926:	bd10      	pop	{r4, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800b928:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800b92c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b930:	2400      	movs	r4, #0
 800b932:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b934:	4623      	mov	r3, r4
 800b936:	4622      	mov	r2, r4
 800b938:	f7fb f96c 	bl	8006c14 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800b93c:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b93e:	e7f2      	b.n	800b926 <USBD_CDC_DataIn+0x48>
    return (uint8_t)USBD_FAIL;
 800b940:	2003      	movs	r0, #3
 800b942:	e7f0      	b.n	800b926 <USBD_CDC_DataIn+0x48>
  return (uint8_t)USBD_OK;
 800b944:	2000      	movs	r0, #0
 800b946:	e7ee      	b.n	800b926 <USBD_CDC_DataIn+0x48>

0800b948 <USBD_CDC_Setup>:
{
 800b948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b94a:	b083      	sub	sp, #12
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b94c:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800b950:	2300      	movs	r3, #0
 800b952:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800b956:	f8ad 3004 	strh.w	r3, [sp, #4]
  if (hcdc == NULL)
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	d06c      	beq.n	800ba38 <USBD_CDC_Setup+0xf0>
 800b95e:	4607      	mov	r7, r0
 800b960:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b962:	780b      	ldrb	r3, [r1, #0]
 800b964:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800b968:	d02a      	beq.n	800b9c0 <USBD_CDC_Setup+0x78>
 800b96a:	2d20      	cmp	r5, #32
 800b96c:	d15e      	bne.n	800ba2c <USBD_CDC_Setup+0xe4>
      if (req->wLength != 0U)
 800b96e:	88ca      	ldrh	r2, [r1, #6]
 800b970:	b1f2      	cbz	r2, 800b9b0 <USBD_CDC_Setup+0x68>
        if ((req->bmRequest & 0x80U) != 0U)
 800b972:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b976:	d00f      	beq.n	800b998 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b978:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	4631      	mov	r1, r6
 800b980:	7860      	ldrb	r0, [r4, #1]
 800b982:	4798      	blx	r3
          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b984:	88e2      	ldrh	r2, [r4, #6]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b986:	2a07      	cmp	r2, #7
 800b988:	bf28      	it	cs
 800b98a:	2207      	movcs	r2, #7
 800b98c:	4631      	mov	r1, r6
 800b98e:	4638      	mov	r0, r7
 800b990:	f000 fdfa 	bl	800c588 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b994:	2500      	movs	r5, #0
 800b996:	e04c      	b.n	800ba32 <USBD_CDC_Setup+0xea>
          hcdc->CmdOpCode = req->bRequest;
 800b998:	784b      	ldrb	r3, [r1, #1]
 800b99a:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b99e:	798b      	ldrb	r3, [r1, #6]
 800b9a0:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b9a4:	88ca      	ldrh	r2, [r1, #6]
 800b9a6:	4631      	mov	r1, r6
 800b9a8:	f000 fe03 	bl	800c5b2 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	e040      	b.n	800ba32 <USBD_CDC_Setup+0xea>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b9b0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	7848      	ldrb	r0, [r1, #1]
 800b9ba:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 800b9bc:	2500      	movs	r5, #0
 800b9be:	e038      	b.n	800ba32 <USBD_CDC_Setup+0xea>
      switch (req->bRequest)
 800b9c0:	784e      	ldrb	r6, [r1, #1]
 800b9c2:	2e0b      	cmp	r6, #11
 800b9c4:	d82e      	bhi.n	800ba24 <USBD_CDC_Setup+0xdc>
 800b9c6:	e8df f006 	tbb	[pc, r6]
 800b9ca:	3406      	.short	0x3406
 800b9cc:	2d2d2d2d 	.word	0x2d2d2d2d
 800b9d0:	2d2d2d2d 	.word	0x2d2d2d2d
 800b9d4:	2415      	.short	0x2415
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d003      	beq.n	800b9e8 <USBD_CDC_Setup+0xa0>
            USBD_CtlError(pdev, req);
 800b9e0:	f000 faa9 	bl	800bf36 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9e4:	2503      	movs	r5, #3
 800b9e6:	e024      	b.n	800ba32 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	a901      	add	r1, sp, #4
 800b9ec:	f000 fdcc 	bl	800c588 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f0:	4635      	mov	r5, r6
 800b9f2:	e01e      	b.n	800ba32 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d003      	beq.n	800ba06 <USBD_CDC_Setup+0xbe>
            USBD_CtlError(pdev, req);
 800b9fe:	f000 fa9a 	bl	800bf36 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba02:	2503      	movs	r5, #3
 800ba04:	e015      	b.n	800ba32 <USBD_CDC_Setup+0xea>
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba06:	2201      	movs	r2, #1
 800ba08:	f10d 0107 	add.w	r1, sp, #7
 800ba0c:	f000 fdbc 	bl	800c588 <USBD_CtlSendData>
 800ba10:	e00f      	b.n	800ba32 <USBD_CDC_Setup+0xea>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba12:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d00a      	beq.n	800ba32 <USBD_CDC_Setup+0xea>
            USBD_CtlError(pdev, req);
 800ba1c:	f000 fa8b 	bl	800bf36 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba20:	2503      	movs	r5, #3
 800ba22:	e006      	b.n	800ba32 <USBD_CDC_Setup+0xea>
          USBD_CtlError(pdev, req);
 800ba24:	f000 fa87 	bl	800bf36 <USBD_CtlError>
          ret = USBD_FAIL;
 800ba28:	2503      	movs	r5, #3
          break;
 800ba2a:	e002      	b.n	800ba32 <USBD_CDC_Setup+0xea>
      USBD_CtlError(pdev, req);
 800ba2c:	f000 fa83 	bl	800bf36 <USBD_CtlError>
      ret = USBD_FAIL;
 800ba30:	2503      	movs	r5, #3
}
 800ba32:	4628      	mov	r0, r5
 800ba34:	b003      	add	sp, #12
 800ba36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 800ba38:	2503      	movs	r5, #3
 800ba3a:	e7fa      	b.n	800ba32 <USBD_CDC_Setup+0xea>

0800ba3c <USBD_CDC_DeInit>:
{
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ba40:	2181      	movs	r1, #129	; 0x81
 800ba42:	f7fb f8b4 	bl	8006bae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ba46:	2500      	movs	r5, #0
 800ba48:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7fb f8ae 	bl	8006bae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ba52:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ba56:	2182      	movs	r1, #130	; 0x82
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f7fb f8a8 	bl	8006bae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ba5e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ba62:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 800ba66:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800ba6a:	b14b      	cbz	r3, 800ba80 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba6c:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ba74:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800ba78:	f002 ff3e 	bl	800e8f8 <free>
    pdev->pClassData = NULL;
 800ba7c:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800ba80:	2000      	movs	r0, #0
 800ba82:	bd38      	pop	{r3, r4, r5, pc}

0800ba84 <USBD_CDC_Init>:
{
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ba88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ba8c:	f002 ff2c 	bl	800e8e8 <malloc>
  if (hcdc == NULL)
 800ba90:	b3b8      	cbz	r0, 800bb02 <USBD_CDC_Init+0x7e>
 800ba92:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800ba94:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba98:	7c23      	ldrb	r3, [r4, #16]
 800ba9a:	bbbb      	cbnz	r3, 800bb0c <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baa0:	2202      	movs	r2, #2
 800baa2:	2181      	movs	r1, #129	; 0x81
 800baa4:	4620      	mov	r0, r4
 800baa6:	f7fb f878 	bl	8006b9a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800baaa:	2501      	movs	r5, #1
 800baac:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800baae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab2:	2202      	movs	r2, #2
 800bab4:	4629      	mov	r1, r5
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7fb f86f 	bl	8006b9a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800babc:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bac0:	2310      	movs	r3, #16
 800bac2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bac6:	2308      	movs	r3, #8
 800bac8:	2203      	movs	r2, #3
 800baca:	2182      	movs	r1, #130	; 0x82
 800bacc:	4620      	mov	r0, r4
 800bace:	f7fb f864 	bl	8006b9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bad2:	2301      	movs	r3, #1
 800bad4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bad8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4798      	blx	r3
  hcdc->TxState = 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
  hcdc->RxState = 0U;
 800bae6:	f8c6 3218 	str.w	r3, [r6, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baea:	7c25      	ldrb	r5, [r4, #16]
 800baec:	bb15      	cbnz	r5, 800bb34 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800baee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baf2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800baf6:	2101      	movs	r1, #1
 800baf8:	4620      	mov	r0, r4
 800bafa:	f7fb f892 	bl	8006c22 <USBD_LL_PrepareReceive>
}
 800bafe:	4628      	mov	r0, r5
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb08:	2502      	movs	r5, #2
 800bb0a:	e7f8      	b.n	800bafe <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb0c:	2340      	movs	r3, #64	; 0x40
 800bb0e:	2202      	movs	r2, #2
 800bb10:	2181      	movs	r1, #129	; 0x81
 800bb12:	4620      	mov	r0, r4
 800bb14:	f7fb f841 	bl	8006b9a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb18:	2501      	movs	r5, #1
 800bb1a:	8725      	strh	r5, [r4, #56]	; 0x38
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	2202      	movs	r2, #2
 800bb20:	4629      	mov	r1, r5
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7fb f839 	bl	8006b9a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb28:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bb2c:	2310      	movs	r3, #16
 800bb2e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800bb32:	e7c8      	b.n	800bac6 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7fb f870 	bl	8006c22 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800bb42:	2500      	movs	r5, #0
 800bb44:	e7db      	b.n	800bafe <USBD_CDC_Init+0x7a>

0800bb46 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800bb46:	b119      	cbz	r1, 800bb50 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800bb48:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bb50:	2003      	movs	r0, #3
}
 800bb52:	4770      	bx	lr

0800bb54 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb54:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bb58:	b12b      	cbz	r3, 800bb66 <USBD_CDC_SetTxBuffer+0x12>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->TxBuffer = pbuff;
 800bb5a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bb5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bb62:	2000      	movs	r0, #0
 800bb64:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bb66:	2003      	movs	r0, #3
}
 800bb68:	4770      	bx	lr

0800bb6a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb6a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  if (hcdc == NULL)
 800bb6e:	b11b      	cbz	r3, 800bb78 <USBD_CDC_SetRxBuffer+0xe>
  {
    return (uint8_t)USBD_FAIL;
  }

  hcdc->RxBuffer = pbuff;
 800bb70:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800bb78:	2003      	movs	r0, #3
}
 800bb7a:	4770      	bx	lr

0800bb7c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bb7c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800bb80:	b1a2      	cbz	r2, 800bbac <USBD_CDC_TransmitPacket+0x30>
{
 800bb82:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800bb84:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 800bb88:	b10b      	cbz	r3, 800bb8e <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bb8a:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800bb8c:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bb94:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800bb98:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bb9a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800bb9e:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800bba2:	2181      	movs	r1, #129	; 0x81
 800bba4:	f7fb f836 	bl	8006c14 <USBD_LL_Transmit>
    ret = USBD_OK;
 800bba8:	2000      	movs	r0, #0
 800bbaa:	e7ef      	b.n	800bb8c <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800bbac:	2003      	movs	r0, #3
}
 800bbae:	4770      	bx	lr

0800bbb0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bbb0:	b198      	cbz	r0, 800bbda <USBD_Init+0x2a>
{
 800bbb2:	b508      	push	{r3, lr}
 800bbb4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bbbc:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bbc0:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bbc4:	b109      	cbz	r1, 800bbca <USBD_Init+0x1a>
  {
    pdev->pDesc = pdesc;
 800bbc6:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbca:	2101      	movs	r1, #1
 800bbcc:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 800bbd0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fa ffac 	bl	8006b30 <USBD_LL_Init>

  return ret;
}
 800bbd8:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800bbda:	2003      	movs	r0, #3
}
 800bbdc:	4770      	bx	lr

0800bbde <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbde:	b510      	push	{r4, lr}
 800bbe0:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800bbe8:	b161      	cbz	r1, 800bc04 <USBD_RegisterClass+0x26>
 800bbea:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bbec:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bbf0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800bbf2:	b14b      	cbz	r3, 800bc08 <USBD_RegisterClass+0x2a>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bbf4:	f10d 0006 	add.w	r0, sp, #6
 800bbf8:	4798      	blx	r3
 800bbfa:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bbfe:	2000      	movs	r0, #0
}
 800bc00:	b002      	add	sp, #8
 800bc02:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800bc04:	2003      	movs	r0, #3
 800bc06:	e7fb      	b.n	800bc00 <USBD_RegisterClass+0x22>
  return USBD_OK;
 800bc08:	2000      	movs	r0, #0
 800bc0a:	e7f9      	b.n	800bc00 <USBD_RegisterClass+0x22>

0800bc0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc0c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc0e:	f7fa ffbd 	bl	8006b8c <USBD_LL_Start>
}
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc14:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800bc16:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bc1a:	b113      	cbz	r3, 800bc22 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4798      	blx	r3
  }

  return ret;
}
 800bc20:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bc22:	2003      	movs	r0, #3
 800bc24:	e7fc      	b.n	800bc20 <USBD_SetClassConfig+0xc>

0800bc26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc26:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bc28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bc2c:	b10b      	cbz	r3, 800bc32 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4798      	blx	r3
  }

  return USBD_OK;
}
 800bc32:	2000      	movs	r0, #0
 800bc34:	bd08      	pop	{r3, pc}

0800bc36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc36:	b538      	push	{r3, r4, r5, lr}
 800bc38:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc3a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 f965 	bl	800bf0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc44:	2301      	movs	r3, #1
 800bc46:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc4a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800bc4e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc52:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 800bc56:	f001 031f 	and.w	r3, r1, #31
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d00d      	beq.n	800bc7a <USBD_LL_SetupStage+0x44>
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d010      	beq.n	800bc84 <USBD_LL_SetupStage+0x4e>
 800bc62:	b12b      	cbz	r3, 800bc70 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc64:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f7fa ffa7 	bl	8006bbc <USBD_LL_StallEP>
      break;
 800bc6e:	e003      	b.n	800bc78 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc70:	4629      	mov	r1, r5
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fb09 	bl	800c28a <USBD_StdDevReq>
  }

  return ret;
}
 800bc78:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 fb3c 	bl	800c2fa <USBD_StdItfReq>
      break;
 800bc82:	e7f9      	b.n	800bc78 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 fb6b 	bl	800c362 <USBD_StdEPReq>
      break;
 800bc8c:	e7f4      	b.n	800bc78 <USBD_LL_SetupStage+0x42>

0800bc8e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc8e:	b538      	push	{r3, r4, r5, lr}
 800bc90:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc92:	460d      	mov	r5, r1
 800bc94:	bb41      	cbnz	r1, 800bce8 <USBD_LL_DataOutStage+0x5a>
 800bc96:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc98:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800bc9c:	2a03      	cmp	r2, #3
 800bc9e:	d001      	beq.n	800bca4 <USBD_LL_DataOutStage+0x16>
        }
      }
    }
  }

  return USBD_OK;
 800bca0:	4608      	mov	r0, r1
}
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800bca4:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 800bca8:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800bcac:	4291      	cmp	r1, r2
 800bcae:	d809      	bhi.n	800bcc4 <USBD_LL_DataOutStage+0x36>
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b03      	cmp	r3, #3
 800bcb8:	d00f      	beq.n	800bcda <USBD_LL_DataOutStage+0x4c>
        (void)USBD_CtlSendStatus(pdev);
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f000 fc90 	bl	800c5e0 <USBD_CtlSendStatus>
  return USBD_OK;
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	e7ee      	b.n	800bca2 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800bcc4:	1a89      	subs	r1, r1, r2
 800bcc6:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bcca:	428a      	cmp	r2, r1
 800bccc:	bf28      	it	cs
 800bcce:	460a      	movcs	r2, r1
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	f000 fc7d 	bl	800c5d0 <USBD_CtlContinueRx>
  return USBD_OK;
 800bcd6:	4628      	mov	r0, r5
 800bcd8:	e7e3      	b.n	800bca2 <USBD_LL_DataOutStage+0x14>
          if (pdev->pClass->EP0_RxReady != NULL)
 800bcda:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d0ea      	beq.n	800bcba <USBD_LL_DataOutStage+0x2c>
            pdev->pClass->EP0_RxReady(pdev);
 800bce4:	4798      	blx	r3
 800bce6:	e7e8      	b.n	800bcba <USBD_LL_DataOutStage+0x2c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d001      	beq.n	800bcf6 <USBD_LL_DataOutStage+0x68>
  return USBD_OK;
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	e7d5      	b.n	800bca2 <USBD_LL_DataOutStage+0x14>
      if (pdev->pClass->DataOut != NULL)
 800bcf6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bcfa:	699b      	ldr	r3, [r3, #24]
 800bcfc:	b10b      	cbz	r3, 800bd02 <USBD_LL_DataOutStage+0x74>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bcfe:	4798      	blx	r3
        if (ret != USBD_OK)
 800bd00:	e7cf      	b.n	800bca2 <USBD_LL_DataOutStage+0x14>
  return USBD_OK;
 800bd02:	2000      	movs	r0, #0
 800bd04:	e7cd      	b.n	800bca2 <USBD_LL_DataOutStage+0x14>

0800bd06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd06:	b538      	push	{r3, r4, r5, lr}
 800bd08:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d14a      	bne.n	800bda6 <USBD_LL_DataInStage+0xa0>
 800bd10:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd12:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800bd16:	2a02      	cmp	r2, #2
 800bd18:	d005      	beq.n	800bd26 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd1a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d03c      	beq.n	800bd9c <USBD_LL_DataInStage+0x96>
        }
      }
    }
  }

  return USBD_OK;
 800bd22:	4628      	mov	r0, r5
}
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800bd26:	69c2      	ldr	r2, [r0, #28]
 800bd28:	6a01      	ldr	r1, [r0, #32]
 800bd2a:	428a      	cmp	r2, r1
 800bd2c:	d80e      	bhi.n	800bd4c <USBD_LL_DataInStage+0x46>
        if ((pep->maxpacket == pep->rem_length) &&
 800bd2e:	428a      	cmp	r2, r1
 800bd30:	d018      	beq.n	800bd64 <USBD_LL_DataInStage+0x5e>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd32:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d027      	beq.n	800bd8c <USBD_LL_DataInStage+0x86>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3c:	2180      	movs	r1, #128	; 0x80
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7fa ff3c 	bl	8006bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fc56 	bl	800c5f6 <USBD_CtlReceiveStatus>
 800bd4a:	e7e6      	b.n	800bd1a <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800bd4c:	1a52      	subs	r2, r2, r1
 800bd4e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd50:	4619      	mov	r1, r3
 800bd52:	f000 fc26 	bl	800c5a2 <USBD_CtlContinueSendData>
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd56:	2300      	movs	r3, #0
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f7fa ff60 	bl	8006c22 <USBD_LL_PrepareReceive>
 800bd62:	e7da      	b.n	800bd1a <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 800bd64:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d8e3      	bhi.n	800bd32 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 800bd6a:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d2df      	bcs.n	800bd32 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd72:	2200      	movs	r2, #0
 800bd74:	4611      	mov	r1, r2
 800bd76:	f000 fc14 	bl	800c5a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd80:	460b      	mov	r3, r1
 800bd82:	460a      	mov	r2, r1
 800bd84:	4620      	mov	r0, r4
 800bd86:	f7fa ff4c 	bl	8006c22 <USBD_LL_PrepareReceive>
 800bd8a:	e7c6      	b.n	800bd1a <USBD_LL_DataInStage+0x14>
            if (pdev->pClass->EP0_TxSent != NULL)
 800bd8c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0d2      	beq.n	800bd3c <USBD_LL_DataInStage+0x36>
              pdev->pClass->EP0_TxSent(pdev);
 800bd96:	4620      	mov	r0, r4
 800bd98:	4798      	blx	r3
 800bd9a:	e7cf      	b.n	800bd3c <USBD_LL_DataInStage+0x36>
      pdev->dev_test_mode = 0U;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 800bda2:	4628      	mov	r0, r5
 800bda4:	e7be      	b.n	800bd24 <USBD_LL_DataInStage+0x1e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	d001      	beq.n	800bdb4 <USBD_LL_DataInStage+0xae>
  return USBD_OK;
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7b7      	b.n	800bd24 <USBD_LL_DataInStage+0x1e>
      if (pdev->pClass->DataIn != NULL)
 800bdb4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	b10b      	cbz	r3, 800bdc0 <USBD_LL_DataInStage+0xba>
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bdbc:	4798      	blx	r3
        if (ret != USBD_OK)
 800bdbe:	e7b1      	b.n	800bd24 <USBD_LL_DataInStage+0x1e>
  return USBD_OK;
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7af      	b.n	800bd24 <USBD_LL_DataInStage+0x1e>

0800bdc4 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdd0:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdd2:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bdd6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bdda:	b1f3      	cbz	r3, 800be1a <USBD_LL_Reset+0x56>
{
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4604      	mov	r4, r0
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 800bde0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800bde4:	b11a      	cbz	r2, 800bdee <USBD_LL_Reset+0x2a>
  {
    if (pdev->pClass->DeInit != NULL)
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	b10b      	cbz	r3, 800bdee <USBD_LL_Reset+0x2a>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdea:	2100      	movs	r1, #0
 800bdec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdee:	2340      	movs	r3, #64	; 0x40
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f7fa fed0 	bl	8006b9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdfa:	2601      	movs	r6, #1
 800bdfc:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be00:	2540      	movs	r5, #64	; 0x40
 800be02:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be06:	462b      	mov	r3, r5
 800be08:	2200      	movs	r2, #0
 800be0a:	2180      	movs	r1, #128	; 0x80
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7fa fec4 	bl	8006b9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be12:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be14:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 800be16:	2000      	movs	r0, #0
}
 800be18:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800be1a:	2003      	movs	r0, #3
}
 800be1c:	4770      	bx	lr

0800be1e <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800be1e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800be20:	2000      	movs	r0, #0
 800be22:	4770      	bx	lr

0800be24 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800be24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be2e:	2304      	movs	r3, #4
 800be30:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800be34:	2000      	movs	r0, #0
 800be36:	4770      	bx	lr

0800be38 <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b04      	cmp	r3, #4
 800be40:	d001      	beq.n	800be46 <USBD_LL_Resume+0xe>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800be42:	2000      	movs	r0, #0
 800be44:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800be46:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800be50:	e7f7      	b.n	800be42 <USBD_LL_Resume+0xa>

0800be52 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 800be52:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800be56:	b162      	cbz	r2, 800be72 <USBD_LL_SOF+0x20>
{
 800be58:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b03      	cmp	r3, #3
 800be62:	d001      	beq.n	800be68 <USBD_LL_SOF+0x16>
    {
      (void)pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
 800be64:	2000      	movs	r0, #0
}
 800be66:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800be68:	69d3      	ldr	r3, [r2, #28]
 800be6a:	b123      	cbz	r3, 800be76 <USBD_LL_SOF+0x24>
      (void)pdev->pClass->SOF(pdev);
 800be6c:	4798      	blx	r3
  return USBD_OK;
 800be6e:	2000      	movs	r0, #0
 800be70:	e7f9      	b.n	800be66 <USBD_LL_SOF+0x14>
    return USBD_FAIL;
 800be72:	2003      	movs	r0, #3
}
 800be74:	4770      	bx	lr
  return USBD_OK;
 800be76:	2000      	movs	r0, #0
 800be78:	e7f5      	b.n	800be66 <USBD_LL_SOF+0x14>

0800be7a <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800be7a:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800be7e:	b162      	cbz	r2, 800be9a <USBD_LL_IsoINIncomplete+0x20>
{
 800be80:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d001      	beq.n	800be90 <USBD_LL_IsoINIncomplete+0x16>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800be8c:	2000      	movs	r0, #0
}
 800be8e:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoINIncomplete != NULL)
 800be90:	6a13      	ldr	r3, [r2, #32]
 800be92:	b123      	cbz	r3, 800be9e <USBD_LL_IsoINIncomplete+0x24>
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800be94:	4798      	blx	r3
  return USBD_OK;
 800be96:	2000      	movs	r0, #0
 800be98:	e7f9      	b.n	800be8e <USBD_LL_IsoINIncomplete+0x14>
    return USBD_FAIL;
 800be9a:	2003      	movs	r0, #3
}
 800be9c:	4770      	bx	lr
  return USBD_OK;
 800be9e:	2000      	movs	r0, #0
 800bea0:	e7f5      	b.n	800be8e <USBD_LL_IsoINIncomplete+0x14>

0800bea2 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 800bea2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 800bea6:	b162      	cbz	r2, 800bec2 <USBD_LL_IsoOUTIncomplete+0x20>
{
 800bea8:	b508      	push	{r3, lr}
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beaa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d001      	beq.n	800beb8 <USBD_LL_IsoOUTIncomplete+0x16>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
    }
  }

  return USBD_OK;
 800beb4:	2000      	movs	r0, #0
}
 800beb6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800beb8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800beba:	b123      	cbz	r3, 800bec6 <USBD_LL_IsoOUTIncomplete+0x24>
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bebc:	4798      	blx	r3
  return USBD_OK;
 800bebe:	2000      	movs	r0, #0
 800bec0:	e7f9      	b.n	800beb6 <USBD_LL_IsoOUTIncomplete+0x14>
    return USBD_FAIL;
 800bec2:	2003      	movs	r0, #3
}
 800bec4:	4770      	bx	lr
  return USBD_OK;
 800bec6:	2000      	movs	r0, #0
 800bec8:	e7f5      	b.n	800beb6 <USBD_LL_IsoOUTIncomplete+0x14>

0800beca <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800beca:	2000      	movs	r0, #0
 800becc:	4770      	bx	lr

0800bece <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bece:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bed6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800beda:	b113      	cbz	r3, 800bee2 <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	7901      	ldrb	r1, [r0, #4]
 800bee0:	4798      	blx	r3
  }

  return USBD_OK;
}
 800bee2:	2000      	movs	r0, #0
 800bee4:	bd08      	pop	{r3, pc}

0800bee6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bee6:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 800bee8:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 800beea:	e002      	b.n	800bef2 <USBD_GetLen+0xc>
  {
    len++;
 800beec:	3001      	adds	r0, #1
 800beee:	b2c0      	uxtb	r0, r0
    pbuff++;
 800bef0:	3301      	adds	r3, #1
  while (*pbuff != (uint8_t)'\0')
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	d1f9      	bne.n	800beec <USBD_GetLen+0x6>
  }

  return len;
}
 800bef8:	4770      	bx	lr

0800befa <USBD_SetFeature>:
{
 800befa:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800befc:	884b      	ldrh	r3, [r1, #2]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d000      	beq.n	800bf04 <USBD_SetFeature+0xa>
}
 800bf02:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 800bf04:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf08:	f000 fb6a 	bl	800c5e0 <USBD_CtlSendStatus>
}
 800bf0c:	e7f9      	b.n	800bf02 <USBD_SetFeature+0x8>

0800bf0e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800bf0e:	780b      	ldrb	r3, [r1, #0]
 800bf10:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 800bf12:	784b      	ldrb	r3, [r1, #1]
 800bf14:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 800bf16:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800bf18:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800bf1e:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800bf20:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf22:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800bf28:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800bf2a:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf2c:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800bf32:	80c3      	strh	r3, [r0, #6]
}
 800bf34:	4770      	bx	lr

0800bf36 <USBD_CtlError>:
{
 800bf36:	b510      	push	{r4, lr}
 800bf38:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf3a:	2180      	movs	r1, #128	; 0x80
 800bf3c:	f7fa fe3e 	bl	8006bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bf40:	2100      	movs	r1, #0
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7fa fe3a 	bl	8006bbc <USBD_LL_StallEP>
}
 800bf48:	bd10      	pop	{r4, pc}

0800bf4a <USBD_GetDescriptor>:
{
 800bf4a:	b530      	push	{r4, r5, lr}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	4604      	mov	r4, r0
 800bf50:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800bf58:	884a      	ldrh	r2, [r1, #2]
 800bf5a:	0a13      	lsrs	r3, r2, #8
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	2b06      	cmp	r3, #6
 800bf60:	f200 80ab 	bhi.w	800c0ba <USBD_GetDescriptor+0x170>
 800bf64:	e8df f003 	tbb	[pc, r3]
 800bf68:	a9331f04 	.word	0xa9331f04
 800bf6c:	8da9      	.short	0x8da9
 800bf6e:	9a          	.byte	0x9a
 800bf6f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf70:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f10d 0106 	add.w	r1, sp, #6
 800bf7a:	7c00      	ldrb	r0, [r0, #16]
 800bf7c:	4798      	blx	r3
  if (req->wLength != 0U)
 800bf7e:	88ea      	ldrh	r2, [r5, #6]
 800bf80:	2a00      	cmp	r2, #0
 800bf82:	f000 80a3 	beq.w	800c0cc <USBD_GetDescriptor+0x182>
    if (len != 0U)
 800bf86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 8099 	beq.w	800c0c2 <USBD_GetDescriptor+0x178>
      len = MIN(len, req->wLength);
 800bf90:	429a      	cmp	r2, r3
 800bf92:	bf28      	it	cs
 800bf94:	461a      	movcs	r2, r3
 800bf96:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f000 faf3 	bl	800c588 <USBD_CtlSendData>
}
 800bfa2:	b003      	add	sp, #12
 800bfa4:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa6:	7c03      	ldrb	r3, [r0, #16]
 800bfa8:	b943      	cbnz	r3, 800bfbc <USBD_GetDescriptor+0x72>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bfaa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bfae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb0:	f10d 0006 	add.w	r0, sp, #6
 800bfb4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bfba:	e7e0      	b.n	800bf7e <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bfbc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800bfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc2:	f10d 0006 	add.w	r0, sp, #6
 800bfc6:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bfc8:	2302      	movs	r3, #2
 800bfca:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800bfcc:	e7d7      	b.n	800bf7e <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	2a05      	cmp	r2, #5
 800bfd2:	d852      	bhi.n	800c07a <USBD_GetDescriptor+0x130>
 800bfd4:	e8df f002 	tbb	[pc, r2]
 800bfd8:	2a1d1003 	.word	0x2a1d1003
 800bfdc:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfde:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	b123      	cbz	r3, 800bff0 <USBD_GetDescriptor+0xa6>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfe6:	f10d 0106 	add.w	r1, sp, #6
 800bfea:	7c00      	ldrb	r0, [r0, #16]
 800bfec:	4798      	blx	r3
  if (err != 0U)
 800bfee:	e7c6      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800bff0:	4629      	mov	r1, r5
 800bff2:	f7ff ffa0 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800bff6:	e7d4      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bff8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	b123      	cbz	r3, 800c00a <USBD_GetDescriptor+0xc0>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c000:	f10d 0106 	add.w	r1, sp, #6
 800c004:	7c00      	ldrb	r0, [r0, #16]
 800c006:	4798      	blx	r3
  if (err != 0U)
 800c008:	e7b9      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7ff ff93 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c010:	e7c7      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c012:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	b123      	cbz	r3, 800c024 <USBD_GetDescriptor+0xda>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c01a:	f10d 0106 	add.w	r1, sp, #6
 800c01e:	7c00      	ldrb	r0, [r0, #16]
 800c020:	4798      	blx	r3
  if (err != 0U)
 800c022:	e7ac      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800c024:	4629      	mov	r1, r5
 800c026:	f7ff ff86 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c02a:	e7ba      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c02c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	b123      	cbz	r3, 800c03e <USBD_GetDescriptor+0xf4>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c034:	f10d 0106 	add.w	r1, sp, #6
 800c038:	7c00      	ldrb	r0, [r0, #16]
 800c03a:	4798      	blx	r3
  if (err != 0U)
 800c03c:	e79f      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800c03e:	4629      	mov	r1, r5
 800c040:	f7ff ff79 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c044:	e7ad      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c046:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	b123      	cbz	r3, 800c058 <USBD_GetDescriptor+0x10e>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c04e:	f10d 0106 	add.w	r1, sp, #6
 800c052:	7c00      	ldrb	r0, [r0, #16]
 800c054:	4798      	blx	r3
  if (err != 0U)
 800c056:	e792      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800c058:	4629      	mov	r1, r5
 800c05a:	f7ff ff6c 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c05e:	e7a0      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c060:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	b123      	cbz	r3, 800c072 <USBD_GetDescriptor+0x128>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c068:	f10d 0106 	add.w	r1, sp, #6
 800c06c:	7c00      	ldrb	r0, [r0, #16]
 800c06e:	4798      	blx	r3
  if (err != 0U)
 800c070:	e785      	b.n	800bf7e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800c072:	4629      	mov	r1, r5
 800c074:	f7ff ff5f 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c078:	e793      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
          USBD_CtlError(pdev, req);
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7ff ff5b 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c080:	e78f      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c082:	7c03      	ldrb	r3, [r0, #16]
 800c084:	b933      	cbnz	r3, 800c094 <USBD_GetDescriptor+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c086:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08c:	f10d 0006 	add.w	r0, sp, #6
 800c090:	4798      	blx	r3
  if (err != 0U)
 800c092:	e774      	b.n	800bf7e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800c094:	4629      	mov	r1, r5
 800c096:	f7ff ff4e 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c09a:	e782      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c09c:	7c03      	ldrb	r3, [r0, #16]
 800c09e:	b943      	cbnz	r3, 800c0b2 <USBD_GetDescriptor+0x168>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a6:	f10d 0006 	add.w	r0, sp, #6
 800c0aa:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0ac:	2307      	movs	r3, #7
 800c0ae:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800c0b0:	e765      	b.n	800bf7e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7ff ff3f 	bl	800bf36 <USBD_CtlError>
  if (err != 0U)
 800c0b8:	e773      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f7ff ff3b 	bl	800bf36 <USBD_CtlError>
    return;
 800c0c0:	e76f      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800c0c2:	4629      	mov	r1, r5
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f7ff ff36 	bl	800bf36 <USBD_CtlError>
 800c0ca:	e76a      	b.n	800bfa2 <USBD_GetDescriptor+0x58>
    (void)USBD_CtlSendStatus(pdev);
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fa87 	bl	800c5e0 <USBD_CtlSendStatus>
 800c0d2:	e766      	b.n	800bfa2 <USBD_GetDescriptor+0x58>

0800c0d4 <USBD_SetAddress>:
{
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0d8:	888b      	ldrh	r3, [r1, #4]
 800c0da:	b9fb      	cbnz	r3, 800c11c <USBD_SetAddress+0x48>
 800c0dc:	88cb      	ldrh	r3, [r1, #6]
 800c0de:	b9eb      	cbnz	r3, 800c11c <USBD_SetAddress+0x48>
 800c0e0:	884b      	ldrh	r3, [r1, #2]
 800c0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0e4:	d81a      	bhi.n	800c11c <USBD_SetAddress+0x48>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0e6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d00c      	beq.n	800c10e <USBD_SetAddress+0x3a>
      pdev->dev_address = dev_addr;
 800c0f4:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7fa fd84 	bl	8006c06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 fa6e 	bl	800c5e0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800c104:	b135      	cbz	r5, 800c114 <USBD_SetAddress+0x40>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c106:	2302      	movs	r3, #2
 800c108:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c10c:	e009      	b.n	800c122 <USBD_SetAddress+0x4e>
      USBD_CtlError(pdev, req);
 800c10e:	f7ff ff12 	bl	800bf36 <USBD_CtlError>
 800c112:	e006      	b.n	800c122 <USBD_SetAddress+0x4e>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c114:	2301      	movs	r3, #1
 800c116:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c11a:	e002      	b.n	800c122 <USBD_SetAddress+0x4e>
    USBD_CtlError(pdev, req);
 800c11c:	4620      	mov	r0, r4
 800c11e:	f7ff ff0a 	bl	800bf36 <USBD_CtlError>
}
 800c122:	bd38      	pop	{r3, r4, r5, pc}

0800c124 <USBD_SetConfig>:
{
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 800c12a:	788d      	ldrb	r5, [r1, #2]
 800c12c:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <USBD_SetConfig+0xc4>)
 800c12e:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c130:	2d01      	cmp	r5, #1
 800c132:	d810      	bhi.n	800c156 <USBD_SetConfig+0x32>
  switch (pdev->dev_state)
 800c134:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d00f      	beq.n	800c15e <USBD_SetConfig+0x3a>
 800c13e:	2b03      	cmp	r3, #3
 800c140:	d023      	beq.n	800c18a <USBD_SetConfig+0x66>
      USBD_CtlError(pdev, req);
 800c142:	f7ff fef8 	bl	800bf36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c146:	4b28      	ldr	r3, [pc, #160]	; (800c1e8 <USBD_SetConfig+0xc4>)
 800c148:	7819      	ldrb	r1, [r3, #0]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff fd6b 	bl	800bc26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c150:	2503      	movs	r5, #3
}
 800c152:	4628      	mov	r0, r5
 800c154:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 800c156:	f7ff feee 	bl	800bf36 <USBD_CtlError>
    return USBD_FAIL;
 800c15a:	2503      	movs	r5, #3
 800c15c:	e7f9      	b.n	800c152 <USBD_SetConfig+0x2e>
      if (cfgidx != 0U)
 800c15e:	b18d      	cbz	r5, 800c184 <USBD_SetConfig+0x60>
        pdev->dev_config = cfgidx;
 800c160:	6045      	str	r5, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c162:	4629      	mov	r1, r5
 800c164:	f7ff fd56 	bl	800bc14 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c168:	4605      	mov	r5, r0
 800c16a:	b120      	cbz	r0, 800c176 <USBD_SetConfig+0x52>
          USBD_CtlError(pdev, req);
 800c16c:	4631      	mov	r1, r6
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff fee1 	bl	800bf36 <USBD_CtlError>
 800c174:	e7ed      	b.n	800c152 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c176:	4620      	mov	r0, r4
 800c178:	f000 fa32 	bl	800c5e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c17c:	2303      	movs	r3, #3
 800c17e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c182:	e7e6      	b.n	800c152 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c184:	f000 fa2c 	bl	800c5e0 <USBD_CtlSendStatus>
 800c188:	e7e3      	b.n	800c152 <USBD_SetConfig+0x2e>
      if (cfgidx == 0U)
 800c18a:	b1cd      	cbz	r5, 800c1c0 <USBD_SetConfig+0x9c>
      else if (cfgidx != pdev->dev_config)
 800c18c:	6841      	ldr	r1, [r0, #4]
 800c18e:	428d      	cmp	r5, r1
 800c190:	d025      	beq.n	800c1de <USBD_SetConfig+0xba>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c192:	b2c9      	uxtb	r1, r1
 800c194:	f7ff fd47 	bl	800bc26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c198:	4b13      	ldr	r3, [pc, #76]	; (800c1e8 <USBD_SetConfig+0xc4>)
 800c19a:	7819      	ldrb	r1, [r3, #0]
 800c19c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7ff fd38 	bl	800bc14 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	b1b0      	cbz	r0, 800c1d6 <USBD_SetConfig+0xb2>
          USBD_CtlError(pdev, req);
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff fec3 	bl	800bf36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1b0:	7921      	ldrb	r1, [r4, #4]
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f7ff fd37 	bl	800bc26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800c1be:	e7c8      	b.n	800c152 <USBD_SetConfig+0x2e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1c0:	2302      	movs	r3, #2
 800c1c2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c1c6:	6045      	str	r5, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7ff fd2c 	bl	800bc26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 fa06 	bl	800c5e0 <USBD_CtlSendStatus>
 800c1d4:	e7bd      	b.n	800c152 <USBD_SetConfig+0x2e>
          (void)USBD_CtlSendStatus(pdev);
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 fa02 	bl	800c5e0 <USBD_CtlSendStatus>
 800c1dc:	e7b9      	b.n	800c152 <USBD_SetConfig+0x2e>
        (void)USBD_CtlSendStatus(pdev);
 800c1de:	f000 f9ff 	bl	800c5e0 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e2:	2500      	movs	r5, #0
 800c1e4:	e7b5      	b.n	800c152 <USBD_SetConfig+0x2e>
 800c1e6:	bf00      	nop
 800c1e8:	20002994 	.word	0x20002994

0800c1ec <USBD_GetConfig>:
{
 800c1ec:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 800c1ee:	88cb      	ldrh	r3, [r1, #6]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d10b      	bne.n	800c20c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 800c1f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d909      	bls.n	800c212 <USBD_GetConfig+0x26>
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d109      	bne.n	800c216 <USBD_GetConfig+0x2a>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c202:	2201      	movs	r2, #1
 800c204:	1d01      	adds	r1, r0, #4
 800c206:	f000 f9bf 	bl	800c588 <USBD_CtlSendData>
        break;
 800c20a:	e001      	b.n	800c210 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800c20c:	f7ff fe93 	bl	800bf36 <USBD_CtlError>
}
 800c210:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 800c212:	b25b      	sxtb	r3, r3
 800c214:	b913      	cbnz	r3, 800c21c <USBD_GetConfig+0x30>
        USBD_CtlError(pdev, req);
 800c216:	f7ff fe8e 	bl	800bf36 <USBD_CtlError>
}
 800c21a:	e7f9      	b.n	800c210 <USBD_GetConfig+0x24>
        pdev->dev_default_config = 0U;
 800c21c:	4601      	mov	r1, r0
 800c21e:	2300      	movs	r3, #0
 800c220:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c224:	2201      	movs	r2, #1
 800c226:	f000 f9af 	bl	800c588 <USBD_CtlSendData>
        break;
 800c22a:	e7f1      	b.n	800c210 <USBD_GetConfig+0x24>

0800c22c <USBD_GetStatus>:
{
 800c22c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800c22e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c232:	3b01      	subs	r3, #1
 800c234:	2b02      	cmp	r3, #2
 800c236:	d812      	bhi.n	800c25e <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800c238:	88cb      	ldrh	r3, [r1, #6]
 800c23a:	2b02      	cmp	r3, #2
 800c23c:	d10c      	bne.n	800c258 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c23e:	2301      	movs	r3, #1
 800c240:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 800c242:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800c246:	b10b      	cbz	r3, 800c24c <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c248:	2303      	movs	r3, #3
 800c24a:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c24c:	2202      	movs	r2, #2
 800c24e:	f100 010c 	add.w	r1, r0, #12
 800c252:	f000 f999 	bl	800c588 <USBD_CtlSendData>
}
 800c256:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800c258:	f7ff fe6d 	bl	800bf36 <USBD_CtlError>
        break;
 800c25c:	e7fb      	b.n	800c256 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 800c25e:	f7ff fe6a 	bl	800bf36 <USBD_CtlError>
}
 800c262:	e7f8      	b.n	800c256 <USBD_GetStatus+0x2a>

0800c264 <USBD_ClrFeature>:
{
 800c264:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800c266:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c26a:	3b01      	subs	r3, #1
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d809      	bhi.n	800c284 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c270:	884b      	ldrh	r3, [r1, #2]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d000      	beq.n	800c278 <USBD_ClrFeature+0x14>
}
 800c276:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800c278:	2300      	movs	r3, #0
 800c27a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c27e:	f000 f9af 	bl	800c5e0 <USBD_CtlSendStatus>
 800c282:	e7f8      	b.n	800c276 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800c284:	f7ff fe57 	bl	800bf36 <USBD_CtlError>
}
 800c288:	e7f5      	b.n	800c276 <USBD_ClrFeature+0x12>

0800c28a <USBD_StdDevReq>:
{
 800c28a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c28c:	780c      	ldrb	r4, [r1, #0]
 800c28e:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c292:	2c20      	cmp	r4, #32
 800c294:	d006      	beq.n	800c2a4 <USBD_StdDevReq+0x1a>
 800c296:	2c40      	cmp	r4, #64	; 0x40
 800c298:	d004      	beq.n	800c2a4 <USBD_StdDevReq+0x1a>
 800c29a:	b154      	cbz	r4, 800c2b2 <USBD_StdDevReq+0x28>
      USBD_CtlError(pdev, req);
 800c29c:	f7ff fe4b 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a0:	2400      	movs	r4, #0
      break;
 800c2a2:	e004      	b.n	800c2ae <USBD_StdDevReq+0x24>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	4798      	blx	r3
 800c2ac:	4604      	mov	r4, r0
}
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 800c2b2:	784d      	ldrb	r5, [r1, #1]
 800c2b4:	2d09      	cmp	r5, #9
 800c2b6:	d81d      	bhi.n	800c2f4 <USBD_StdDevReq+0x6a>
 800c2b8:	e8df f005 	tbb	[pc, r5]
 800c2bc:	161c1912 	.word	0x161c1912
 800c2c0:	1c05081c 	.word	0x1c05081c
 800c2c4:	0b0f      	.short	0x0b0f
          USBD_GetDescriptor(pdev, req);
 800c2c6:	f7ff fe40 	bl	800bf4a <USBD_GetDescriptor>
          break;
 800c2ca:	e7f0      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_SetAddress(pdev, req);
 800c2cc:	f7ff ff02 	bl	800c0d4 <USBD_SetAddress>
          break;
 800c2d0:	e7ed      	b.n	800c2ae <USBD_StdDevReq+0x24>
          ret = USBD_SetConfig(pdev, req);
 800c2d2:	f7ff ff27 	bl	800c124 <USBD_SetConfig>
 800c2d6:	4604      	mov	r4, r0
          break;
 800c2d8:	e7e9      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_GetConfig(pdev, req);
 800c2da:	f7ff ff87 	bl	800c1ec <USBD_GetConfig>
          break;
 800c2de:	e7e6      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_GetStatus(pdev, req);
 800c2e0:	f7ff ffa4 	bl	800c22c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800c2e4:	462c      	mov	r4, r5
          break;
 800c2e6:	e7e2      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_SetFeature(pdev, req);
 800c2e8:	f7ff fe07 	bl	800befa <USBD_SetFeature>
          break;
 800c2ec:	e7df      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_ClrFeature(pdev, req);
 800c2ee:	f7ff ffb9 	bl	800c264 <USBD_ClrFeature>
          break;
 800c2f2:	e7dc      	b.n	800c2ae <USBD_StdDevReq+0x24>
          USBD_CtlError(pdev, req);
 800c2f4:	f7ff fe1f 	bl	800bf36 <USBD_CtlError>
          break;
 800c2f8:	e7d9      	b.n	800c2ae <USBD_StdDevReq+0x24>

0800c2fa <USBD_StdItfReq>:
{
 800c2fa:	b570      	push	{r4, r5, r6, lr}
 800c2fc:	4605      	mov	r5, r0
 800c2fe:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c300:	780b      	ldrb	r3, [r1, #0]
 800c302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c306:	2b20      	cmp	r3, #32
 800c308:	d007      	beq.n	800c31a <USBD_StdItfReq+0x20>
 800c30a:	2b40      	cmp	r3, #64	; 0x40
 800c30c:	d005      	beq.n	800c31a <USBD_StdItfReq+0x20>
 800c30e:	b123      	cbz	r3, 800c31a <USBD_StdItfReq+0x20>
      USBD_CtlError(pdev, req);
 800c310:	f7ff fe11 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c314:	2600      	movs	r6, #0
}
 800c316:	4630      	mov	r0, r6
 800c318:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 800c31a:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800c31e:	3b01      	subs	r3, #1
 800c320:	2b02      	cmp	r3, #2
 800c322:	d818      	bhi.n	800c356 <USBD_StdItfReq+0x5c>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c324:	7923      	ldrb	r3, [r4, #4]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d80f      	bhi.n	800c34a <USBD_StdItfReq+0x50>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c32a:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	4621      	mov	r1, r4
 800c332:	4628      	mov	r0, r5
 800c334:	4798      	blx	r3
 800c336:	4606      	mov	r6, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c338:	88e3      	ldrh	r3, [r4, #6]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1eb      	bne.n	800c316 <USBD_StdItfReq+0x1c>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d1e9      	bne.n	800c316 <USBD_StdItfReq+0x1c>
              (void)USBD_CtlSendStatus(pdev);
 800c342:	4628      	mov	r0, r5
 800c344:	f000 f94c 	bl	800c5e0 <USBD_CtlSendStatus>
 800c348:	e7e5      	b.n	800c316 <USBD_StdItfReq+0x1c>
            USBD_CtlError(pdev, req);
 800c34a:	4621      	mov	r1, r4
 800c34c:	4628      	mov	r0, r5
 800c34e:	f7ff fdf2 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c352:	2600      	movs	r6, #0
 800c354:	e7df      	b.n	800c316 <USBD_StdItfReq+0x1c>
          USBD_CtlError(pdev, req);
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f7ff fdec 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c35e:	2600      	movs	r6, #0
          break;
 800c360:	e7d9      	b.n	800c316 <USBD_StdItfReq+0x1c>

0800c362 <USBD_StdEPReq>:
{
 800c362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c364:	4606      	mov	r6, r0
 800c366:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 800c368:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c36a:	780c      	ldrb	r4, [r1, #0]
 800c36c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 800c370:	2c20      	cmp	r4, #32
 800c372:	d008      	beq.n	800c386 <USBD_StdEPReq+0x24>
 800c374:	b2d9      	uxtb	r1, r3
 800c376:	2c40      	cmp	r4, #64	; 0x40
 800c378:	d005      	beq.n	800c386 <USBD_StdEPReq+0x24>
 800c37a:	b16c      	cbz	r4, 800c398 <USBD_StdEPReq+0x36>
      USBD_CtlError(pdev, req);
 800c37c:	4629      	mov	r1, r5
 800c37e:	f7ff fdda 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c382:	2400      	movs	r4, #0
      break;
 800c384:	e006      	b.n	800c394 <USBD_StdEPReq+0x32>
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c386:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	4629      	mov	r1, r5
 800c38e:	4630      	mov	r0, r6
 800c390:	4798      	blx	r3
 800c392:	4604      	mov	r4, r0
}
 800c394:	4620      	mov	r0, r4
 800c396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch (req->bRequest)
 800c398:	786f      	ldrb	r7, [r5, #1]
 800c39a:	2f01      	cmp	r7, #1
 800c39c:	d02f      	beq.n	800c3fe <USBD_StdEPReq+0x9c>
 800c39e:	2f03      	cmp	r7, #3
 800c3a0:	d005      	beq.n	800c3ae <USBD_StdEPReq+0x4c>
 800c3a2:	2f00      	cmp	r7, #0
 800c3a4:	d059      	beq.n	800c45a <USBD_StdEPReq+0xf8>
          USBD_CtlError(pdev, req);
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	f7ff fdc5 	bl	800bf36 <USBD_CtlError>
          break;
 800c3ac:	e7f2      	b.n	800c394 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800c3ae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d005      	beq.n	800c3c4 <USBD_StdEPReq+0x62>
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d012      	beq.n	800c3e2 <USBD_StdEPReq+0x80>
              USBD_CtlError(pdev, req);
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7ff fdba 	bl	800bf36 <USBD_CtlError>
              break;
 800c3c2:	e7e7      	b.n	800c394 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3c4:	b109      	cbz	r1, 800c3ca <USBD_StdEPReq+0x68>
 800c3c6:	2980      	cmp	r1, #128	; 0x80
 800c3c8:	d104      	bne.n	800c3d4 <USBD_StdEPReq+0x72>
                USBD_CtlError(pdev, req);
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff fdb2 	bl	800bf36 <USBD_CtlError>
 800c3d2:	e7df      	b.n	800c394 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3d4:	f7fa fbf2 	bl	8006bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3d8:	2180      	movs	r1, #128	; 0x80
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7fa fbee 	bl	8006bbc <USBD_LL_StallEP>
 800c3e0:	e7d8      	b.n	800c394 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3e2:	886b      	ldrh	r3, [r5, #2]
 800c3e4:	b923      	cbnz	r3, 800c3f0 <USBD_StdEPReq+0x8e>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c3e6:	b119      	cbz	r1, 800c3f0 <USBD_StdEPReq+0x8e>
 800c3e8:	2980      	cmp	r1, #128	; 0x80
 800c3ea:	d001      	beq.n	800c3f0 <USBD_StdEPReq+0x8e>
 800c3ec:	88eb      	ldrh	r3, [r5, #6]
 800c3ee:	b11b      	cbz	r3, 800c3f8 <USBD_StdEPReq+0x96>
              (void)USBD_CtlSendStatus(pdev);
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f000 f8f5 	bl	800c5e0 <USBD_CtlSendStatus>
              break;
 800c3f6:	e7cd      	b.n	800c394 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3f8:	f7fa fbe0 	bl	8006bbc <USBD_LL_StallEP>
 800c3fc:	e7f8      	b.n	800c3f0 <USBD_StdEPReq+0x8e>
          switch (pdev->dev_state)
 800c3fe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b02      	cmp	r3, #2
 800c406:	d005      	beq.n	800c414 <USBD_StdEPReq+0xb2>
 800c408:	2b03      	cmp	r3, #3
 800c40a:	d012      	beq.n	800c432 <USBD_StdEPReq+0xd0>
              USBD_CtlError(pdev, req);
 800c40c:	4629      	mov	r1, r5
 800c40e:	f7ff fd92 	bl	800bf36 <USBD_CtlError>
              break;
 800c412:	e7bf      	b.n	800c394 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c414:	b109      	cbz	r1, 800c41a <USBD_StdEPReq+0xb8>
 800c416:	2980      	cmp	r1, #128	; 0x80
 800c418:	d104      	bne.n	800c424 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 800c41a:	4629      	mov	r1, r5
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff fd8a 	bl	800bf36 <USBD_CtlError>
 800c422:	e7b7      	b.n	800c394 <USBD_StdEPReq+0x32>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c424:	f7fa fbca 	bl	8006bbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c428:	2180      	movs	r1, #128	; 0x80
 800c42a:	4630      	mov	r0, r6
 800c42c:	f7fa fbc6 	bl	8006bbc <USBD_LL_StallEP>
 800c430:	e7b0      	b.n	800c394 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c432:	886b      	ldrh	r3, [r5, #2]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1ad      	bne.n	800c394 <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 800c438:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 800c43c:	d10a      	bne.n	800c454 <USBD_StdEPReq+0xf2>
                (void)USBD_CtlSendStatus(pdev);
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 f8ce 	bl	800c5e0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c444:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	4629      	mov	r1, r5
 800c44c:	4630      	mov	r0, r6
 800c44e:	4798      	blx	r3
 800c450:	4604      	mov	r4, r0
 800c452:	e79f      	b.n	800c394 <USBD_StdEPReq+0x32>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c454:	f7fa fbb9 	bl	8006bca <USBD_LL_ClearStallEP>
 800c458:	e7f1      	b.n	800c43e <USBD_StdEPReq+0xdc>
          switch (pdev->dev_state)
 800c45a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	2a02      	cmp	r2, #2
 800c462:	d006      	beq.n	800c472 <USBD_StdEPReq+0x110>
 800c464:	2a03      	cmp	r2, #3
 800c466:	d029      	beq.n	800c4bc <USBD_StdEPReq+0x15a>
              USBD_CtlError(pdev, req);
 800c468:	4629      	mov	r1, r5
 800c46a:	f7ff fd64 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c46e:	463c      	mov	r4, r7
              break;
 800c470:	e790      	b.n	800c394 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c472:	b109      	cbz	r1, 800c478 <USBD_StdEPReq+0x116>
 800c474:	2980      	cmp	r1, #128	; 0x80
 800c476:	d113      	bne.n	800c4a0 <USBD_StdEPReq+0x13e>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c478:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c47c:	d115      	bne.n	800c4aa <USBD_StdEPReq+0x148>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c47e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c482:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c486:	0089      	lsls	r1, r1, #2
 800c488:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 800c48c:	4431      	add	r1, r6
 800c48e:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800c490:	2300      	movs	r3, #0
 800c492:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c494:	2202      	movs	r2, #2
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f876 	bl	800c588 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c49c:	463c      	mov	r4, r7
              break;
 800c49e:	e779      	b.n	800c394 <USBD_StdEPReq+0x32>
                USBD_CtlError(pdev, req);
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7ff fd48 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4a6:	463c      	mov	r4, r7
                break;
 800c4a8:	e774      	b.n	800c394 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800c4ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c4b2:	0089      	lsls	r1, r1, #2
 800c4b4:	3110      	adds	r1, #16
 800c4b6:	4431      	add	r1, r6
 800c4b8:	3104      	adds	r1, #4
 800c4ba:	e7e9      	b.n	800c490 <USBD_StdEPReq+0x12e>
              if ((ep_addr & 0x80U) == 0x80U)
 800c4bc:	b25b      	sxtb	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	db1f      	blt.n	800c502 <USBD_StdEPReq+0x1a0>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4c2:	f001 020f 	and.w	r2, r1, #15
 800c4c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c4ca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c4ce:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 800c4d2:	b322      	cbz	r2, 800c51e <USBD_StdEPReq+0x1bc>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	db27      	blt.n	800c528 <USBD_StdEPReq+0x1c6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4d8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c4e0:	009c      	lsls	r4, r3, #2
 800c4e2:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 800c4e6:	4434      	add	r4, r6
 800c4e8:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4ea:	b109      	cbz	r1, 800c4f0 <USBD_StdEPReq+0x18e>
 800c4ec:	2980      	cmp	r1, #128	; 0x80
 800c4ee:	d124      	bne.n	800c53a <USBD_StdEPReq+0x1d8>
                pep->status = 0x0000U;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	6023      	str	r3, [r4, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f845 	bl	800c588 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800c4fe:	463c      	mov	r4, r7
              break;
 800c500:	e748      	b.n	800c394 <USBD_StdEPReq+0x32>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c502:	f001 020f 	and.w	r2, r1, #15
 800c506:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c50a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c50e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800c510:	2a00      	cmp	r2, #0
 800c512:	d1df      	bne.n	800c4d4 <USBD_StdEPReq+0x172>
                  USBD_CtlError(pdev, req);
 800c514:	4629      	mov	r1, r5
 800c516:	f7ff fd0e 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c51a:	463c      	mov	r4, r7
                  break;
 800c51c:	e73a      	b.n	800c394 <USBD_StdEPReq+0x32>
                  USBD_CtlError(pdev, req);
 800c51e:	4629      	mov	r1, r5
 800c520:	f7ff fd09 	bl	800bf36 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800c524:	463c      	mov	r4, r7
                  break;
 800c526:	e735      	b.n	800c394 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c528:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800c52c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c530:	009c      	lsls	r4, r3, #2
 800c532:	3410      	adds	r4, #16
 800c534:	4434      	add	r4, r6
 800c536:	3404      	adds	r4, #4
 800c538:	e7d7      	b.n	800c4ea <USBD_StdEPReq+0x188>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7fa fb4c 	bl	8006bd8 <USBD_LL_IsStallEP>
 800c540:	b110      	cbz	r0, 800c548 <USBD_StdEPReq+0x1e6>
                pep->status = 0x0001U;
 800c542:	2301      	movs	r3, #1
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	e7d5      	b.n	800c4f4 <USBD_StdEPReq+0x192>
                pep->status = 0x0000U;
 800c548:	2300      	movs	r3, #0
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	e7d2      	b.n	800c4f4 <USBD_StdEPReq+0x192>

0800c54e <USBD_GetString>:
  if (desc == NULL)
 800c54e:	b1d0      	cbz	r0, 800c586 <USBD_GetString+0x38>
{
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	460d      	mov	r5, r1
 800c554:	4616      	mov	r6, r2
 800c556:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c558:	f7ff fcc5 	bl	800bee6 <USBD_GetLen>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	b29b      	uxth	r3, r3
 800c562:	8033      	strh	r3, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800c564:	702b      	strb	r3, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c566:	2303      	movs	r3, #3
 800c568:	706b      	strb	r3, [r5, #1]
  idx++;
 800c56a:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 800c56c:	e007      	b.n	800c57e <USBD_GetString+0x30>
    unicode[idx] = *pdesc;
 800c56e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800c570:	3401      	adds	r4, #1
    idx++;
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800c576:	2100      	movs	r1, #0
 800c578:	54a9      	strb	r1, [r5, r2]
    idx++;
 800c57a:	3302      	adds	r3, #2
 800c57c:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 800c57e:	7822      	ldrb	r2, [r4, #0]
 800c580:	2a00      	cmp	r2, #0
 800c582:	d1f4      	bne.n	800c56e <USBD_GetString+0x20>
}
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	4770      	bx	lr

0800c588 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c588:	b508      	push	{r3, lr}
 800c58a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c58c:	2202      	movs	r2, #2
 800c58e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c592:	6183      	str	r3, [r0, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c594:	61c3      	str	r3, [r0, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c596:	460a      	mov	r2, r1
 800c598:	2100      	movs	r1, #0
 800c59a:	f7fa fb3b 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c59e:	2000      	movs	r0, #0
 800c5a0:	bd08      	pop	{r3, pc}

0800c5a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5a2:	b508      	push	{r3, lr}
 800c5a4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5a6:	460a      	mov	r2, r1
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	f7fa fb33 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	bd08      	pop	{r3, pc}

0800c5b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5b2:	b508      	push	{r3, lr}
 800c5b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5b6:	2203      	movs	r2, #3
 800c5b8:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5bc:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5c0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5c4:	460a      	mov	r2, r1
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	f7fa fb2b 	bl	8006c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	bd08      	pop	{r3, pc}

0800c5d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c5d0:	b508      	push	{r3, lr}
 800c5d2:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5d4:	460a      	mov	r2, r1
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	f7fa fb23 	bl	8006c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c5dc:	2000      	movs	r0, #0
 800c5de:	bd08      	pop	{r3, pc}

0800c5e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c5e0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	f7fa fb11 	bl	8006c14 <USBD_LL_Transmit>

  return USBD_OK;
}
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	bd08      	pop	{r3, pc}

0800c5f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5f6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5f8:	2205      	movs	r2, #5
 800c5fa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5fe:	2300      	movs	r3, #0
 800c600:	461a      	mov	r2, r3
 800c602:	4619      	mov	r1, r3
 800c604:	f7fa fb0d 	bl	8006c22 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800c608:	2000      	movs	r0, #0
 800c60a:	bd08      	pop	{r3, pc}
 800c60c:	0000      	movs	r0, r0
	...

0800c610 <atan>:
 800c610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	4bbc      	ldr	r3, [pc, #752]	; (800c908 <atan+0x2f8>)
 800c616:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c61a:	429e      	cmp	r6, r3
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	468b      	mov	fp, r1
 800c622:	dd18      	ble.n	800c656 <atan+0x46>
 800c624:	4bb9      	ldr	r3, [pc, #740]	; (800c90c <atan+0x2fc>)
 800c626:	429e      	cmp	r6, r3
 800c628:	dc01      	bgt.n	800c62e <atan+0x1e>
 800c62a:	d109      	bne.n	800c640 <atan+0x30>
 800c62c:	b140      	cbz	r0, 800c640 <atan+0x30>
 800c62e:	4622      	mov	r2, r4
 800c630:	462b      	mov	r3, r5
 800c632:	4620      	mov	r0, r4
 800c634:	4629      	mov	r1, r5
 800c636:	f7f7 fe21 	bl	800427c <__adddf3>
 800c63a:	4604      	mov	r4, r0
 800c63c:	460d      	mov	r5, r1
 800c63e:	e006      	b.n	800c64e <atan+0x3e>
 800c640:	f1bb 0f00 	cmp.w	fp, #0
 800c644:	f300 8123 	bgt.w	800c88e <atan+0x27e>
 800c648:	a593      	add	r5, pc, #588	; (adr r5, 800c898 <atan+0x288>)
 800c64a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c656:	4bae      	ldr	r3, [pc, #696]	; (800c910 <atan+0x300>)
 800c658:	429e      	cmp	r6, r3
 800c65a:	dc11      	bgt.n	800c680 <atan+0x70>
 800c65c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c660:	429e      	cmp	r6, r3
 800c662:	dc0a      	bgt.n	800c67a <atan+0x6a>
 800c664:	a38e      	add	r3, pc, #568	; (adr r3, 800c8a0 <atan+0x290>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	f7f7 fe07 	bl	800427c <__adddf3>
 800c66e:	4ba9      	ldr	r3, [pc, #676]	; (800c914 <atan+0x304>)
 800c670:	2200      	movs	r2, #0
 800c672:	f7f8 fa49 	bl	8004b08 <__aeabi_dcmpgt>
 800c676:	2800      	cmp	r0, #0
 800c678:	d1e9      	bne.n	800c64e <atan+0x3e>
 800c67a:	f04f 3aff 	mov.w	sl, #4294967295
 800c67e:	e027      	b.n	800c6d0 <atan+0xc0>
 800c680:	f000 f99c 	bl	800c9bc <fabs>
 800c684:	4ba4      	ldr	r3, [pc, #656]	; (800c918 <atan+0x308>)
 800c686:	429e      	cmp	r6, r3
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	f300 80b8 	bgt.w	800c800 <atan+0x1f0>
 800c690:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c694:	429e      	cmp	r6, r3
 800c696:	f300 809c 	bgt.w	800c7d2 <atan+0x1c2>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	f7f7 fded 	bl	800427c <__adddf3>
 800c6a2:	4b9c      	ldr	r3, [pc, #624]	; (800c914 <atan+0x304>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f7f7 fde7 	bl	8004278 <__aeabi_dsub>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	f7f7 fde0 	bl	800427c <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	4639      	mov	r1, r7
 800c6c4:	f7f8 f8ba 	bl	800483c <__aeabi_ddiv>
 800c6c8:	f04f 0a00 	mov.w	sl, #0
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	460d      	mov	r5, r1
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	462b      	mov	r3, r5
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f7 ff86 	bl	80045e8 <__aeabi_dmul>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	4689      	mov	r9, r1
 800c6e4:	f7f7 ff80 	bl	80045e8 <__aeabi_dmul>
 800c6e8:	a36f      	add	r3, pc, #444	; (adr r3, 800c8a8 <atan+0x298>)
 800c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	460f      	mov	r7, r1
 800c6f2:	f7f7 ff79 	bl	80045e8 <__aeabi_dmul>
 800c6f6:	a36e      	add	r3, pc, #440	; (adr r3, 800c8b0 <atan+0x2a0>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f7 fdbe 	bl	800427c <__adddf3>
 800c700:	4632      	mov	r2, r6
 800c702:	463b      	mov	r3, r7
 800c704:	f7f7 ff70 	bl	80045e8 <__aeabi_dmul>
 800c708:	a36b      	add	r3, pc, #428	; (adr r3, 800c8b8 <atan+0x2a8>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f7 fdb5 	bl	800427c <__adddf3>
 800c712:	4632      	mov	r2, r6
 800c714:	463b      	mov	r3, r7
 800c716:	f7f7 ff67 	bl	80045e8 <__aeabi_dmul>
 800c71a:	a369      	add	r3, pc, #420	; (adr r3, 800c8c0 <atan+0x2b0>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f7 fdac 	bl	800427c <__adddf3>
 800c724:	4632      	mov	r2, r6
 800c726:	463b      	mov	r3, r7
 800c728:	f7f7 ff5e 	bl	80045e8 <__aeabi_dmul>
 800c72c:	a366      	add	r3, pc, #408	; (adr r3, 800c8c8 <atan+0x2b8>)
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f7 fda3 	bl	800427c <__adddf3>
 800c736:	4632      	mov	r2, r6
 800c738:	463b      	mov	r3, r7
 800c73a:	f7f7 ff55 	bl	80045e8 <__aeabi_dmul>
 800c73e:	a364      	add	r3, pc, #400	; (adr r3, 800c8d0 <atan+0x2c0>)
 800c740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c744:	f7f7 fd9a 	bl	800427c <__adddf3>
 800c748:	4642      	mov	r2, r8
 800c74a:	464b      	mov	r3, r9
 800c74c:	f7f7 ff4c 	bl	80045e8 <__aeabi_dmul>
 800c750:	a361      	add	r3, pc, #388	; (adr r3, 800c8d8 <atan+0x2c8>)
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	4680      	mov	r8, r0
 800c758:	4689      	mov	r9, r1
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f7 ff43 	bl	80045e8 <__aeabi_dmul>
 800c762:	a35f      	add	r3, pc, #380	; (adr r3, 800c8e0 <atan+0x2d0>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f7 fd86 	bl	8004278 <__aeabi_dsub>
 800c76c:	4632      	mov	r2, r6
 800c76e:	463b      	mov	r3, r7
 800c770:	f7f7 ff3a 	bl	80045e8 <__aeabi_dmul>
 800c774:	a35c      	add	r3, pc, #368	; (adr r3, 800c8e8 <atan+0x2d8>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f7 fd7d 	bl	8004278 <__aeabi_dsub>
 800c77e:	4632      	mov	r2, r6
 800c780:	463b      	mov	r3, r7
 800c782:	f7f7 ff31 	bl	80045e8 <__aeabi_dmul>
 800c786:	a35a      	add	r3, pc, #360	; (adr r3, 800c8f0 <atan+0x2e0>)
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f7 fd74 	bl	8004278 <__aeabi_dsub>
 800c790:	4632      	mov	r2, r6
 800c792:	463b      	mov	r3, r7
 800c794:	f7f7 ff28 	bl	80045e8 <__aeabi_dmul>
 800c798:	a357      	add	r3, pc, #348	; (adr r3, 800c8f8 <atan+0x2e8>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f7 fd6b 	bl	8004278 <__aeabi_dsub>
 800c7a2:	4632      	mov	r2, r6
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	f7f7 ff1f 	bl	80045e8 <__aeabi_dmul>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f7 fd63 	bl	800427c <__adddf3>
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	f7f7 ff15 	bl	80045e8 <__aeabi_dmul>
 800c7be:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	d144      	bne.n	800c852 <atan+0x242>
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	f7f7 fd54 	bl	8004278 <__aeabi_dsub>
 800c7d0:	e733      	b.n	800c63a <atan+0x2a>
 800c7d2:	4b50      	ldr	r3, [pc, #320]	; (800c914 <atan+0x304>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f7f7 fd4f 	bl	8004278 <__aeabi_dsub>
 800c7da:	4b4e      	ldr	r3, [pc, #312]	; (800c914 <atan+0x304>)
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460f      	mov	r7, r1
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f7 fd49 	bl	800427c <__adddf3>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f7f8 f823 	bl	800483c <__aeabi_ddiv>
 800c7f6:	f04f 0a01 	mov.w	sl, #1
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	e767      	b.n	800c6d0 <atan+0xc0>
 800c800:	4b46      	ldr	r3, [pc, #280]	; (800c91c <atan+0x30c>)
 800c802:	429e      	cmp	r6, r3
 800c804:	da1a      	bge.n	800c83c <atan+0x22c>
 800c806:	4b46      	ldr	r3, [pc, #280]	; (800c920 <atan+0x310>)
 800c808:	2200      	movs	r2, #0
 800c80a:	f7f7 fd35 	bl	8004278 <__aeabi_dsub>
 800c80e:	4b44      	ldr	r3, [pc, #272]	; (800c920 <atan+0x310>)
 800c810:	4606      	mov	r6, r0
 800c812:	460f      	mov	r7, r1
 800c814:	2200      	movs	r2, #0
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f7 fee5 	bl	80045e8 <__aeabi_dmul>
 800c81e:	4b3d      	ldr	r3, [pc, #244]	; (800c914 <atan+0x304>)
 800c820:	2200      	movs	r2, #0
 800c822:	f7f7 fd2b 	bl	800427c <__adddf3>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	4630      	mov	r0, r6
 800c82c:	4639      	mov	r1, r7
 800c82e:	f7f8 f805 	bl	800483c <__aeabi_ddiv>
 800c832:	f04f 0a02 	mov.w	sl, #2
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	e749      	b.n	800c6d0 <atan+0xc0>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	2000      	movs	r0, #0
 800c842:	4938      	ldr	r1, [pc, #224]	; (800c924 <atan+0x314>)
 800c844:	f7f7 fffa 	bl	800483c <__aeabi_ddiv>
 800c848:	f04f 0a03 	mov.w	sl, #3
 800c84c:	4604      	mov	r4, r0
 800c84e:	460d      	mov	r5, r1
 800c850:	e73e      	b.n	800c6d0 <atan+0xc0>
 800c852:	4b35      	ldr	r3, [pc, #212]	; (800c928 <atan+0x318>)
 800c854:	4e35      	ldr	r6, [pc, #212]	; (800c92c <atan+0x31c>)
 800c856:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c85a:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c85e:	e9da 2300 	ldrd	r2, r3, [sl]
 800c862:	f7f7 fd09 	bl	8004278 <__aeabi_dsub>
 800c866:	4622      	mov	r2, r4
 800c868:	462b      	mov	r3, r5
 800c86a:	f7f7 fd05 	bl	8004278 <__aeabi_dsub>
 800c86e:	4602      	mov	r2, r0
 800c870:	460b      	mov	r3, r1
 800c872:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c876:	f7f7 fcff 	bl	8004278 <__aeabi_dsub>
 800c87a:	f1bb 0f00 	cmp.w	fp, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	460d      	mov	r5, r1
 800c882:	f6bf aee4 	bge.w	800c64e <atan+0x3e>
 800c886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c88a:	461d      	mov	r5, r3
 800c88c:	e6df      	b.n	800c64e <atan+0x3e>
 800c88e:	a51c      	add	r5, pc, #112	; (adr r5, 800c900 <atan+0x2f0>)
 800c890:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c894:	e6db      	b.n	800c64e <atan+0x3e>
 800c896:	bf00      	nop
 800c898:	54442d18 	.word	0x54442d18
 800c89c:	bff921fb 	.word	0xbff921fb
 800c8a0:	8800759c 	.word	0x8800759c
 800c8a4:	7e37e43c 	.word	0x7e37e43c
 800c8a8:	e322da11 	.word	0xe322da11
 800c8ac:	3f90ad3a 	.word	0x3f90ad3a
 800c8b0:	24760deb 	.word	0x24760deb
 800c8b4:	3fa97b4b 	.word	0x3fa97b4b
 800c8b8:	a0d03d51 	.word	0xa0d03d51
 800c8bc:	3fb10d66 	.word	0x3fb10d66
 800c8c0:	c54c206e 	.word	0xc54c206e
 800c8c4:	3fb745cd 	.word	0x3fb745cd
 800c8c8:	920083ff 	.word	0x920083ff
 800c8cc:	3fc24924 	.word	0x3fc24924
 800c8d0:	5555550d 	.word	0x5555550d
 800c8d4:	3fd55555 	.word	0x3fd55555
 800c8d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c8dc:	bfa2b444 	.word	0xbfa2b444
 800c8e0:	52defd9a 	.word	0x52defd9a
 800c8e4:	3fadde2d 	.word	0x3fadde2d
 800c8e8:	af749a6d 	.word	0xaf749a6d
 800c8ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800c8f0:	fe231671 	.word	0xfe231671
 800c8f4:	3fbc71c6 	.word	0x3fbc71c6
 800c8f8:	9998ebc4 	.word	0x9998ebc4
 800c8fc:	3fc99999 	.word	0x3fc99999
 800c900:	54442d18 	.word	0x54442d18
 800c904:	3ff921fb 	.word	0x3ff921fb
 800c908:	440fffff 	.word	0x440fffff
 800c90c:	7ff00000 	.word	0x7ff00000
 800c910:	3fdbffff 	.word	0x3fdbffff
 800c914:	3ff00000 	.word	0x3ff00000
 800c918:	3ff2ffff 	.word	0x3ff2ffff
 800c91c:	40038000 	.word	0x40038000
 800c920:	3ff80000 	.word	0x3ff80000
 800c924:	bff00000 	.word	0xbff00000
 800c928:	0800f548 	.word	0x0800f548
 800c92c:	0800f528 	.word	0x0800f528

0800c930 <cos>:
 800c930:	b530      	push	{r4, r5, lr}
 800c932:	4d20      	ldr	r5, [pc, #128]	; (800c9b4 <cos+0x84>)
 800c934:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c938:	42ac      	cmp	r4, r5
 800c93a:	b087      	sub	sp, #28
 800c93c:	4602      	mov	r2, r0
 800c93e:	460b      	mov	r3, r1
 800c940:	dc06      	bgt.n	800c950 <cos+0x20>
 800c942:	2200      	movs	r2, #0
 800c944:	2300      	movs	r3, #0
 800c946:	b007      	add	sp, #28
 800c948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c94c:	f001 b9b8 	b.w	800dcc0 <__kernel_cos>
 800c950:	4d19      	ldr	r5, [pc, #100]	; (800c9b8 <cos+0x88>)
 800c952:	42ac      	cmp	r4, r5
 800c954:	dd03      	ble.n	800c95e <cos+0x2e>
 800c956:	f7f7 fc8f 	bl	8004278 <__aeabi_dsub>
 800c95a:	b007      	add	sp, #28
 800c95c:	bd30      	pop	{r4, r5, pc}
 800c95e:	aa02      	add	r2, sp, #8
 800c960:	f000 fefe 	bl	800d760 <__ieee754_rem_pio2>
 800c964:	f000 0003 	and.w	r0, r0, #3
 800c968:	2801      	cmp	r0, #1
 800c96a:	d009      	beq.n	800c980 <cos+0x50>
 800c96c:	2802      	cmp	r0, #2
 800c96e:	d011      	beq.n	800c994 <cos+0x64>
 800c970:	b9b8      	cbnz	r0, 800c9a2 <cos+0x72>
 800c972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c97a:	f001 f9a1 	bl	800dcc0 <__kernel_cos>
 800c97e:	e7ec      	b.n	800c95a <cos+0x2a>
 800c980:	9000      	str	r0, [sp, #0]
 800c982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c98a:	f001 fd9d 	bl	800e4c8 <__kernel_sin>
 800c98e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c992:	e7e2      	b.n	800c95a <cos+0x2a>
 800c994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c99c:	f001 f990 	bl	800dcc0 <__kernel_cos>
 800c9a0:	e7f5      	b.n	800c98e <cos+0x5e>
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9ae:	f001 fd8b 	bl	800e4c8 <__kernel_sin>
 800c9b2:	e7d2      	b.n	800c95a <cos+0x2a>
 800c9b4:	3fe921fb 	.word	0x3fe921fb
 800c9b8:	7fefffff 	.word	0x7fefffff

0800c9bc <fabs>:
 800c9bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <sin>:
 800c9c4:	b530      	push	{r4, r5, lr}
 800c9c6:	4d20      	ldr	r5, [pc, #128]	; (800ca48 <sin+0x84>)
 800c9c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c9cc:	42ac      	cmp	r4, r5
 800c9ce:	b087      	sub	sp, #28
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	dc06      	bgt.n	800c9e4 <sin+0x20>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f001 fd73 	bl	800e4c8 <__kernel_sin>
 800c9e2:	e004      	b.n	800c9ee <sin+0x2a>
 800c9e4:	4d19      	ldr	r5, [pc, #100]	; (800ca4c <sin+0x88>)
 800c9e6:	42ac      	cmp	r4, r5
 800c9e8:	dd03      	ble.n	800c9f2 <sin+0x2e>
 800c9ea:	f7f7 fc45 	bl	8004278 <__aeabi_dsub>
 800c9ee:	b007      	add	sp, #28
 800c9f0:	bd30      	pop	{r4, r5, pc}
 800c9f2:	aa02      	add	r2, sp, #8
 800c9f4:	f000 feb4 	bl	800d760 <__ieee754_rem_pio2>
 800c9f8:	f000 0003 	and.w	r0, r0, #3
 800c9fc:	2801      	cmp	r0, #1
 800c9fe:	d009      	beq.n	800ca14 <sin+0x50>
 800ca00:	2802      	cmp	r0, #2
 800ca02:	d00e      	beq.n	800ca22 <sin+0x5e>
 800ca04:	b9c0      	cbnz	r0, 800ca38 <sin+0x74>
 800ca06:	2301      	movs	r3, #1
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca12:	e7e4      	b.n	800c9de <sin+0x1a>
 800ca14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca1c:	f001 f950 	bl	800dcc0 <__kernel_cos>
 800ca20:	e7e5      	b.n	800c9ee <sin+0x2a>
 800ca22:	2301      	movs	r3, #1
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca2e:	f001 fd4b 	bl	800e4c8 <__kernel_sin>
 800ca32:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ca36:	e7da      	b.n	800c9ee <sin+0x2a>
 800ca38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca40:	f001 f93e 	bl	800dcc0 <__kernel_cos>
 800ca44:	e7f5      	b.n	800ca32 <sin+0x6e>
 800ca46:	bf00      	nop
 800ca48:	3fe921fb 	.word	0x3fe921fb
 800ca4c:	7fefffff 	.word	0x7fefffff

0800ca50 <atan2>:
 800ca50:	f000 b88e 	b.w	800cb70 <__ieee754_atan2>

0800ca54 <pow>:
 800ca54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca58:	4614      	mov	r4, r2
 800ca5a:	461d      	mov	r5, r3
 800ca5c:	4680      	mov	r8, r0
 800ca5e:	4689      	mov	r9, r1
 800ca60:	f000 f95a 	bl	800cd18 <__ieee754_pow>
 800ca64:	4622      	mov	r2, r4
 800ca66:	4606      	mov	r6, r0
 800ca68:	460f      	mov	r7, r1
 800ca6a:	462b      	mov	r3, r5
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	4629      	mov	r1, r5
 800ca70:	f7f8 f854 	bl	8004b1c <__aeabi_dcmpun>
 800ca74:	bbc8      	cbnz	r0, 800caea <pow+0x96>
 800ca76:	2200      	movs	r2, #0
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	4649      	mov	r1, r9
 800ca7e:	f7f8 f81b 	bl	8004ab8 <__aeabi_dcmpeq>
 800ca82:	b1b8      	cbz	r0, 800cab4 <pow+0x60>
 800ca84:	2200      	movs	r2, #0
 800ca86:	2300      	movs	r3, #0
 800ca88:	4620      	mov	r0, r4
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	f7f8 f814 	bl	8004ab8 <__aeabi_dcmpeq>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d141      	bne.n	800cb18 <pow+0xc4>
 800ca94:	4620      	mov	r0, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	f001 fdf4 	bl	800e684 <finite>
 800ca9c:	b328      	cbz	r0, 800caea <pow+0x96>
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2300      	movs	r3, #0
 800caa2:	4620      	mov	r0, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	f7f8 f811 	bl	8004acc <__aeabi_dcmplt>
 800caaa:	b1f0      	cbz	r0, 800caea <pow+0x96>
 800caac:	f001 fef2 	bl	800e894 <__errno>
 800cab0:	2322      	movs	r3, #34	; 0x22
 800cab2:	e019      	b.n	800cae8 <pow+0x94>
 800cab4:	4630      	mov	r0, r6
 800cab6:	4639      	mov	r1, r7
 800cab8:	f001 fde4 	bl	800e684 <finite>
 800cabc:	b9c8      	cbnz	r0, 800caf2 <pow+0x9e>
 800cabe:	4640      	mov	r0, r8
 800cac0:	4649      	mov	r1, r9
 800cac2:	f001 fddf 	bl	800e684 <finite>
 800cac6:	b1a0      	cbz	r0, 800caf2 <pow+0x9e>
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f001 fdda 	bl	800e684 <finite>
 800cad0:	b178      	cbz	r0, 800caf2 <pow+0x9e>
 800cad2:	4632      	mov	r2, r6
 800cad4:	463b      	mov	r3, r7
 800cad6:	4630      	mov	r0, r6
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f8 f81f 	bl	8004b1c <__aeabi_dcmpun>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d0e4      	beq.n	800caac <pow+0x58>
 800cae2:	f001 fed7 	bl	800e894 <__errno>
 800cae6:	2321      	movs	r3, #33	; 0x21
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caf2:	2200      	movs	r2, #0
 800caf4:	2300      	movs	r3, #0
 800caf6:	4630      	mov	r0, r6
 800caf8:	4639      	mov	r1, r7
 800cafa:	f7f7 ffdd 	bl	8004ab8 <__aeabi_dcmpeq>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d0f3      	beq.n	800caea <pow+0x96>
 800cb02:	4640      	mov	r0, r8
 800cb04:	4649      	mov	r1, r9
 800cb06:	f001 fdbd 	bl	800e684 <finite>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d0ed      	beq.n	800caea <pow+0x96>
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f001 fdb7 	bl	800e684 <finite>
 800cb16:	e7c8      	b.n	800caaa <pow+0x56>
 800cb18:	4f01      	ldr	r7, [pc, #4]	; (800cb20 <pow+0xcc>)
 800cb1a:	2600      	movs	r6, #0
 800cb1c:	e7e5      	b.n	800caea <pow+0x96>
 800cb1e:	bf00      	nop
 800cb20:	3ff00000 	.word	0x3ff00000

0800cb24 <sqrt>:
 800cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb26:	4606      	mov	r6, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	f001 f819 	bl	800db60 <__ieee754_sqrt>
 800cb2e:	4632      	mov	r2, r6
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	463b      	mov	r3, r7
 800cb36:	4630      	mov	r0, r6
 800cb38:	4639      	mov	r1, r7
 800cb3a:	f7f7 ffef 	bl	8004b1c <__aeabi_dcmpun>
 800cb3e:	b990      	cbnz	r0, 800cb66 <sqrt+0x42>
 800cb40:	2200      	movs	r2, #0
 800cb42:	2300      	movs	r3, #0
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f7 ffc0 	bl	8004acc <__aeabi_dcmplt>
 800cb4c:	b158      	cbz	r0, 800cb66 <sqrt+0x42>
 800cb4e:	f001 fea1 	bl	800e894 <__errno>
 800cb52:	2321      	movs	r3, #33	; 0x21
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	2200      	movs	r2, #0
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4610      	mov	r0, r2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	f7f7 fe6d 	bl	800483c <__aeabi_ddiv>
 800cb62:	4604      	mov	r4, r0
 800cb64:	460d      	mov	r5, r1
 800cb66:	4620      	mov	r0, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb6c:	0000      	movs	r0, r0
	...

0800cb70 <__ieee754_atan2>:
 800cb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	4690      	mov	r8, r2
 800cb76:	4699      	mov	r9, r3
 800cb78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cb7c:	461f      	mov	r7, r3
 800cb7e:	f1c8 0300 	rsb	r3, r8, #0
 800cb82:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800cd10 <__ieee754_atan2+0x1a0>
 800cb86:	ea43 0308 	orr.w	r3, r3, r8
 800cb8a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cb8e:	4573      	cmp	r3, lr
 800cb90:	4604      	mov	r4, r0
 800cb92:	460d      	mov	r5, r1
 800cb94:	d808      	bhi.n	800cba8 <__ieee754_atan2+0x38>
 800cb96:	4246      	negs	r6, r0
 800cb98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb9c:	4306      	orrs	r6, r0
 800cb9e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800cba2:	4576      	cmp	r6, lr
 800cba4:	468c      	mov	ip, r1
 800cba6:	d908      	bls.n	800cbba <__ieee754_atan2+0x4a>
 800cba8:	4642      	mov	r2, r8
 800cbaa:	464b      	mov	r3, r9
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f7f7 fb64 	bl	800427c <__adddf3>
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	460d      	mov	r5, r1
 800cbb8:	e019      	b.n	800cbee <__ieee754_atan2+0x7e>
 800cbba:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800cbbe:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800cbc2:	ea56 0608 	orrs.w	r6, r6, r8
 800cbc6:	d103      	bne.n	800cbd0 <__ieee754_atan2+0x60>
 800cbc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	f7ff bd20 	b.w	800c610 <atan>
 800cbd0:	17be      	asrs	r6, r7, #30
 800cbd2:	f006 0602 	and.w	r6, r6, #2
 800cbd6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800cbda:	ea53 0100 	orrs.w	r1, r3, r0
 800cbde:	d10a      	bne.n	800cbf6 <__ieee754_atan2+0x86>
 800cbe0:	2e02      	cmp	r6, #2
 800cbe2:	d067      	beq.n	800ccb4 <__ieee754_atan2+0x144>
 800cbe4:	2e03      	cmp	r6, #3
 800cbe6:	d102      	bne.n	800cbee <__ieee754_atan2+0x7e>
 800cbe8:	a545      	add	r5, pc, #276	; (adr r5, 800cd00 <__ieee754_atan2+0x190>)
 800cbea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf6:	ea52 0108 	orrs.w	r1, r2, r8
 800cbfa:	d106      	bne.n	800cc0a <__ieee754_atan2+0x9a>
 800cbfc:	f1bc 0f00 	cmp.w	ip, #0
 800cc00:	da63      	bge.n	800ccca <__ieee754_atan2+0x15a>
 800cc02:	a541      	add	r5, pc, #260	; (adr r5, 800cd08 <__ieee754_atan2+0x198>)
 800cc04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc08:	e7f1      	b.n	800cbee <__ieee754_atan2+0x7e>
 800cc0a:	4572      	cmp	r2, lr
 800cc0c:	d10f      	bne.n	800cc2e <__ieee754_atan2+0xbe>
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	f106 36ff 	add.w	r6, r6, #4294967295
 800cc14:	d107      	bne.n	800cc26 <__ieee754_atan2+0xb6>
 800cc16:	2e02      	cmp	r6, #2
 800cc18:	d850      	bhi.n	800ccbc <__ieee754_atan2+0x14c>
 800cc1a:	4b37      	ldr	r3, [pc, #220]	; (800ccf8 <__ieee754_atan2+0x188>)
 800cc1c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cc20:	e9d6 4500 	ldrd	r4, r5, [r6]
 800cc24:	e7e3      	b.n	800cbee <__ieee754_atan2+0x7e>
 800cc26:	2e02      	cmp	r6, #2
 800cc28:	d84c      	bhi.n	800ccc4 <__ieee754_atan2+0x154>
 800cc2a:	4b34      	ldr	r3, [pc, #208]	; (800ccfc <__ieee754_atan2+0x18c>)
 800cc2c:	e7f6      	b.n	800cc1c <__ieee754_atan2+0xac>
 800cc2e:	4573      	cmp	r3, lr
 800cc30:	d0e4      	beq.n	800cbfc <__ieee754_atan2+0x8c>
 800cc32:	1a9b      	subs	r3, r3, r2
 800cc34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cc38:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc3c:	da20      	bge.n	800cc80 <__ieee754_atan2+0x110>
 800cc3e:	2f00      	cmp	r7, #0
 800cc40:	da01      	bge.n	800cc46 <__ieee754_atan2+0xd6>
 800cc42:	323c      	adds	r2, #60	; 0x3c
 800cc44:	db20      	blt.n	800cc88 <__ieee754_atan2+0x118>
 800cc46:	4642      	mov	r2, r8
 800cc48:	464b      	mov	r3, r9
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f7f7 fdf5 	bl	800483c <__aeabi_ddiv>
 800cc52:	f7ff feb3 	bl	800c9bc <fabs>
 800cc56:	f7ff fcdb 	bl	800c610 <atan>
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	460d      	mov	r5, r1
 800cc5e:	2e01      	cmp	r6, #1
 800cc60:	d015      	beq.n	800cc8e <__ieee754_atan2+0x11e>
 800cc62:	2e02      	cmp	r6, #2
 800cc64:	d017      	beq.n	800cc96 <__ieee754_atan2+0x126>
 800cc66:	2e00      	cmp	r6, #0
 800cc68:	d0c1      	beq.n	800cbee <__ieee754_atan2+0x7e>
 800cc6a:	a31b      	add	r3, pc, #108	; (adr r3, 800ccd8 <__ieee754_atan2+0x168>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	4620      	mov	r0, r4
 800cc72:	4629      	mov	r1, r5
 800cc74:	f7f7 fb00 	bl	8004278 <__aeabi_dsub>
 800cc78:	a319      	add	r3, pc, #100	; (adr r3, 800cce0 <__ieee754_atan2+0x170>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	e016      	b.n	800ccae <__ieee754_atan2+0x13e>
 800cc80:	a519      	add	r5, pc, #100	; (adr r5, 800cce8 <__ieee754_atan2+0x178>)
 800cc82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc86:	e7ea      	b.n	800cc5e <__ieee754_atan2+0xee>
 800cc88:	2400      	movs	r4, #0
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	e7e7      	b.n	800cc5e <__ieee754_atan2+0xee>
 800cc8e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cc92:	461d      	mov	r5, r3
 800cc94:	e7ab      	b.n	800cbee <__ieee754_atan2+0x7e>
 800cc96:	a310      	add	r3, pc, #64	; (adr r3, 800ccd8 <__ieee754_atan2+0x168>)
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	4629      	mov	r1, r5
 800cca0:	f7f7 faea 	bl	8004278 <__aeabi_dsub>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	a10d      	add	r1, pc, #52	; (adr r1, 800cce0 <__ieee754_atan2+0x170>)
 800ccaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccae:	f7f7 fae3 	bl	8004278 <__aeabi_dsub>
 800ccb2:	e77f      	b.n	800cbb4 <__ieee754_atan2+0x44>
 800ccb4:	a50a      	add	r5, pc, #40	; (adr r5, 800cce0 <__ieee754_atan2+0x170>)
 800ccb6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccba:	e798      	b.n	800cbee <__ieee754_atan2+0x7e>
 800ccbc:	a50c      	add	r5, pc, #48	; (adr r5, 800ccf0 <__ieee754_atan2+0x180>)
 800ccbe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccc2:	e794      	b.n	800cbee <__ieee754_atan2+0x7e>
 800ccc4:	2400      	movs	r4, #0
 800ccc6:	2500      	movs	r5, #0
 800ccc8:	e791      	b.n	800cbee <__ieee754_atan2+0x7e>
 800ccca:	a507      	add	r5, pc, #28	; (adr r5, 800cce8 <__ieee754_atan2+0x178>)
 800cccc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ccd0:	e78d      	b.n	800cbee <__ieee754_atan2+0x7e>
 800ccd2:	bf00      	nop
 800ccd4:	f3af 8000 	nop.w
 800ccd8:	33145c07 	.word	0x33145c07
 800ccdc:	3ca1a626 	.word	0x3ca1a626
 800cce0:	54442d18 	.word	0x54442d18
 800cce4:	400921fb 	.word	0x400921fb
 800cce8:	54442d18 	.word	0x54442d18
 800ccec:	3ff921fb 	.word	0x3ff921fb
 800ccf0:	54442d18 	.word	0x54442d18
 800ccf4:	3fe921fb 	.word	0x3fe921fb
 800ccf8:	0800f568 	.word	0x0800f568
 800ccfc:	0800f580 	.word	0x0800f580
 800cd00:	54442d18 	.word	0x54442d18
 800cd04:	c00921fb 	.word	0xc00921fb
 800cd08:	54442d18 	.word	0x54442d18
 800cd0c:	bff921fb 	.word	0xbff921fb
 800cd10:	7ff00000 	.word	0x7ff00000
 800cd14:	00000000 	.word	0x00000000

0800cd18 <__ieee754_pow>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ed2d 8b06 	vpush	{d8-d10}
 800cd20:	b089      	sub	sp, #36	; 0x24
 800cd22:	e9cd 2300 	strd	r2, r3, [sp]
 800cd26:	e9dd 2900 	ldrd	r2, r9, [sp]
 800cd2a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800cd2e:	460d      	mov	r5, r1
 800cd30:	ea58 0102 	orrs.w	r1, r8, r2
 800cd34:	4604      	mov	r4, r0
 800cd36:	d113      	bne.n	800cd60 <__ieee754_pow+0x48>
 800cd38:	1803      	adds	r3, r0, r0
 800cd3a:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800cd3e:	4152      	adcs	r2, r2
 800cd40:	4299      	cmp	r1, r3
 800cd42:	4b86      	ldr	r3, [pc, #536]	; (800cf5c <__ieee754_pow+0x244>)
 800cd44:	4193      	sbcs	r3, r2
 800cd46:	f080 84c6 	bcs.w	800d6d6 <__ieee754_pow+0x9be>
 800cd4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f7 fa93 	bl	800427c <__adddf3>
 800cd56:	b009      	add	sp, #36	; 0x24
 800cd58:	ecbd 8b06 	vpop	{d8-d10}
 800cd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd60:	4b7f      	ldr	r3, [pc, #508]	; (800cf60 <__ieee754_pow+0x248>)
 800cd62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd66:	429e      	cmp	r6, r3
 800cd68:	462f      	mov	r7, r5
 800cd6a:	4682      	mov	sl, r0
 800cd6c:	dc06      	bgt.n	800cd7c <__ieee754_pow+0x64>
 800cd6e:	d101      	bne.n	800cd74 <__ieee754_pow+0x5c>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	d1ea      	bne.n	800cd4a <__ieee754_pow+0x32>
 800cd74:	4598      	cmp	r8, r3
 800cd76:	dc01      	bgt.n	800cd7c <__ieee754_pow+0x64>
 800cd78:	d10f      	bne.n	800cd9a <__ieee754_pow+0x82>
 800cd7a:	b172      	cbz	r2, 800cd9a <__ieee754_pow+0x82>
 800cd7c:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800cd80:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800cd84:	ea57 070a 	orrs.w	r7, r7, sl
 800cd88:	d1df      	bne.n	800cd4a <__ieee754_pow+0x32>
 800cd8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd8e:	18db      	adds	r3, r3, r3
 800cd90:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cd94:	4152      	adcs	r2, r2
 800cd96:	429f      	cmp	r7, r3
 800cd98:	e7d3      	b.n	800cd42 <__ieee754_pow+0x2a>
 800cd9a:	2f00      	cmp	r7, #0
 800cd9c:	da3b      	bge.n	800ce16 <__ieee754_pow+0xfe>
 800cd9e:	4b71      	ldr	r3, [pc, #452]	; (800cf64 <__ieee754_pow+0x24c>)
 800cda0:	4598      	cmp	r8, r3
 800cda2:	dc51      	bgt.n	800ce48 <__ieee754_pow+0x130>
 800cda4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cda8:	4598      	cmp	r8, r3
 800cdaa:	f340 84a3 	ble.w	800d6f4 <__ieee754_pow+0x9dc>
 800cdae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cdb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cdb6:	2b14      	cmp	r3, #20
 800cdb8:	dd0f      	ble.n	800cdda <__ieee754_pow+0xc2>
 800cdba:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cdbe:	fa22 f103 	lsr.w	r1, r2, r3
 800cdc2:	fa01 f303 	lsl.w	r3, r1, r3
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	f040 8494 	bne.w	800d6f4 <__ieee754_pow+0x9dc>
 800cdcc:	f001 0101 	and.w	r1, r1, #1
 800cdd0:	f1c1 0302 	rsb	r3, r1, #2
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	b182      	cbz	r2, 800cdfa <__ieee754_pow+0xe2>
 800cdd8:	e05f      	b.n	800ce9a <__ieee754_pow+0x182>
 800cdda:	2a00      	cmp	r2, #0
 800cddc:	d15b      	bne.n	800ce96 <__ieee754_pow+0x17e>
 800cdde:	f1c3 0314 	rsb	r3, r3, #20
 800cde2:	fa48 f103 	asr.w	r1, r8, r3
 800cde6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdea:	4543      	cmp	r3, r8
 800cdec:	f040 847f 	bne.w	800d6ee <__ieee754_pow+0x9d6>
 800cdf0:	f001 0101 	and.w	r1, r1, #1
 800cdf4:	f1c1 0302 	rsb	r3, r1, #2
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	4b5b      	ldr	r3, [pc, #364]	; (800cf68 <__ieee754_pow+0x250>)
 800cdfc:	4598      	cmp	r8, r3
 800cdfe:	d132      	bne.n	800ce66 <__ieee754_pow+0x14e>
 800ce00:	f1b9 0f00 	cmp.w	r9, #0
 800ce04:	f280 846f 	bge.w	800d6e6 <__ieee754_pow+0x9ce>
 800ce08:	4957      	ldr	r1, [pc, #348]	; (800cf68 <__ieee754_pow+0x250>)
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	462b      	mov	r3, r5
 800ce0e:	2000      	movs	r0, #0
 800ce10:	f7f7 fd14 	bl	800483c <__aeabi_ddiv>
 800ce14:	e79f      	b.n	800cd56 <__ieee754_pow+0x3e>
 800ce16:	2300      	movs	r3, #0
 800ce18:	9304      	str	r3, [sp, #16]
 800ce1a:	2a00      	cmp	r2, #0
 800ce1c:	d13d      	bne.n	800ce9a <__ieee754_pow+0x182>
 800ce1e:	4b50      	ldr	r3, [pc, #320]	; (800cf60 <__ieee754_pow+0x248>)
 800ce20:	4598      	cmp	r8, r3
 800ce22:	d1ea      	bne.n	800cdfa <__ieee754_pow+0xe2>
 800ce24:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 800ce28:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ce2c:	ea53 030a 	orrs.w	r3, r3, sl
 800ce30:	f000 8451 	beq.w	800d6d6 <__ieee754_pow+0x9be>
 800ce34:	4b4d      	ldr	r3, [pc, #308]	; (800cf6c <__ieee754_pow+0x254>)
 800ce36:	429e      	cmp	r6, r3
 800ce38:	dd08      	ble.n	800ce4c <__ieee754_pow+0x134>
 800ce3a:	f1b9 0f00 	cmp.w	r9, #0
 800ce3e:	f2c0 844e 	blt.w	800d6de <__ieee754_pow+0x9c6>
 800ce42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce46:	e786      	b.n	800cd56 <__ieee754_pow+0x3e>
 800ce48:	2302      	movs	r3, #2
 800ce4a:	e7e5      	b.n	800ce18 <__ieee754_pow+0x100>
 800ce4c:	f1b9 0f00 	cmp.w	r9, #0
 800ce50:	f04f 0000 	mov.w	r0, #0
 800ce54:	f04f 0100 	mov.w	r1, #0
 800ce58:	f6bf af7d 	bge.w	800cd56 <__ieee754_pow+0x3e>
 800ce5c:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ce60:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce64:	e777      	b.n	800cd56 <__ieee754_pow+0x3e>
 800ce66:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ce6a:	d106      	bne.n	800ce7a <__ieee754_pow+0x162>
 800ce6c:	4622      	mov	r2, r4
 800ce6e:	462b      	mov	r3, r5
 800ce70:	4620      	mov	r0, r4
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7f7 fbb8 	bl	80045e8 <__aeabi_dmul>
 800ce78:	e76d      	b.n	800cd56 <__ieee754_pow+0x3e>
 800ce7a:	4b3d      	ldr	r3, [pc, #244]	; (800cf70 <__ieee754_pow+0x258>)
 800ce7c:	4599      	cmp	r9, r3
 800ce7e:	d10c      	bne.n	800ce9a <__ieee754_pow+0x182>
 800ce80:	2f00      	cmp	r7, #0
 800ce82:	db0a      	blt.n	800ce9a <__ieee754_pow+0x182>
 800ce84:	4620      	mov	r0, r4
 800ce86:	4629      	mov	r1, r5
 800ce88:	b009      	add	sp, #36	; 0x24
 800ce8a:	ecbd 8b06 	vpop	{d8-d10}
 800ce8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce92:	f000 be65 	b.w	800db60 <__ieee754_sqrt>
 800ce96:	2300      	movs	r3, #0
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7ff fd8d 	bl	800c9bc <fabs>
 800cea2:	f1ba 0f00 	cmp.w	sl, #0
 800cea6:	d129      	bne.n	800cefc <__ieee754_pow+0x1e4>
 800cea8:	b126      	cbz	r6, 800ceb4 <__ieee754_pow+0x19c>
 800ceaa:	4b2f      	ldr	r3, [pc, #188]	; (800cf68 <__ieee754_pow+0x250>)
 800ceac:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d123      	bne.n	800cefc <__ieee754_pow+0x1e4>
 800ceb4:	f1b9 0f00 	cmp.w	r9, #0
 800ceb8:	da05      	bge.n	800cec6 <__ieee754_pow+0x1ae>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	2000      	movs	r0, #0
 800cec0:	4929      	ldr	r1, [pc, #164]	; (800cf68 <__ieee754_pow+0x250>)
 800cec2:	f7f7 fcbb 	bl	800483c <__aeabi_ddiv>
 800cec6:	2f00      	cmp	r7, #0
 800cec8:	f6bf af45 	bge.w	800cd56 <__ieee754_pow+0x3e>
 800cecc:	9b04      	ldr	r3, [sp, #16]
 800cece:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800ced2:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ced6:	4333      	orrs	r3, r6
 800ced8:	d108      	bne.n	800ceec <__ieee754_pow+0x1d4>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	4610      	mov	r0, r2
 800cee0:	4619      	mov	r1, r3
 800cee2:	f7f7 f9c9 	bl	8004278 <__aeabi_dsub>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	e791      	b.n	800ce10 <__ieee754_pow+0xf8>
 800ceec:	9b04      	ldr	r3, [sp, #16]
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	f47f af31 	bne.w	800cd56 <__ieee754_pow+0x3e>
 800cef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cef8:	4619      	mov	r1, r3
 800cefa:	e72c      	b.n	800cd56 <__ieee754_pow+0x3e>
 800cefc:	0ffb      	lsrs	r3, r7, #31
 800cefe:	3b01      	subs	r3, #1
 800cf00:	9306      	str	r3, [sp, #24]
 800cf02:	9a06      	ldr	r2, [sp, #24]
 800cf04:	9b04      	ldr	r3, [sp, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	d102      	bne.n	800cf10 <__ieee754_pow+0x1f8>
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	462b      	mov	r3, r5
 800cf0e:	e7e6      	b.n	800cede <__ieee754_pow+0x1c6>
 800cf10:	4b18      	ldr	r3, [pc, #96]	; (800cf74 <__ieee754_pow+0x25c>)
 800cf12:	4598      	cmp	r8, r3
 800cf14:	f340 80fc 	ble.w	800d110 <__ieee754_pow+0x3f8>
 800cf18:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800cf1c:	4598      	cmp	r8, r3
 800cf1e:	4b13      	ldr	r3, [pc, #76]	; (800cf6c <__ieee754_pow+0x254>)
 800cf20:	dd0c      	ble.n	800cf3c <__ieee754_pow+0x224>
 800cf22:	429e      	cmp	r6, r3
 800cf24:	dc0f      	bgt.n	800cf46 <__ieee754_pow+0x22e>
 800cf26:	f1b9 0f00 	cmp.w	r9, #0
 800cf2a:	da0f      	bge.n	800cf4c <__ieee754_pow+0x234>
 800cf2c:	2000      	movs	r0, #0
 800cf2e:	b009      	add	sp, #36	; 0x24
 800cf30:	ecbd 8b06 	vpop	{d8-d10}
 800cf34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	f001 bb9f 	b.w	800e67a <__math_oflow>
 800cf3c:	429e      	cmp	r6, r3
 800cf3e:	dbf2      	blt.n	800cf26 <__ieee754_pow+0x20e>
 800cf40:	4b09      	ldr	r3, [pc, #36]	; (800cf68 <__ieee754_pow+0x250>)
 800cf42:	429e      	cmp	r6, r3
 800cf44:	dd18      	ble.n	800cf78 <__ieee754_pow+0x260>
 800cf46:	f1b9 0f00 	cmp.w	r9, #0
 800cf4a:	dcef      	bgt.n	800cf2c <__ieee754_pow+0x214>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	b009      	add	sp, #36	; 0x24
 800cf50:	ecbd 8b06 	vpop	{d8-d10}
 800cf54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	f001 bb8a 	b.w	800e670 <__math_uflow>
 800cf5c:	fff00000 	.word	0xfff00000
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	433fffff 	.word	0x433fffff
 800cf68:	3ff00000 	.word	0x3ff00000
 800cf6c:	3fefffff 	.word	0x3fefffff
 800cf70:	3fe00000 	.word	0x3fe00000
 800cf74:	41e00000 	.word	0x41e00000
 800cf78:	4b61      	ldr	r3, [pc, #388]	; (800d100 <__ieee754_pow+0x3e8>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f7f7 f97c 	bl	8004278 <__aeabi_dsub>
 800cf80:	a355      	add	r3, pc, #340	; (adr r3, 800d0d8 <__ieee754_pow+0x3c0>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	4604      	mov	r4, r0
 800cf88:	460d      	mov	r5, r1
 800cf8a:	f7f7 fb2d 	bl	80045e8 <__aeabi_dmul>
 800cf8e:	a354      	add	r3, pc, #336	; (adr r3, 800d0e0 <__ieee754_pow+0x3c8>)
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	4606      	mov	r6, r0
 800cf96:	460f      	mov	r7, r1
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7f7 fb24 	bl	80045e8 <__aeabi_dmul>
 800cfa0:	4b58      	ldr	r3, [pc, #352]	; (800d104 <__ieee754_pow+0x3ec>)
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	468b      	mov	fp, r1
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	f7f7 fb1c 	bl	80045e8 <__aeabi_dmul>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	a14c      	add	r1, pc, #304	; (adr r1, 800d0e8 <__ieee754_pow+0x3d0>)
 800cfb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfba:	f7f7 f95d 	bl	8004278 <__aeabi_dsub>
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	f7f7 fb11 	bl	80045e8 <__aeabi_dmul>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	460b      	mov	r3, r1
 800cfca:	2000      	movs	r0, #0
 800cfcc:	494e      	ldr	r1, [pc, #312]	; (800d108 <__ieee754_pow+0x3f0>)
 800cfce:	f7f7 f953 	bl	8004278 <__aeabi_dsub>
 800cfd2:	4622      	mov	r2, r4
 800cfd4:	4680      	mov	r8, r0
 800cfd6:	4689      	mov	r9, r1
 800cfd8:	462b      	mov	r3, r5
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4629      	mov	r1, r5
 800cfde:	f7f7 fb03 	bl	80045e8 <__aeabi_dmul>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f7 fafd 	bl	80045e8 <__aeabi_dmul>
 800cfee:	a340      	add	r3, pc, #256	; (adr r3, 800d0f0 <__ieee754_pow+0x3d8>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f7 faf8 	bl	80045e8 <__aeabi_dmul>
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	4650      	mov	r0, sl
 800cffe:	4659      	mov	r1, fp
 800d000:	f7f7 f93a 	bl	8004278 <__aeabi_dsub>
 800d004:	4602      	mov	r2, r0
 800d006:	460b      	mov	r3, r1
 800d008:	4680      	mov	r8, r0
 800d00a:	4689      	mov	r9, r1
 800d00c:	4630      	mov	r0, r6
 800d00e:	4639      	mov	r1, r7
 800d010:	f7f7 f934 	bl	800427c <__adddf3>
 800d014:	2000      	movs	r0, #0
 800d016:	4632      	mov	r2, r6
 800d018:	463b      	mov	r3, r7
 800d01a:	4604      	mov	r4, r0
 800d01c:	460d      	mov	r5, r1
 800d01e:	f7f7 f92b 	bl	8004278 <__aeabi_dsub>
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	4640      	mov	r0, r8
 800d028:	4649      	mov	r1, r9
 800d02a:	f7f7 f925 	bl	8004278 <__aeabi_dsub>
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	9a06      	ldr	r2, [sp, #24]
 800d032:	3b01      	subs	r3, #1
 800d034:	4313      	orrs	r3, r2
 800d036:	4682      	mov	sl, r0
 800d038:	468b      	mov	fp, r1
 800d03a:	f040 81e9 	bne.w	800d410 <__ieee754_pow+0x6f8>
 800d03e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d0f8 <__ieee754_pow+0x3e0>
 800d042:	eeb0 8a47 	vmov.f32	s16, s14
 800d046:	eef0 8a67 	vmov.f32	s17, s15
 800d04a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d04e:	2600      	movs	r6, #0
 800d050:	4632      	mov	r2, r6
 800d052:	463b      	mov	r3, r7
 800d054:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d058:	f7f7 f90e 	bl	8004278 <__aeabi_dsub>
 800d05c:	4622      	mov	r2, r4
 800d05e:	462b      	mov	r3, r5
 800d060:	f7f7 fac2 	bl	80045e8 <__aeabi_dmul>
 800d064:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d068:	4680      	mov	r8, r0
 800d06a:	4689      	mov	r9, r1
 800d06c:	4650      	mov	r0, sl
 800d06e:	4659      	mov	r1, fp
 800d070:	f7f7 faba 	bl	80045e8 <__aeabi_dmul>
 800d074:	4602      	mov	r2, r0
 800d076:	460b      	mov	r3, r1
 800d078:	4640      	mov	r0, r8
 800d07a:	4649      	mov	r1, r9
 800d07c:	f7f7 f8fe 	bl	800427c <__adddf3>
 800d080:	4632      	mov	r2, r6
 800d082:	463b      	mov	r3, r7
 800d084:	4680      	mov	r8, r0
 800d086:	4689      	mov	r9, r1
 800d088:	4620      	mov	r0, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	f7f7 faac 	bl	80045e8 <__aeabi_dmul>
 800d090:	460b      	mov	r3, r1
 800d092:	4604      	mov	r4, r0
 800d094:	460d      	mov	r5, r1
 800d096:	4602      	mov	r2, r0
 800d098:	4649      	mov	r1, r9
 800d09a:	4640      	mov	r0, r8
 800d09c:	f7f7 f8ee 	bl	800427c <__adddf3>
 800d0a0:	4b1a      	ldr	r3, [pc, #104]	; (800d10c <__ieee754_pow+0x3f4>)
 800d0a2:	4299      	cmp	r1, r3
 800d0a4:	ec45 4b19 	vmov	d9, r4, r5
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	460f      	mov	r7, r1
 800d0ac:	468b      	mov	fp, r1
 800d0ae:	f340 82ed 	ble.w	800d68c <__ieee754_pow+0x974>
 800d0b2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d0b6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d0ba:	4303      	orrs	r3, r0
 800d0bc:	f000 81e6 	beq.w	800d48c <__ieee754_pow+0x774>
 800d0c0:	ec51 0b18 	vmov	r0, r1, d8
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f7f7 fd00 	bl	8004acc <__aeabi_dcmplt>
 800d0cc:	3800      	subs	r0, #0
 800d0ce:	bf18      	it	ne
 800d0d0:	2001      	movne	r0, #1
 800d0d2:	e72c      	b.n	800cf2e <__ieee754_pow+0x216>
 800d0d4:	f3af 8000 	nop.w
 800d0d8:	60000000 	.word	0x60000000
 800d0dc:	3ff71547 	.word	0x3ff71547
 800d0e0:	f85ddf44 	.word	0xf85ddf44
 800d0e4:	3e54ae0b 	.word	0x3e54ae0b
 800d0e8:	55555555 	.word	0x55555555
 800d0ec:	3fd55555 	.word	0x3fd55555
 800d0f0:	652b82fe 	.word	0x652b82fe
 800d0f4:	3ff71547 	.word	0x3ff71547
 800d0f8:	00000000 	.word	0x00000000
 800d0fc:	bff00000 	.word	0xbff00000
 800d100:	3ff00000 	.word	0x3ff00000
 800d104:	3fd00000 	.word	0x3fd00000
 800d108:	3fe00000 	.word	0x3fe00000
 800d10c:	408fffff 	.word	0x408fffff
 800d110:	4bd5      	ldr	r3, [pc, #852]	; (800d468 <__ieee754_pow+0x750>)
 800d112:	403b      	ands	r3, r7
 800d114:	2200      	movs	r2, #0
 800d116:	b92b      	cbnz	r3, 800d124 <__ieee754_pow+0x40c>
 800d118:	4bd4      	ldr	r3, [pc, #848]	; (800d46c <__ieee754_pow+0x754>)
 800d11a:	f7f7 fa65 	bl	80045e8 <__aeabi_dmul>
 800d11e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d122:	460e      	mov	r6, r1
 800d124:	1533      	asrs	r3, r6, #20
 800d126:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d12a:	4413      	add	r3, r2
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	4bd0      	ldr	r3, [pc, #832]	; (800d470 <__ieee754_pow+0x758>)
 800d130:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d134:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d138:	429e      	cmp	r6, r3
 800d13a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d13e:	dd08      	ble.n	800d152 <__ieee754_pow+0x43a>
 800d140:	4bcc      	ldr	r3, [pc, #816]	; (800d474 <__ieee754_pow+0x75c>)
 800d142:	429e      	cmp	r6, r3
 800d144:	f340 8162 	ble.w	800d40c <__ieee754_pow+0x6f4>
 800d148:	9b05      	ldr	r3, [sp, #20]
 800d14a:	3301      	adds	r3, #1
 800d14c:	9305      	str	r3, [sp, #20]
 800d14e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d152:	2400      	movs	r4, #0
 800d154:	00e3      	lsls	r3, r4, #3
 800d156:	9307      	str	r3, [sp, #28]
 800d158:	4bc7      	ldr	r3, [pc, #796]	; (800d478 <__ieee754_pow+0x760>)
 800d15a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d15e:	ed93 7b00 	vldr	d7, [r3]
 800d162:	4629      	mov	r1, r5
 800d164:	ec53 2b17 	vmov	r2, r3, d7
 800d168:	eeb0 9a47 	vmov.f32	s18, s14
 800d16c:	eef0 9a67 	vmov.f32	s19, s15
 800d170:	4682      	mov	sl, r0
 800d172:	f7f7 f881 	bl	8004278 <__aeabi_dsub>
 800d176:	4652      	mov	r2, sl
 800d178:	4606      	mov	r6, r0
 800d17a:	460f      	mov	r7, r1
 800d17c:	462b      	mov	r3, r5
 800d17e:	ec51 0b19 	vmov	r0, r1, d9
 800d182:	f7f7 f87b 	bl	800427c <__adddf3>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	2000      	movs	r0, #0
 800d18c:	49bb      	ldr	r1, [pc, #748]	; (800d47c <__ieee754_pow+0x764>)
 800d18e:	f7f7 fb55 	bl	800483c <__aeabi_ddiv>
 800d192:	ec41 0b1a 	vmov	d10, r0, r1
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4630      	mov	r0, r6
 800d19c:	4639      	mov	r1, r7
 800d19e:	f7f7 fa23 	bl	80045e8 <__aeabi_dmul>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1a8:	9302      	str	r3, [sp, #8]
 800d1aa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1ae:	46ab      	mov	fp, r5
 800d1b0:	106d      	asrs	r5, r5, #1
 800d1b2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d1b6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d1ba:	ec41 0b18 	vmov	d8, r0, r1
 800d1be:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	4649      	mov	r1, r9
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	461d      	mov	r5, r3
 800d1cc:	f7f7 fa0c 	bl	80045e8 <__aeabi_dmul>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	f7f7 f84e 	bl	8004278 <__aeabi_dsub>
 800d1dc:	ec53 2b19 	vmov	r2, r3, d9
 800d1e0:	4606      	mov	r6, r0
 800d1e2:	460f      	mov	r7, r1
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	f7f7 f846 	bl	8004278 <__aeabi_dsub>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4650      	mov	r0, sl
 800d1f2:	4659      	mov	r1, fp
 800d1f4:	f7f7 f840 	bl	8004278 <__aeabi_dsub>
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	464b      	mov	r3, r9
 800d1fc:	f7f7 f9f4 	bl	80045e8 <__aeabi_dmul>
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4630      	mov	r0, r6
 800d206:	4639      	mov	r1, r7
 800d208:	f7f7 f836 	bl	8004278 <__aeabi_dsub>
 800d20c:	ec53 2b1a 	vmov	r2, r3, d10
 800d210:	f7f7 f9ea 	bl	80045e8 <__aeabi_dmul>
 800d214:	ec53 2b18 	vmov	r2, r3, d8
 800d218:	ec41 0b19 	vmov	d9, r0, r1
 800d21c:	ec51 0b18 	vmov	r0, r1, d8
 800d220:	f7f7 f9e2 	bl	80045e8 <__aeabi_dmul>
 800d224:	a37c      	add	r3, pc, #496	; (adr r3, 800d418 <__ieee754_pow+0x700>)
 800d226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22a:	4604      	mov	r4, r0
 800d22c:	460d      	mov	r5, r1
 800d22e:	f7f7 f9db 	bl	80045e8 <__aeabi_dmul>
 800d232:	a37b      	add	r3, pc, #492	; (adr r3, 800d420 <__ieee754_pow+0x708>)
 800d234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d238:	f7f7 f820 	bl	800427c <__adddf3>
 800d23c:	4622      	mov	r2, r4
 800d23e:	462b      	mov	r3, r5
 800d240:	f7f7 f9d2 	bl	80045e8 <__aeabi_dmul>
 800d244:	a378      	add	r3, pc, #480	; (adr r3, 800d428 <__ieee754_pow+0x710>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f7f7 f817 	bl	800427c <__adddf3>
 800d24e:	4622      	mov	r2, r4
 800d250:	462b      	mov	r3, r5
 800d252:	f7f7 f9c9 	bl	80045e8 <__aeabi_dmul>
 800d256:	a376      	add	r3, pc, #472	; (adr r3, 800d430 <__ieee754_pow+0x718>)
 800d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25c:	f7f7 f80e 	bl	800427c <__adddf3>
 800d260:	4622      	mov	r2, r4
 800d262:	462b      	mov	r3, r5
 800d264:	f7f7 f9c0 	bl	80045e8 <__aeabi_dmul>
 800d268:	a373      	add	r3, pc, #460	; (adr r3, 800d438 <__ieee754_pow+0x720>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	f7f7 f805 	bl	800427c <__adddf3>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f7 f9b7 	bl	80045e8 <__aeabi_dmul>
 800d27a:	a371      	add	r3, pc, #452	; (adr r3, 800d440 <__ieee754_pow+0x728>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f7f6 fffc 	bl	800427c <__adddf3>
 800d284:	4622      	mov	r2, r4
 800d286:	4606      	mov	r6, r0
 800d288:	460f      	mov	r7, r1
 800d28a:	462b      	mov	r3, r5
 800d28c:	4620      	mov	r0, r4
 800d28e:	4629      	mov	r1, r5
 800d290:	f7f7 f9aa 	bl	80045e8 <__aeabi_dmul>
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	4630      	mov	r0, r6
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f7 f9a4 	bl	80045e8 <__aeabi_dmul>
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	460d      	mov	r5, r1
 800d2a6:	464b      	mov	r3, r9
 800d2a8:	ec51 0b18 	vmov	r0, r1, d8
 800d2ac:	f7f6 ffe6 	bl	800427c <__adddf3>
 800d2b0:	ec53 2b19 	vmov	r2, r3, d9
 800d2b4:	f7f7 f998 	bl	80045e8 <__aeabi_dmul>
 800d2b8:	4622      	mov	r2, r4
 800d2ba:	462b      	mov	r3, r5
 800d2bc:	f7f6 ffde 	bl	800427c <__adddf3>
 800d2c0:	4642      	mov	r2, r8
 800d2c2:	4682      	mov	sl, r0
 800d2c4:	468b      	mov	fp, r1
 800d2c6:	464b      	mov	r3, r9
 800d2c8:	4640      	mov	r0, r8
 800d2ca:	4649      	mov	r1, r9
 800d2cc:	f7f7 f98c 	bl	80045e8 <__aeabi_dmul>
 800d2d0:	4b6b      	ldr	r3, [pc, #428]	; (800d480 <__ieee754_pow+0x768>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	460f      	mov	r7, r1
 800d2d8:	f7f6 ffd0 	bl	800427c <__adddf3>
 800d2dc:	4652      	mov	r2, sl
 800d2de:	465b      	mov	r3, fp
 800d2e0:	f7f6 ffcc 	bl	800427c <__adddf3>
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	4640      	mov	r0, r8
 800d2f0:	4649      	mov	r1, r9
 800d2f2:	f7f7 f979 	bl	80045e8 <__aeabi_dmul>
 800d2f6:	4b62      	ldr	r3, [pc, #392]	; (800d480 <__ieee754_pow+0x768>)
 800d2f8:	4680      	mov	r8, r0
 800d2fa:	4689      	mov	r9, r1
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4620      	mov	r0, r4
 800d300:	4629      	mov	r1, r5
 800d302:	f7f6 ffb9 	bl	8004278 <__aeabi_dsub>
 800d306:	4632      	mov	r2, r6
 800d308:	463b      	mov	r3, r7
 800d30a:	f7f6 ffb5 	bl	8004278 <__aeabi_dsub>
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	4650      	mov	r0, sl
 800d314:	4659      	mov	r1, fp
 800d316:	f7f6 ffaf 	bl	8004278 <__aeabi_dsub>
 800d31a:	ec53 2b18 	vmov	r2, r3, d8
 800d31e:	f7f7 f963 	bl	80045e8 <__aeabi_dmul>
 800d322:	4622      	mov	r2, r4
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	462b      	mov	r3, r5
 800d32a:	ec51 0b19 	vmov	r0, r1, d9
 800d32e:	f7f7 f95b 	bl	80045e8 <__aeabi_dmul>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4630      	mov	r0, r6
 800d338:	4639      	mov	r1, r7
 800d33a:	f7f6 ff9f 	bl	800427c <__adddf3>
 800d33e:	4606      	mov	r6, r0
 800d340:	460f      	mov	r7, r1
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4640      	mov	r0, r8
 800d348:	4649      	mov	r1, r9
 800d34a:	f7f6 ff97 	bl	800427c <__adddf3>
 800d34e:	a33e      	add	r3, pc, #248	; (adr r3, 800d448 <__ieee754_pow+0x730>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	2000      	movs	r0, #0
 800d356:	4604      	mov	r4, r0
 800d358:	460d      	mov	r5, r1
 800d35a:	f7f7 f945 	bl	80045e8 <__aeabi_dmul>
 800d35e:	4642      	mov	r2, r8
 800d360:	ec41 0b18 	vmov	d8, r0, r1
 800d364:	464b      	mov	r3, r9
 800d366:	4620      	mov	r0, r4
 800d368:	4629      	mov	r1, r5
 800d36a:	f7f6 ff85 	bl	8004278 <__aeabi_dsub>
 800d36e:	4602      	mov	r2, r0
 800d370:	460b      	mov	r3, r1
 800d372:	4630      	mov	r0, r6
 800d374:	4639      	mov	r1, r7
 800d376:	f7f6 ff7f 	bl	8004278 <__aeabi_dsub>
 800d37a:	a335      	add	r3, pc, #212	; (adr r3, 800d450 <__ieee754_pow+0x738>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f7 f932 	bl	80045e8 <__aeabi_dmul>
 800d384:	a334      	add	r3, pc, #208	; (adr r3, 800d458 <__ieee754_pow+0x740>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	4606      	mov	r6, r0
 800d38c:	460f      	mov	r7, r1
 800d38e:	4620      	mov	r0, r4
 800d390:	4629      	mov	r1, r5
 800d392:	f7f7 f929 	bl	80045e8 <__aeabi_dmul>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f6 ff6d 	bl	800427c <__adddf3>
 800d3a2:	9a07      	ldr	r2, [sp, #28]
 800d3a4:	4b37      	ldr	r3, [pc, #220]	; (800d484 <__ieee754_pow+0x76c>)
 800d3a6:	4413      	add	r3, r2
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	f7f6 ff66 	bl	800427c <__adddf3>
 800d3b0:	4682      	mov	sl, r0
 800d3b2:	9805      	ldr	r0, [sp, #20]
 800d3b4:	468b      	mov	fp, r1
 800d3b6:	f7f7 f8ad 	bl	8004514 <__aeabi_i2d>
 800d3ba:	9a07      	ldr	r2, [sp, #28]
 800d3bc:	4b32      	ldr	r3, [pc, #200]	; (800d488 <__ieee754_pow+0x770>)
 800d3be:	4413      	add	r3, r2
 800d3c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	460f      	mov	r7, r1
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	465b      	mov	r3, fp
 800d3cc:	ec51 0b18 	vmov	r0, r1, d8
 800d3d0:	f7f6 ff54 	bl	800427c <__adddf3>
 800d3d4:	4642      	mov	r2, r8
 800d3d6:	464b      	mov	r3, r9
 800d3d8:	f7f6 ff50 	bl	800427c <__adddf3>
 800d3dc:	4632      	mov	r2, r6
 800d3de:	463b      	mov	r3, r7
 800d3e0:	f7f6 ff4c 	bl	800427c <__adddf3>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	4632      	mov	r2, r6
 800d3e8:	463b      	mov	r3, r7
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	460d      	mov	r5, r1
 800d3ee:	f7f6 ff43 	bl	8004278 <__aeabi_dsub>
 800d3f2:	4642      	mov	r2, r8
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	f7f6 ff3f 	bl	8004278 <__aeabi_dsub>
 800d3fa:	ec53 2b18 	vmov	r2, r3, d8
 800d3fe:	f7f6 ff3b 	bl	8004278 <__aeabi_dsub>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	4650      	mov	r0, sl
 800d408:	4659      	mov	r1, fp
 800d40a:	e60e      	b.n	800d02a <__ieee754_pow+0x312>
 800d40c:	2401      	movs	r4, #1
 800d40e:	e6a1      	b.n	800d154 <__ieee754_pow+0x43c>
 800d410:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d460 <__ieee754_pow+0x748>
 800d414:	e615      	b.n	800d042 <__ieee754_pow+0x32a>
 800d416:	bf00      	nop
 800d418:	4a454eef 	.word	0x4a454eef
 800d41c:	3fca7e28 	.word	0x3fca7e28
 800d420:	93c9db65 	.word	0x93c9db65
 800d424:	3fcd864a 	.word	0x3fcd864a
 800d428:	a91d4101 	.word	0xa91d4101
 800d42c:	3fd17460 	.word	0x3fd17460
 800d430:	518f264d 	.word	0x518f264d
 800d434:	3fd55555 	.word	0x3fd55555
 800d438:	db6fabff 	.word	0xdb6fabff
 800d43c:	3fdb6db6 	.word	0x3fdb6db6
 800d440:	33333303 	.word	0x33333303
 800d444:	3fe33333 	.word	0x3fe33333
 800d448:	e0000000 	.word	0xe0000000
 800d44c:	3feec709 	.word	0x3feec709
 800d450:	dc3a03fd 	.word	0xdc3a03fd
 800d454:	3feec709 	.word	0x3feec709
 800d458:	145b01f5 	.word	0x145b01f5
 800d45c:	be3e2fe0 	.word	0xbe3e2fe0
 800d460:	00000000 	.word	0x00000000
 800d464:	3ff00000 	.word	0x3ff00000
 800d468:	7ff00000 	.word	0x7ff00000
 800d46c:	43400000 	.word	0x43400000
 800d470:	0003988e 	.word	0x0003988e
 800d474:	000bb679 	.word	0x000bb679
 800d478:	0800f598 	.word	0x0800f598
 800d47c:	3ff00000 	.word	0x3ff00000
 800d480:	40080000 	.word	0x40080000
 800d484:	0800f5b8 	.word	0x0800f5b8
 800d488:	0800f5a8 	.word	0x0800f5a8
 800d48c:	a3b1      	add	r3, pc, #708	; (adr r3, 800d754 <__ieee754_pow+0xa3c>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	f7f6 fef1 	bl	800427c <__adddf3>
 800d49a:	4622      	mov	r2, r4
 800d49c:	ec41 0b1a 	vmov	d10, r0, r1
 800d4a0:	462b      	mov	r3, r5
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	4639      	mov	r1, r7
 800d4a6:	f7f6 fee7 	bl	8004278 <__aeabi_dsub>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	ec51 0b1a 	vmov	r0, r1, d10
 800d4b2:	f7f7 fb29 	bl	8004b08 <__aeabi_dcmpgt>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	f47f ae02 	bne.w	800d0c0 <__ieee754_pow+0x3a8>
 800d4bc:	4aa0      	ldr	r2, [pc, #640]	; (800d740 <__ieee754_pow+0xa28>)
 800d4be:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	f340 8102 	ble.w	800d6cc <__ieee754_pow+0x9b4>
 800d4c8:	151b      	asrs	r3, r3, #20
 800d4ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d4ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d4d2:	fa4a f303 	asr.w	r3, sl, r3
 800d4d6:	445b      	add	r3, fp
 800d4d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d4dc:	4e99      	ldr	r6, [pc, #612]	; (800d744 <__ieee754_pow+0xa2c>)
 800d4de:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d4e2:	4116      	asrs	r6, r2
 800d4e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	ea23 0106 	bic.w	r1, r3, r6
 800d4ee:	f1c2 0214 	rsb	r2, r2, #20
 800d4f2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d4f6:	fa4a fa02 	asr.w	sl, sl, r2
 800d4fa:	f1bb 0f00 	cmp.w	fp, #0
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	4620      	mov	r0, r4
 800d504:	4629      	mov	r1, r5
 800d506:	bfb8      	it	lt
 800d508:	f1ca 0a00 	rsblt	sl, sl, #0
 800d50c:	f7f6 feb4 	bl	8004278 <__aeabi_dsub>
 800d510:	ec41 0b19 	vmov	d9, r0, r1
 800d514:	4642      	mov	r2, r8
 800d516:	464b      	mov	r3, r9
 800d518:	ec51 0b19 	vmov	r0, r1, d9
 800d51c:	f7f6 feae 	bl	800427c <__adddf3>
 800d520:	a377      	add	r3, pc, #476	; (adr r3, 800d700 <__ieee754_pow+0x9e8>)
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	2000      	movs	r0, #0
 800d528:	4604      	mov	r4, r0
 800d52a:	460d      	mov	r5, r1
 800d52c:	f7f7 f85c 	bl	80045e8 <__aeabi_dmul>
 800d530:	ec53 2b19 	vmov	r2, r3, d9
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f6 fe9c 	bl	8004278 <__aeabi_dsub>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f6 fe96 	bl	8004278 <__aeabi_dsub>
 800d54c:	a36e      	add	r3, pc, #440	; (adr r3, 800d708 <__ieee754_pow+0x9f0>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f7 f849 	bl	80045e8 <__aeabi_dmul>
 800d556:	a36e      	add	r3, pc, #440	; (adr r3, 800d710 <__ieee754_pow+0x9f8>)
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	4680      	mov	r8, r0
 800d55e:	4689      	mov	r9, r1
 800d560:	4620      	mov	r0, r4
 800d562:	4629      	mov	r1, r5
 800d564:	f7f7 f840 	bl	80045e8 <__aeabi_dmul>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f6 fe84 	bl	800427c <__adddf3>
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f7f6 fe7c 	bl	800427c <__adddf3>
 800d584:	4632      	mov	r2, r6
 800d586:	463b      	mov	r3, r7
 800d588:	4680      	mov	r8, r0
 800d58a:	4689      	mov	r9, r1
 800d58c:	f7f6 fe74 	bl	8004278 <__aeabi_dsub>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	4620      	mov	r0, r4
 800d596:	4629      	mov	r1, r5
 800d598:	f7f6 fe6e 	bl	8004278 <__aeabi_dsub>
 800d59c:	4642      	mov	r2, r8
 800d59e:	4606      	mov	r6, r0
 800d5a0:	460f      	mov	r7, r1
 800d5a2:	464b      	mov	r3, r9
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f7 f81e 	bl	80045e8 <__aeabi_dmul>
 800d5ac:	a35a      	add	r3, pc, #360	; (adr r3, 800d718 <__ieee754_pow+0xa00>)
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	460d      	mov	r5, r1
 800d5b6:	f7f7 f817 	bl	80045e8 <__aeabi_dmul>
 800d5ba:	a359      	add	r3, pc, #356	; (adr r3, 800d720 <__ieee754_pow+0xa08>)
 800d5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c0:	f7f6 fe5a 	bl	8004278 <__aeabi_dsub>
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	462b      	mov	r3, r5
 800d5c8:	f7f7 f80e 	bl	80045e8 <__aeabi_dmul>
 800d5cc:	a356      	add	r3, pc, #344	; (adr r3, 800d728 <__ieee754_pow+0xa10>)
 800d5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d2:	f7f6 fe53 	bl	800427c <__adddf3>
 800d5d6:	4622      	mov	r2, r4
 800d5d8:	462b      	mov	r3, r5
 800d5da:	f7f7 f805 	bl	80045e8 <__aeabi_dmul>
 800d5de:	a354      	add	r3, pc, #336	; (adr r3, 800d730 <__ieee754_pow+0xa18>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f6 fe48 	bl	8004278 <__aeabi_dsub>
 800d5e8:	4622      	mov	r2, r4
 800d5ea:	462b      	mov	r3, r5
 800d5ec:	f7f6 fffc 	bl	80045e8 <__aeabi_dmul>
 800d5f0:	a351      	add	r3, pc, #324	; (adr r3, 800d738 <__ieee754_pow+0xa20>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f6 fe41 	bl	800427c <__adddf3>
 800d5fa:	4622      	mov	r2, r4
 800d5fc:	462b      	mov	r3, r5
 800d5fe:	f7f6 fff3 	bl	80045e8 <__aeabi_dmul>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4640      	mov	r0, r8
 800d608:	4649      	mov	r1, r9
 800d60a:	f7f6 fe35 	bl	8004278 <__aeabi_dsub>
 800d60e:	4604      	mov	r4, r0
 800d610:	460d      	mov	r5, r1
 800d612:	4602      	mov	r2, r0
 800d614:	460b      	mov	r3, r1
 800d616:	4640      	mov	r0, r8
 800d618:	4649      	mov	r1, r9
 800d61a:	f7f6 ffe5 	bl	80045e8 <__aeabi_dmul>
 800d61e:	2200      	movs	r2, #0
 800d620:	ec41 0b19 	vmov	d9, r0, r1
 800d624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d628:	4620      	mov	r0, r4
 800d62a:	4629      	mov	r1, r5
 800d62c:	f7f6 fe24 	bl	8004278 <__aeabi_dsub>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	ec51 0b19 	vmov	r0, r1, d9
 800d638:	f7f7 f900 	bl	800483c <__aeabi_ddiv>
 800d63c:	4632      	mov	r2, r6
 800d63e:	4604      	mov	r4, r0
 800d640:	460d      	mov	r5, r1
 800d642:	463b      	mov	r3, r7
 800d644:	4640      	mov	r0, r8
 800d646:	4649      	mov	r1, r9
 800d648:	f7f6 ffce 	bl	80045e8 <__aeabi_dmul>
 800d64c:	4632      	mov	r2, r6
 800d64e:	463b      	mov	r3, r7
 800d650:	f7f6 fe14 	bl	800427c <__adddf3>
 800d654:	4602      	mov	r2, r0
 800d656:	460b      	mov	r3, r1
 800d658:	4620      	mov	r0, r4
 800d65a:	4629      	mov	r1, r5
 800d65c:	f7f6 fe0c 	bl	8004278 <__aeabi_dsub>
 800d660:	4642      	mov	r2, r8
 800d662:	464b      	mov	r3, r9
 800d664:	f7f6 fe08 	bl	8004278 <__aeabi_dsub>
 800d668:	4602      	mov	r2, r0
 800d66a:	460b      	mov	r3, r1
 800d66c:	2000      	movs	r0, #0
 800d66e:	4936      	ldr	r1, [pc, #216]	; (800d748 <__ieee754_pow+0xa30>)
 800d670:	f7f6 fe02 	bl	8004278 <__aeabi_dsub>
 800d674:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d678:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d67c:	da29      	bge.n	800d6d2 <__ieee754_pow+0x9ba>
 800d67e:	4652      	mov	r2, sl
 800d680:	f001 f886 	bl	800e790 <scalbn>
 800d684:	ec53 2b18 	vmov	r2, r3, d8
 800d688:	f7ff bbf4 	b.w	800ce74 <__ieee754_pow+0x15c>
 800d68c:	4b2f      	ldr	r3, [pc, #188]	; (800d74c <__ieee754_pow+0xa34>)
 800d68e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d692:	429e      	cmp	r6, r3
 800d694:	f77f af12 	ble.w	800d4bc <__ieee754_pow+0x7a4>
 800d698:	4b2d      	ldr	r3, [pc, #180]	; (800d750 <__ieee754_pow+0xa38>)
 800d69a:	440b      	add	r3, r1
 800d69c:	4303      	orrs	r3, r0
 800d69e:	d009      	beq.n	800d6b4 <__ieee754_pow+0x99c>
 800d6a0:	ec51 0b18 	vmov	r0, r1, d8
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f7f7 fa10 	bl	8004acc <__aeabi_dcmplt>
 800d6ac:	3800      	subs	r0, #0
 800d6ae:	bf18      	it	ne
 800d6b0:	2001      	movne	r0, #1
 800d6b2:	e44c      	b.n	800cf4e <__ieee754_pow+0x236>
 800d6b4:	4622      	mov	r2, r4
 800d6b6:	462b      	mov	r3, r5
 800d6b8:	f7f6 fdde 	bl	8004278 <__aeabi_dsub>
 800d6bc:	4642      	mov	r2, r8
 800d6be:	464b      	mov	r3, r9
 800d6c0:	f7f7 fa18 	bl	8004af4 <__aeabi_dcmpge>
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	f43f aef9 	beq.w	800d4bc <__ieee754_pow+0x7a4>
 800d6ca:	e7e9      	b.n	800d6a0 <__ieee754_pow+0x988>
 800d6cc:	f04f 0a00 	mov.w	sl, #0
 800d6d0:	e720      	b.n	800d514 <__ieee754_pow+0x7fc>
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	e7d6      	b.n	800d684 <__ieee754_pow+0x96c>
 800d6d6:	491c      	ldr	r1, [pc, #112]	; (800d748 <__ieee754_pow+0xa30>)
 800d6d8:	2000      	movs	r0, #0
 800d6da:	f7ff bb3c 	b.w	800cd56 <__ieee754_pow+0x3e>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	f7ff bb38 	b.w	800cd56 <__ieee754_pow+0x3e>
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7ff bb34 	b.w	800cd56 <__ieee754_pow+0x3e>
 800d6ee:	9204      	str	r2, [sp, #16]
 800d6f0:	f7ff bb83 	b.w	800cdfa <__ieee754_pow+0xe2>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f7ff bb6d 	b.w	800cdd4 <__ieee754_pow+0xbc>
 800d6fa:	bf00      	nop
 800d6fc:	f3af 8000 	nop.w
 800d700:	00000000 	.word	0x00000000
 800d704:	3fe62e43 	.word	0x3fe62e43
 800d708:	fefa39ef 	.word	0xfefa39ef
 800d70c:	3fe62e42 	.word	0x3fe62e42
 800d710:	0ca86c39 	.word	0x0ca86c39
 800d714:	be205c61 	.word	0xbe205c61
 800d718:	72bea4d0 	.word	0x72bea4d0
 800d71c:	3e663769 	.word	0x3e663769
 800d720:	c5d26bf1 	.word	0xc5d26bf1
 800d724:	3ebbbd41 	.word	0x3ebbbd41
 800d728:	af25de2c 	.word	0xaf25de2c
 800d72c:	3f11566a 	.word	0x3f11566a
 800d730:	16bebd93 	.word	0x16bebd93
 800d734:	3f66c16c 	.word	0x3f66c16c
 800d738:	5555553e 	.word	0x5555553e
 800d73c:	3fc55555 	.word	0x3fc55555
 800d740:	3fe00000 	.word	0x3fe00000
 800d744:	000fffff 	.word	0x000fffff
 800d748:	3ff00000 	.word	0x3ff00000
 800d74c:	4090cbff 	.word	0x4090cbff
 800d750:	3f6f3400 	.word	0x3f6f3400
 800d754:	652b82fe 	.word	0x652b82fe
 800d758:	3c971547 	.word	0x3c971547
 800d75c:	00000000 	.word	0x00000000

0800d760 <__ieee754_rem_pio2>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	ed2d 8b02 	vpush	{d8}
 800d768:	4bc7      	ldr	r3, [pc, #796]	; (800da88 <__ieee754_rem_pio2+0x328>)
 800d76a:	b08b      	sub	sp, #44	; 0x2c
 800d76c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d770:	4598      	cmp	r8, r3
 800d772:	4604      	mov	r4, r0
 800d774:	460d      	mov	r5, r1
 800d776:	4692      	mov	sl, r2
 800d778:	9102      	str	r1, [sp, #8]
 800d77a:	dc08      	bgt.n	800d78e <__ieee754_rem_pio2+0x2e>
 800d77c:	e9c2 4500 	strd	r4, r5, [r2]
 800d780:	2300      	movs	r3, #0
 800d782:	2200      	movs	r2, #0
 800d784:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d788:	f04f 0b00 	mov.w	fp, #0
 800d78c:	e025      	b.n	800d7da <__ieee754_rem_pio2+0x7a>
 800d78e:	4bbf      	ldr	r3, [pc, #764]	; (800da8c <__ieee754_rem_pio2+0x32c>)
 800d790:	4598      	cmp	r8, r3
 800d792:	dc75      	bgt.n	800d880 <__ieee754_rem_pio2+0x120>
 800d794:	9b02      	ldr	r3, [sp, #8]
 800d796:	4ebe      	ldr	r6, [pc, #760]	; (800da90 <__ieee754_rem_pio2+0x330>)
 800d798:	2b00      	cmp	r3, #0
 800d79a:	a3ad      	add	r3, pc, #692	; (adr r3, 800da50 <__ieee754_rem_pio2+0x2f0>)
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	dd39      	ble.n	800d816 <__ieee754_rem_pio2+0xb6>
 800d7a2:	f7f6 fd69 	bl	8004278 <__aeabi_dsub>
 800d7a6:	45b0      	cmp	r8, r6
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	460d      	mov	r5, r1
 800d7ac:	d01b      	beq.n	800d7e6 <__ieee754_rem_pio2+0x86>
 800d7ae:	a3aa      	add	r3, pc, #680	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2f8>)
 800d7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b4:	f7f6 fd60 	bl	8004278 <__aeabi_dsub>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	e9ca 2300 	strd	r2, r3, [sl]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	4629      	mov	r1, r5
 800d7c4:	f7f6 fd58 	bl	8004278 <__aeabi_dsub>
 800d7c8:	a3a3      	add	r3, pc, #652	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2f8>)
 800d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ce:	f7f6 fd53 	bl	8004278 <__aeabi_dsub>
 800d7d2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d7d6:	f04f 0b01 	mov.w	fp, #1
 800d7da:	4658      	mov	r0, fp
 800d7dc:	b00b      	add	sp, #44	; 0x2c
 800d7de:	ecbd 8b02 	vpop	{d8}
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e6:	a39e      	add	r3, pc, #632	; (adr r3, 800da60 <__ieee754_rem_pio2+0x300>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f7f6 fd44 	bl	8004278 <__aeabi_dsub>
 800d7f0:	a39d      	add	r3, pc, #628	; (adr r3, 800da68 <__ieee754_rem_pio2+0x308>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	f7f6 fd3d 	bl	8004278 <__aeabi_dsub>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	e9ca 2300 	strd	r2, r3, [sl]
 800d806:	4620      	mov	r0, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	f7f6 fd35 	bl	8004278 <__aeabi_dsub>
 800d80e:	a396      	add	r3, pc, #600	; (adr r3, 800da68 <__ieee754_rem_pio2+0x308>)
 800d810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d814:	e7db      	b.n	800d7ce <__ieee754_rem_pio2+0x6e>
 800d816:	f7f6 fd31 	bl	800427c <__adddf3>
 800d81a:	45b0      	cmp	r8, r6
 800d81c:	4604      	mov	r4, r0
 800d81e:	460d      	mov	r5, r1
 800d820:	d016      	beq.n	800d850 <__ieee754_rem_pio2+0xf0>
 800d822:	a38d      	add	r3, pc, #564	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2f8>)
 800d824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d828:	f7f6 fd28 	bl	800427c <__adddf3>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	e9ca 2300 	strd	r2, r3, [sl]
 800d834:	4620      	mov	r0, r4
 800d836:	4629      	mov	r1, r5
 800d838:	f7f6 fd1e 	bl	8004278 <__aeabi_dsub>
 800d83c:	a386      	add	r3, pc, #536	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2f8>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	f7f6 fd1b 	bl	800427c <__adddf3>
 800d846:	f04f 3bff 	mov.w	fp, #4294967295
 800d84a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d84e:	e7c4      	b.n	800d7da <__ieee754_rem_pio2+0x7a>
 800d850:	a383      	add	r3, pc, #524	; (adr r3, 800da60 <__ieee754_rem_pio2+0x300>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f6 fd11 	bl	800427c <__adddf3>
 800d85a:	a383      	add	r3, pc, #524	; (adr r3, 800da68 <__ieee754_rem_pio2+0x308>)
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	4604      	mov	r4, r0
 800d862:	460d      	mov	r5, r1
 800d864:	f7f6 fd0a 	bl	800427c <__adddf3>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	e9ca 2300 	strd	r2, r3, [sl]
 800d870:	4620      	mov	r0, r4
 800d872:	4629      	mov	r1, r5
 800d874:	f7f6 fd00 	bl	8004278 <__aeabi_dsub>
 800d878:	a37b      	add	r3, pc, #492	; (adr r3, 800da68 <__ieee754_rem_pio2+0x308>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	e7e0      	b.n	800d842 <__ieee754_rem_pio2+0xe2>
 800d880:	4b84      	ldr	r3, [pc, #528]	; (800da94 <__ieee754_rem_pio2+0x334>)
 800d882:	4598      	cmp	r8, r3
 800d884:	f300 80d6 	bgt.w	800da34 <__ieee754_rem_pio2+0x2d4>
 800d888:	f7ff f898 	bl	800c9bc <fabs>
 800d88c:	a378      	add	r3, pc, #480	; (adr r3, 800da70 <__ieee754_rem_pio2+0x310>)
 800d88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d892:	4604      	mov	r4, r0
 800d894:	460d      	mov	r5, r1
 800d896:	f7f6 fea7 	bl	80045e8 <__aeabi_dmul>
 800d89a:	4b7f      	ldr	r3, [pc, #508]	; (800da98 <__ieee754_rem_pio2+0x338>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	f7f6 fced 	bl	800427c <__adddf3>
 800d8a2:	f7f7 f951 	bl	8004b48 <__aeabi_d2iz>
 800d8a6:	4683      	mov	fp, r0
 800d8a8:	f7f6 fe34 	bl	8004514 <__aeabi_i2d>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	ec43 2b18 	vmov	d8, r2, r3
 800d8b4:	a366      	add	r3, pc, #408	; (adr r3, 800da50 <__ieee754_rem_pio2+0x2f0>)
 800d8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ba:	f7f6 fe95 	bl	80045e8 <__aeabi_dmul>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	f7f6 fcd7 	bl	8004278 <__aeabi_dsub>
 800d8ca:	a363      	add	r3, pc, #396	; (adr r3, 800da58 <__ieee754_rem_pio2+0x2f8>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	460f      	mov	r7, r1
 800d8d4:	ec51 0b18 	vmov	r0, r1, d8
 800d8d8:	f7f6 fe86 	bl	80045e8 <__aeabi_dmul>
 800d8dc:	f1bb 0f1f 	cmp.w	fp, #31
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	460d      	mov	r5, r1
 800d8e4:	dc0d      	bgt.n	800d902 <__ieee754_rem_pio2+0x1a2>
 800d8e6:	4b6d      	ldr	r3, [pc, #436]	; (800da9c <__ieee754_rem_pio2+0x33c>)
 800d8e8:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f0:	4543      	cmp	r3, r8
 800d8f2:	d006      	beq.n	800d902 <__ieee754_rem_pio2+0x1a2>
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	4630      	mov	r0, r6
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	f7f6 fcbc 	bl	8004278 <__aeabi_dsub>
 800d900:	e00f      	b.n	800d922 <__ieee754_rem_pio2+0x1c2>
 800d902:	462b      	mov	r3, r5
 800d904:	4622      	mov	r2, r4
 800d906:	4630      	mov	r0, r6
 800d908:	4639      	mov	r1, r7
 800d90a:	f7f6 fcb5 	bl	8004278 <__aeabi_dsub>
 800d90e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d912:	9303      	str	r3, [sp, #12]
 800d914:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d918:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d91c:	f1b8 0f10 	cmp.w	r8, #16
 800d920:	dc02      	bgt.n	800d928 <__ieee754_rem_pio2+0x1c8>
 800d922:	e9ca 0100 	strd	r0, r1, [sl]
 800d926:	e039      	b.n	800d99c <__ieee754_rem_pio2+0x23c>
 800d928:	a34d      	add	r3, pc, #308	; (adr r3, 800da60 <__ieee754_rem_pio2+0x300>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	ec51 0b18 	vmov	r0, r1, d8
 800d932:	f7f6 fe59 	bl	80045e8 <__aeabi_dmul>
 800d936:	4604      	mov	r4, r0
 800d938:	460d      	mov	r5, r1
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4630      	mov	r0, r6
 800d940:	4639      	mov	r1, r7
 800d942:	f7f6 fc99 	bl	8004278 <__aeabi_dsub>
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4680      	mov	r8, r0
 800d94c:	4689      	mov	r9, r1
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f6 fc91 	bl	8004278 <__aeabi_dsub>
 800d956:	4622      	mov	r2, r4
 800d958:	462b      	mov	r3, r5
 800d95a:	f7f6 fc8d 	bl	8004278 <__aeabi_dsub>
 800d95e:	a342      	add	r3, pc, #264	; (adr r3, 800da68 <__ieee754_rem_pio2+0x308>)
 800d960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d964:	4604      	mov	r4, r0
 800d966:	460d      	mov	r5, r1
 800d968:	ec51 0b18 	vmov	r0, r1, d8
 800d96c:	f7f6 fe3c 	bl	80045e8 <__aeabi_dmul>
 800d970:	4622      	mov	r2, r4
 800d972:	462b      	mov	r3, r5
 800d974:	f7f6 fc80 	bl	8004278 <__aeabi_dsub>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	4604      	mov	r4, r0
 800d97e:	460d      	mov	r5, r1
 800d980:	4640      	mov	r0, r8
 800d982:	4649      	mov	r1, r9
 800d984:	f7f6 fc78 	bl	8004278 <__aeabi_dsub>
 800d988:	9a03      	ldr	r2, [sp, #12]
 800d98a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	2b31      	cmp	r3, #49	; 0x31
 800d992:	dc24      	bgt.n	800d9de <__ieee754_rem_pio2+0x27e>
 800d994:	e9ca 0100 	strd	r0, r1, [sl]
 800d998:	4646      	mov	r6, r8
 800d99a:	464f      	mov	r7, r9
 800d99c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4642      	mov	r2, r8
 800d9a4:	464b      	mov	r3, r9
 800d9a6:	4639      	mov	r1, r7
 800d9a8:	f7f6 fc66 	bl	8004278 <__aeabi_dsub>
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	f7f6 fc62 	bl	8004278 <__aeabi_dsub>
 800d9b4:	9b02      	ldr	r3, [sp, #8]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d9bc:	f6bf af0d 	bge.w	800d7da <__ieee754_rem_pio2+0x7a>
 800d9c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9c4:	f8ca 3004 	str.w	r3, [sl, #4]
 800d9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9cc:	f8ca 8000 	str.w	r8, [sl]
 800d9d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800d9d4:	f8ca 300c 	str.w	r3, [sl, #12]
 800d9d8:	f1cb 0b00 	rsb	fp, fp, #0
 800d9dc:	e6fd      	b.n	800d7da <__ieee754_rem_pio2+0x7a>
 800d9de:	a326      	add	r3, pc, #152	; (adr r3, 800da78 <__ieee754_rem_pio2+0x318>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	ec51 0b18 	vmov	r0, r1, d8
 800d9e8:	f7f6 fdfe 	bl	80045e8 <__aeabi_dmul>
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	460d      	mov	r5, r1
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4640      	mov	r0, r8
 800d9f6:	4649      	mov	r1, r9
 800d9f8:	f7f6 fc3e 	bl	8004278 <__aeabi_dsub>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4606      	mov	r6, r0
 800da02:	460f      	mov	r7, r1
 800da04:	4640      	mov	r0, r8
 800da06:	4649      	mov	r1, r9
 800da08:	f7f6 fc36 	bl	8004278 <__aeabi_dsub>
 800da0c:	4622      	mov	r2, r4
 800da0e:	462b      	mov	r3, r5
 800da10:	f7f6 fc32 	bl	8004278 <__aeabi_dsub>
 800da14:	a31a      	add	r3, pc, #104	; (adr r3, 800da80 <__ieee754_rem_pio2+0x320>)
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	4604      	mov	r4, r0
 800da1c:	460d      	mov	r5, r1
 800da1e:	ec51 0b18 	vmov	r0, r1, d8
 800da22:	f7f6 fde1 	bl	80045e8 <__aeabi_dmul>
 800da26:	4622      	mov	r2, r4
 800da28:	462b      	mov	r3, r5
 800da2a:	f7f6 fc25 	bl	8004278 <__aeabi_dsub>
 800da2e:	4604      	mov	r4, r0
 800da30:	460d      	mov	r5, r1
 800da32:	e75f      	b.n	800d8f4 <__ieee754_rem_pio2+0x194>
 800da34:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <__ieee754_rem_pio2+0x340>)
 800da36:	4598      	cmp	r8, r3
 800da38:	dd34      	ble.n	800daa4 <__ieee754_rem_pio2+0x344>
 800da3a:	4602      	mov	r2, r0
 800da3c:	460b      	mov	r3, r1
 800da3e:	f7f6 fc1b 	bl	8004278 <__aeabi_dsub>
 800da42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da46:	e9ca 0100 	strd	r0, r1, [sl]
 800da4a:	e69d      	b.n	800d788 <__ieee754_rem_pio2+0x28>
 800da4c:	f3af 8000 	nop.w
 800da50:	54400000 	.word	0x54400000
 800da54:	3ff921fb 	.word	0x3ff921fb
 800da58:	1a626331 	.word	0x1a626331
 800da5c:	3dd0b461 	.word	0x3dd0b461
 800da60:	1a600000 	.word	0x1a600000
 800da64:	3dd0b461 	.word	0x3dd0b461
 800da68:	2e037073 	.word	0x2e037073
 800da6c:	3ba3198a 	.word	0x3ba3198a
 800da70:	6dc9c883 	.word	0x6dc9c883
 800da74:	3fe45f30 	.word	0x3fe45f30
 800da78:	2e000000 	.word	0x2e000000
 800da7c:	3ba3198a 	.word	0x3ba3198a
 800da80:	252049c1 	.word	0x252049c1
 800da84:	397b839a 	.word	0x397b839a
 800da88:	3fe921fb 	.word	0x3fe921fb
 800da8c:	4002d97b 	.word	0x4002d97b
 800da90:	3ff921fb 	.word	0x3ff921fb
 800da94:	413921fb 	.word	0x413921fb
 800da98:	3fe00000 	.word	0x3fe00000
 800da9c:	0800f5c8 	.word	0x0800f5c8
 800daa0:	7fefffff 	.word	0x7fefffff
 800daa4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800daa8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800daac:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dab0:	460f      	mov	r7, r1
 800dab2:	4606      	mov	r6, r0
 800dab4:	f7f7 f848 	bl	8004b48 <__aeabi_d2iz>
 800dab8:	f7f6 fd2c 	bl	8004514 <__aeabi_i2d>
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4630      	mov	r0, r6
 800dac2:	4639      	mov	r1, r7
 800dac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dac8:	f7f6 fbd6 	bl	8004278 <__aeabi_dsub>
 800dacc:	4b22      	ldr	r3, [pc, #136]	; (800db58 <__ieee754_rem_pio2+0x3f8>)
 800dace:	2200      	movs	r2, #0
 800dad0:	f7f6 fd8a 	bl	80045e8 <__aeabi_dmul>
 800dad4:	460f      	mov	r7, r1
 800dad6:	4606      	mov	r6, r0
 800dad8:	f7f7 f836 	bl	8004b48 <__aeabi_d2iz>
 800dadc:	f7f6 fd1a 	bl	8004514 <__aeabi_i2d>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4630      	mov	r0, r6
 800dae6:	4639      	mov	r1, r7
 800dae8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daec:	f7f6 fbc4 	bl	8004278 <__aeabi_dsub>
 800daf0:	4b19      	ldr	r3, [pc, #100]	; (800db58 <__ieee754_rem_pio2+0x3f8>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	f7f6 fd78 	bl	80045e8 <__aeabi_dmul>
 800daf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dafc:	ad04      	add	r5, sp, #16
 800dafe:	f04f 0803 	mov.w	r8, #3
 800db02:	46a9      	mov	r9, r5
 800db04:	2600      	movs	r6, #0
 800db06:	2700      	movs	r7, #0
 800db08:	4632      	mov	r2, r6
 800db0a:	463b      	mov	r3, r7
 800db0c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800db10:	46c3      	mov	fp, r8
 800db12:	3d08      	subs	r5, #8
 800db14:	f108 38ff 	add.w	r8, r8, #4294967295
 800db18:	f7f6 ffce 	bl	8004ab8 <__aeabi_dcmpeq>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d1f3      	bne.n	800db08 <__ieee754_rem_pio2+0x3a8>
 800db20:	4b0e      	ldr	r3, [pc, #56]	; (800db5c <__ieee754_rem_pio2+0x3fc>)
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	2302      	movs	r3, #2
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	4622      	mov	r2, r4
 800db2a:	465b      	mov	r3, fp
 800db2c:	4651      	mov	r1, sl
 800db2e:	4648      	mov	r0, r9
 800db30:	f000 f986 	bl	800de40 <__kernel_rem_pio2>
 800db34:	9b02      	ldr	r3, [sp, #8]
 800db36:	2b00      	cmp	r3, #0
 800db38:	4683      	mov	fp, r0
 800db3a:	f6bf ae4e 	bge.w	800d7da <__ieee754_rem_pio2+0x7a>
 800db3e:	e9da 2100 	ldrd	r2, r1, [sl]
 800db42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db46:	e9ca 2300 	strd	r2, r3, [sl]
 800db4a:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800db4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db52:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800db56:	e73f      	b.n	800d9d8 <__ieee754_rem_pio2+0x278>
 800db58:	41700000 	.word	0x41700000
 800db5c:	0800f648 	.word	0x0800f648

0800db60 <__ieee754_sqrt>:
 800db60:	f8df c154 	ldr.w	ip, [pc, #340]	; 800dcb8 <__ieee754_sqrt+0x158>
 800db64:	ea3c 0c01 	bics.w	ip, ip, r1
 800db68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6c:	460a      	mov	r2, r1
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	460e      	mov	r6, r1
 800db74:	4607      	mov	r7, r0
 800db76:	4603      	mov	r3, r0
 800db78:	d10f      	bne.n	800db9a <__ieee754_sqrt+0x3a>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	f7f6 fd33 	bl	80045e8 <__aeabi_dmul>
 800db82:	4602      	mov	r2, r0
 800db84:	460b      	mov	r3, r1
 800db86:	4620      	mov	r0, r4
 800db88:	4629      	mov	r1, r5
 800db8a:	f7f6 fb77 	bl	800427c <__adddf3>
 800db8e:	4604      	mov	r4, r0
 800db90:	460d      	mov	r5, r1
 800db92:	4620      	mov	r0, r4
 800db94:	4629      	mov	r1, r5
 800db96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9a:	2900      	cmp	r1, #0
 800db9c:	dc0e      	bgt.n	800dbbc <__ieee754_sqrt+0x5c>
 800db9e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800dba2:	ea5c 0707 	orrs.w	r7, ip, r7
 800dba6:	d0f4      	beq.n	800db92 <__ieee754_sqrt+0x32>
 800dba8:	b141      	cbz	r1, 800dbbc <__ieee754_sqrt+0x5c>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	f7f6 fb63 	bl	8004278 <__aeabi_dsub>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	f7f6 fe41 	bl	800483c <__aeabi_ddiv>
 800dbba:	e7e8      	b.n	800db8e <__ieee754_sqrt+0x2e>
 800dbbc:	1531      	asrs	r1, r6, #20
 800dbbe:	d074      	beq.n	800dcaa <__ieee754_sqrt+0x14a>
 800dbc0:	07cc      	lsls	r4, r1, #31
 800dbc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dbc6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800dbca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800dbce:	bf5e      	ittt	pl
 800dbd0:	0fd9      	lsrpl	r1, r3, #31
 800dbd2:	005b      	lslpl	r3, r3, #1
 800dbd4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800dbd8:	2400      	movs	r4, #0
 800dbda:	0fd9      	lsrs	r1, r3, #31
 800dbdc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dbe0:	107f      	asrs	r7, r7, #1
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	2516      	movs	r5, #22
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbec:	1846      	adds	r6, r0, r1
 800dbee:	4296      	cmp	r6, r2
 800dbf0:	bfde      	ittt	le
 800dbf2:	1b92      	suble	r2, r2, r6
 800dbf4:	1870      	addle	r0, r6, r1
 800dbf6:	1864      	addle	r4, r4, r1
 800dbf8:	0052      	lsls	r2, r2, #1
 800dbfa:	3d01      	subs	r5, #1
 800dbfc:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800dc00:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc08:	d1f0      	bne.n	800dbec <__ieee754_sqrt+0x8c>
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f04f 0e20 	mov.w	lr, #32
 800dc10:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc14:	4282      	cmp	r2, r0
 800dc16:	eb06 0c05 	add.w	ip, r6, r5
 800dc1a:	dc02      	bgt.n	800dc22 <__ieee754_sqrt+0xc2>
 800dc1c:	d113      	bne.n	800dc46 <__ieee754_sqrt+0xe6>
 800dc1e:	459c      	cmp	ip, r3
 800dc20:	d811      	bhi.n	800dc46 <__ieee754_sqrt+0xe6>
 800dc22:	f1bc 0f00 	cmp.w	ip, #0
 800dc26:	eb0c 0506 	add.w	r5, ip, r6
 800dc2a:	da43      	bge.n	800dcb4 <__ieee754_sqrt+0x154>
 800dc2c:	2d00      	cmp	r5, #0
 800dc2e:	db41      	blt.n	800dcb4 <__ieee754_sqrt+0x154>
 800dc30:	f100 0801 	add.w	r8, r0, #1
 800dc34:	1a12      	subs	r2, r2, r0
 800dc36:	459c      	cmp	ip, r3
 800dc38:	bf88      	it	hi
 800dc3a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dc3e:	eba3 030c 	sub.w	r3, r3, ip
 800dc42:	4431      	add	r1, r6
 800dc44:	4640      	mov	r0, r8
 800dc46:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dc4a:	f1be 0e01 	subs.w	lr, lr, #1
 800dc4e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800dc52:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dc56:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc5a:	d1db      	bne.n	800dc14 <__ieee754_sqrt+0xb4>
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	d006      	beq.n	800dc6e <__ieee754_sqrt+0x10e>
 800dc60:	1c48      	adds	r0, r1, #1
 800dc62:	bf13      	iteet	ne
 800dc64:	3101      	addne	r1, #1
 800dc66:	3401      	addeq	r4, #1
 800dc68:	4671      	moveq	r1, lr
 800dc6a:	f021 0101 	bicne.w	r1, r1, #1
 800dc6e:	1063      	asrs	r3, r4, #1
 800dc70:	0849      	lsrs	r1, r1, #1
 800dc72:	07e2      	lsls	r2, r4, #31
 800dc74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dc78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dc7c:	bf48      	it	mi
 800dc7e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800dc82:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dc86:	460c      	mov	r4, r1
 800dc88:	e783      	b.n	800db92 <__ieee754_sqrt+0x32>
 800dc8a:	0ada      	lsrs	r2, r3, #11
 800dc8c:	3815      	subs	r0, #21
 800dc8e:	055b      	lsls	r3, r3, #21
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	d0fa      	beq.n	800dc8a <__ieee754_sqrt+0x12a>
 800dc94:	02d5      	lsls	r5, r2, #11
 800dc96:	d50a      	bpl.n	800dcae <__ieee754_sqrt+0x14e>
 800dc98:	f1c1 0420 	rsb	r4, r1, #32
 800dc9c:	fa23 f404 	lsr.w	r4, r3, r4
 800dca0:	1e4d      	subs	r5, r1, #1
 800dca2:	408b      	lsls	r3, r1
 800dca4:	4322      	orrs	r2, r4
 800dca6:	1b41      	subs	r1, r0, r5
 800dca8:	e78a      	b.n	800dbc0 <__ieee754_sqrt+0x60>
 800dcaa:	4608      	mov	r0, r1
 800dcac:	e7f0      	b.n	800dc90 <__ieee754_sqrt+0x130>
 800dcae:	0052      	lsls	r2, r2, #1
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	e7ef      	b.n	800dc94 <__ieee754_sqrt+0x134>
 800dcb4:	4680      	mov	r8, r0
 800dcb6:	e7bd      	b.n	800dc34 <__ieee754_sqrt+0xd4>
 800dcb8:	7ff00000 	.word	0x7ff00000
 800dcbc:	00000000 	.word	0x00000000

0800dcc0 <__kernel_cos>:
 800dcc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dcc8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800dccc:	ed2d 8b02 	vpush	{d8}
 800dcd0:	4680      	mov	r8, r0
 800dcd2:	ec43 2b18 	vmov	d8, r2, r3
 800dcd6:	4689      	mov	r9, r1
 800dcd8:	da04      	bge.n	800dce4 <__kernel_cos+0x24>
 800dcda:	f7f6 ff35 	bl	8004b48 <__aeabi_d2iz>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	f000 8087 	beq.w	800ddf2 <__kernel_cos+0x132>
 800dce4:	4642      	mov	r2, r8
 800dce6:	464b      	mov	r3, r9
 800dce8:	4640      	mov	r0, r8
 800dcea:	4649      	mov	r1, r9
 800dcec:	f7f6 fc7c 	bl	80045e8 <__aeabi_dmul>
 800dcf0:	4b4d      	ldr	r3, [pc, #308]	; (800de28 <__kernel_cos+0x168>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	f7f6 fc76 	bl	80045e8 <__aeabi_dmul>
 800dcfc:	a33e      	add	r3, pc, #248	; (adr r3, 800ddf8 <__kernel_cos+0x138>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	4682      	mov	sl, r0
 800dd04:	468b      	mov	fp, r1
 800dd06:	4620      	mov	r0, r4
 800dd08:	4629      	mov	r1, r5
 800dd0a:	f7f6 fc6d 	bl	80045e8 <__aeabi_dmul>
 800dd0e:	a33c      	add	r3, pc, #240	; (adr r3, 800de00 <__kernel_cos+0x140>)
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f6 fab2 	bl	800427c <__adddf3>
 800dd18:	4622      	mov	r2, r4
 800dd1a:	462b      	mov	r3, r5
 800dd1c:	f7f6 fc64 	bl	80045e8 <__aeabi_dmul>
 800dd20:	a339      	add	r3, pc, #228	; (adr r3, 800de08 <__kernel_cos+0x148>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f6 faa7 	bl	8004278 <__aeabi_dsub>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	f7f6 fc5b 	bl	80045e8 <__aeabi_dmul>
 800dd32:	a337      	add	r3, pc, #220	; (adr r3, 800de10 <__kernel_cos+0x150>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f6 faa0 	bl	800427c <__adddf3>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f6 fc52 	bl	80045e8 <__aeabi_dmul>
 800dd44:	a334      	add	r3, pc, #208	; (adr r3, 800de18 <__kernel_cos+0x158>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f6 fa95 	bl	8004278 <__aeabi_dsub>
 800dd4e:	4622      	mov	r2, r4
 800dd50:	462b      	mov	r3, r5
 800dd52:	f7f6 fc49 	bl	80045e8 <__aeabi_dmul>
 800dd56:	a332      	add	r3, pc, #200	; (adr r3, 800de20 <__kernel_cos+0x160>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f6 fa8e 	bl	800427c <__adddf3>
 800dd60:	4622      	mov	r2, r4
 800dd62:	462b      	mov	r3, r5
 800dd64:	f7f6 fc40 	bl	80045e8 <__aeabi_dmul>
 800dd68:	4622      	mov	r2, r4
 800dd6a:	462b      	mov	r3, r5
 800dd6c:	f7f6 fc3c 	bl	80045e8 <__aeabi_dmul>
 800dd70:	ec53 2b18 	vmov	r2, r3, d8
 800dd74:	4604      	mov	r4, r0
 800dd76:	460d      	mov	r5, r1
 800dd78:	4640      	mov	r0, r8
 800dd7a:	4649      	mov	r1, r9
 800dd7c:	f7f6 fc34 	bl	80045e8 <__aeabi_dmul>
 800dd80:	460b      	mov	r3, r1
 800dd82:	4602      	mov	r2, r0
 800dd84:	4629      	mov	r1, r5
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7f6 fa76 	bl	8004278 <__aeabi_dsub>
 800dd8c:	4b27      	ldr	r3, [pc, #156]	; (800de2c <__kernel_cos+0x16c>)
 800dd8e:	429e      	cmp	r6, r3
 800dd90:	4680      	mov	r8, r0
 800dd92:	4689      	mov	r9, r1
 800dd94:	dc0f      	bgt.n	800ddb6 <__kernel_cos+0xf6>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	4659      	mov	r1, fp
 800dd9e:	f7f6 fa6b 	bl	8004278 <__aeabi_dsub>
 800dda2:	460b      	mov	r3, r1
 800dda4:	4922      	ldr	r1, [pc, #136]	; (800de30 <__kernel_cos+0x170>)
 800dda6:	4602      	mov	r2, r0
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f7f6 fa65 	bl	8004278 <__aeabi_dsub>
 800ddae:	ecbd 8b02 	vpop	{d8}
 800ddb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	4b1f      	ldr	r3, [pc, #124]	; (800de34 <__kernel_cos+0x174>)
 800ddb8:	491d      	ldr	r1, [pc, #116]	; (800de30 <__kernel_cos+0x170>)
 800ddba:	429e      	cmp	r6, r3
 800ddbc:	bfcc      	ite	gt
 800ddbe:	4d1e      	ldrgt	r5, [pc, #120]	; (800de38 <__kernel_cos+0x178>)
 800ddc0:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ddc4:	2400      	movs	r4, #0
 800ddc6:	4622      	mov	r2, r4
 800ddc8:	462b      	mov	r3, r5
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f7f6 fa54 	bl	8004278 <__aeabi_dsub>
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	462b      	mov	r3, r5
 800ddd8:	4650      	mov	r0, sl
 800ddda:	4659      	mov	r1, fp
 800dddc:	f7f6 fa4c 	bl	8004278 <__aeabi_dsub>
 800dde0:	4642      	mov	r2, r8
 800dde2:	464b      	mov	r3, r9
 800dde4:	f7f6 fa48 	bl	8004278 <__aeabi_dsub>
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4630      	mov	r0, r6
 800ddee:	4639      	mov	r1, r7
 800ddf0:	e7db      	b.n	800ddaa <__kernel_cos+0xea>
 800ddf2:	490f      	ldr	r1, [pc, #60]	; (800de30 <__kernel_cos+0x170>)
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e7da      	b.n	800ddae <__kernel_cos+0xee>
 800ddf8:	be8838d4 	.word	0xbe8838d4
 800ddfc:	bda8fae9 	.word	0xbda8fae9
 800de00:	bdb4b1c4 	.word	0xbdb4b1c4
 800de04:	3e21ee9e 	.word	0x3e21ee9e
 800de08:	809c52ad 	.word	0x809c52ad
 800de0c:	3e927e4f 	.word	0x3e927e4f
 800de10:	19cb1590 	.word	0x19cb1590
 800de14:	3efa01a0 	.word	0x3efa01a0
 800de18:	16c15177 	.word	0x16c15177
 800de1c:	3f56c16c 	.word	0x3f56c16c
 800de20:	5555554c 	.word	0x5555554c
 800de24:	3fa55555 	.word	0x3fa55555
 800de28:	3fe00000 	.word	0x3fe00000
 800de2c:	3fd33332 	.word	0x3fd33332
 800de30:	3ff00000 	.word	0x3ff00000
 800de34:	3fe90000 	.word	0x3fe90000
 800de38:	3fd20000 	.word	0x3fd20000
 800de3c:	00000000 	.word	0x00000000

0800de40 <__kernel_rem_pio2>:
 800de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	ed2d 8b02 	vpush	{d8}
 800de48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800de4c:	f112 0f14 	cmn.w	r2, #20
 800de50:	9308      	str	r3, [sp, #32]
 800de52:	9101      	str	r1, [sp, #4]
 800de54:	4bc4      	ldr	r3, [pc, #784]	; (800e168 <__kernel_rem_pio2+0x328>)
 800de56:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800de58:	900b      	str	r0, [sp, #44]	; 0x2c
 800de5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de5e:	9302      	str	r3, [sp, #8]
 800de60:	9b08      	ldr	r3, [sp, #32]
 800de62:	f103 33ff 	add.w	r3, r3, #4294967295
 800de66:	bfa8      	it	ge
 800de68:	1ed4      	subge	r4, r2, #3
 800de6a:	9306      	str	r3, [sp, #24]
 800de6c:	bfb2      	itee	lt
 800de6e:	2400      	movlt	r4, #0
 800de70:	2318      	movge	r3, #24
 800de72:	fb94 f4f3 	sdivge	r4, r4, r3
 800de76:	f06f 0317 	mvn.w	r3, #23
 800de7a:	fb04 3303 	mla	r3, r4, r3, r3
 800de7e:	eb03 0a02 	add.w	sl, r3, r2
 800de82:	9b02      	ldr	r3, [sp, #8]
 800de84:	9a06      	ldr	r2, [sp, #24]
 800de86:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e160 <__kernel_rem_pio2+0x320>
 800de8a:	eb03 0802 	add.w	r8, r3, r2
 800de8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800de90:	1aa7      	subs	r7, r4, r2
 800de92:	ae22      	add	r6, sp, #136	; 0x88
 800de94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800de98:	2500      	movs	r5, #0
 800de9a:	4545      	cmp	r5, r8
 800de9c:	dd13      	ble.n	800dec6 <__kernel_rem_pio2+0x86>
 800de9e:	9b08      	ldr	r3, [sp, #32]
 800dea0:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800e160 <__kernel_rem_pio2+0x320>
 800dea4:	aa22      	add	r2, sp, #136	; 0x88
 800dea6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800deaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800deae:	f04f 0800 	mov.w	r8, #0
 800deb2:	9b02      	ldr	r3, [sp, #8]
 800deb4:	4598      	cmp	r8, r3
 800deb6:	dc2f      	bgt.n	800df18 <__kernel_rem_pio2+0xd8>
 800deb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800debc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800dec0:	462f      	mov	r7, r5
 800dec2:	2600      	movs	r6, #0
 800dec4:	e01b      	b.n	800defe <__kernel_rem_pio2+0xbe>
 800dec6:	42ef      	cmn	r7, r5
 800dec8:	d407      	bmi.n	800deda <__kernel_rem_pio2+0x9a>
 800deca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dece:	f7f6 fb21 	bl	8004514 <__aeabi_i2d>
 800ded2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ded6:	3501      	adds	r5, #1
 800ded8:	e7df      	b.n	800de9a <__kernel_rem_pio2+0x5a>
 800deda:	ec51 0b18 	vmov	r0, r1, d8
 800dede:	e7f8      	b.n	800ded2 <__kernel_rem_pio2+0x92>
 800dee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dee4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dee8:	f7f6 fb7e 	bl	80045e8 <__aeabi_dmul>
 800deec:	4602      	mov	r2, r0
 800deee:	460b      	mov	r3, r1
 800def0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800def4:	f7f6 f9c2 	bl	800427c <__adddf3>
 800def8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800defc:	3601      	adds	r6, #1
 800defe:	9b06      	ldr	r3, [sp, #24]
 800df00:	429e      	cmp	r6, r3
 800df02:	f1a7 0708 	sub.w	r7, r7, #8
 800df06:	ddeb      	ble.n	800dee0 <__kernel_rem_pio2+0xa0>
 800df08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800df0c:	f108 0801 	add.w	r8, r8, #1
 800df10:	ecab 7b02 	vstmia	fp!, {d7}
 800df14:	3508      	adds	r5, #8
 800df16:	e7cc      	b.n	800deb2 <__kernel_rem_pio2+0x72>
 800df18:	9b02      	ldr	r3, [sp, #8]
 800df1a:	aa0e      	add	r2, sp, #56	; 0x38
 800df1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df20:	930d      	str	r3, [sp, #52]	; 0x34
 800df22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800df24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800df28:	9c02      	ldr	r4, [sp, #8]
 800df2a:	930c      	str	r3, [sp, #48]	; 0x30
 800df2c:	00e3      	lsls	r3, r4, #3
 800df2e:	930a      	str	r3, [sp, #40]	; 0x28
 800df30:	ab9a      	add	r3, sp, #616	; 0x268
 800df32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800df3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800df3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800df40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800df44:	46c3      	mov	fp, r8
 800df46:	46a1      	mov	r9, r4
 800df48:	f1b9 0f00 	cmp.w	r9, #0
 800df4c:	f1a5 0508 	sub.w	r5, r5, #8
 800df50:	dc70      	bgt.n	800e034 <__kernel_rem_pio2+0x1f4>
 800df52:	4652      	mov	r2, sl
 800df54:	4630      	mov	r0, r6
 800df56:	4639      	mov	r1, r7
 800df58:	f000 fc1a 	bl	800e790 <scalbn>
 800df5c:	2200      	movs	r2, #0
 800df5e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800df62:	4606      	mov	r6, r0
 800df64:	460f      	mov	r7, r1
 800df66:	f7f6 fb3f 	bl	80045e8 <__aeabi_dmul>
 800df6a:	f000 fb91 	bl	800e690 <floor>
 800df6e:	4b7f      	ldr	r3, [pc, #508]	; (800e16c <__kernel_rem_pio2+0x32c>)
 800df70:	2200      	movs	r2, #0
 800df72:	f7f6 fb39 	bl	80045e8 <__aeabi_dmul>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4630      	mov	r0, r6
 800df7c:	4639      	mov	r1, r7
 800df7e:	f7f6 f97b 	bl	8004278 <__aeabi_dsub>
 800df82:	460f      	mov	r7, r1
 800df84:	4606      	mov	r6, r0
 800df86:	f7f6 fddf 	bl	8004b48 <__aeabi_d2iz>
 800df8a:	9004      	str	r0, [sp, #16]
 800df8c:	f7f6 fac2 	bl	8004514 <__aeabi_i2d>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4630      	mov	r0, r6
 800df96:	4639      	mov	r1, r7
 800df98:	f7f6 f96e 	bl	8004278 <__aeabi_dsub>
 800df9c:	f1ba 0f00 	cmp.w	sl, #0
 800dfa0:	4606      	mov	r6, r0
 800dfa2:	460f      	mov	r7, r1
 800dfa4:	dd6d      	ble.n	800e082 <__kernel_rem_pio2+0x242>
 800dfa6:	1e62      	subs	r2, r4, #1
 800dfa8:	ab0e      	add	r3, sp, #56	; 0x38
 800dfaa:	9d04      	ldr	r5, [sp, #16]
 800dfac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dfb0:	f1ca 0118 	rsb	r1, sl, #24
 800dfb4:	fa40 f301 	asr.w	r3, r0, r1
 800dfb8:	441d      	add	r5, r3
 800dfba:	408b      	lsls	r3, r1
 800dfbc:	1ac0      	subs	r0, r0, r3
 800dfbe:	ab0e      	add	r3, sp, #56	; 0x38
 800dfc0:	9504      	str	r5, [sp, #16]
 800dfc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dfc6:	f1ca 0317 	rsb	r3, sl, #23
 800dfca:	fa40 fb03 	asr.w	fp, r0, r3
 800dfce:	f1bb 0f00 	cmp.w	fp, #0
 800dfd2:	dd65      	ble.n	800e0a0 <__kernel_rem_pio2+0x260>
 800dfd4:	9b04      	ldr	r3, [sp, #16]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9304      	str	r3, [sp, #16]
 800dfdc:	4615      	mov	r5, r2
 800dfde:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dfe2:	4294      	cmp	r4, r2
 800dfe4:	f300 809c 	bgt.w	800e120 <__kernel_rem_pio2+0x2e0>
 800dfe8:	f1ba 0f00 	cmp.w	sl, #0
 800dfec:	dd07      	ble.n	800dffe <__kernel_rem_pio2+0x1be>
 800dfee:	f1ba 0f01 	cmp.w	sl, #1
 800dff2:	f000 80a8 	beq.w	800e146 <__kernel_rem_pio2+0x306>
 800dff6:	f1ba 0f02 	cmp.w	sl, #2
 800dffa:	f000 80c3 	beq.w	800e184 <__kernel_rem_pio2+0x344>
 800dffe:	f1bb 0f02 	cmp.w	fp, #2
 800e002:	d14d      	bne.n	800e0a0 <__kernel_rem_pio2+0x260>
 800e004:	4632      	mov	r2, r6
 800e006:	463b      	mov	r3, r7
 800e008:	4959      	ldr	r1, [pc, #356]	; (800e170 <__kernel_rem_pio2+0x330>)
 800e00a:	2000      	movs	r0, #0
 800e00c:	f7f6 f934 	bl	8004278 <__aeabi_dsub>
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	2d00      	cmp	r5, #0
 800e016:	d043      	beq.n	800e0a0 <__kernel_rem_pio2+0x260>
 800e018:	4652      	mov	r2, sl
 800e01a:	4955      	ldr	r1, [pc, #340]	; (800e170 <__kernel_rem_pio2+0x330>)
 800e01c:	2000      	movs	r0, #0
 800e01e:	f000 fbb7 	bl	800e790 <scalbn>
 800e022:	4602      	mov	r2, r0
 800e024:	460b      	mov	r3, r1
 800e026:	4630      	mov	r0, r6
 800e028:	4639      	mov	r1, r7
 800e02a:	f7f6 f925 	bl	8004278 <__aeabi_dsub>
 800e02e:	4606      	mov	r6, r0
 800e030:	460f      	mov	r7, r1
 800e032:	e035      	b.n	800e0a0 <__kernel_rem_pio2+0x260>
 800e034:	4b4f      	ldr	r3, [pc, #316]	; (800e174 <__kernel_rem_pio2+0x334>)
 800e036:	2200      	movs	r2, #0
 800e038:	4630      	mov	r0, r6
 800e03a:	4639      	mov	r1, r7
 800e03c:	f7f6 fad4 	bl	80045e8 <__aeabi_dmul>
 800e040:	f7f6 fd82 	bl	8004b48 <__aeabi_d2iz>
 800e044:	f7f6 fa66 	bl	8004514 <__aeabi_i2d>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	ec43 2b18 	vmov	d8, r2, r3
 800e050:	4b49      	ldr	r3, [pc, #292]	; (800e178 <__kernel_rem_pio2+0x338>)
 800e052:	2200      	movs	r2, #0
 800e054:	f7f6 fac8 	bl	80045e8 <__aeabi_dmul>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4630      	mov	r0, r6
 800e05e:	4639      	mov	r1, r7
 800e060:	f7f6 f90a 	bl	8004278 <__aeabi_dsub>
 800e064:	f7f6 fd70 	bl	8004b48 <__aeabi_d2iz>
 800e068:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e06c:	f84b 0b04 	str.w	r0, [fp], #4
 800e070:	ec51 0b18 	vmov	r0, r1, d8
 800e074:	f7f6 f902 	bl	800427c <__adddf3>
 800e078:	f109 39ff 	add.w	r9, r9, #4294967295
 800e07c:	4606      	mov	r6, r0
 800e07e:	460f      	mov	r7, r1
 800e080:	e762      	b.n	800df48 <__kernel_rem_pio2+0x108>
 800e082:	d106      	bne.n	800e092 <__kernel_rem_pio2+0x252>
 800e084:	1e63      	subs	r3, r4, #1
 800e086:	aa0e      	add	r2, sp, #56	; 0x38
 800e088:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e08c:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e090:	e79d      	b.n	800dfce <__kernel_rem_pio2+0x18e>
 800e092:	4b3a      	ldr	r3, [pc, #232]	; (800e17c <__kernel_rem_pio2+0x33c>)
 800e094:	2200      	movs	r2, #0
 800e096:	f7f6 fd2d 	bl	8004af4 <__aeabi_dcmpge>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	d13d      	bne.n	800e11a <__kernel_rem_pio2+0x2da>
 800e09e:	4683      	mov	fp, r0
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	4639      	mov	r1, r7
 800e0a8:	f7f6 fd06 	bl	8004ab8 <__aeabi_dcmpeq>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	f000 80bd 	beq.w	800e22c <__kernel_rem_pio2+0x3ec>
 800e0b2:	1e65      	subs	r5, r4, #1
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	9902      	ldr	r1, [sp, #8]
 800e0ba:	428b      	cmp	r3, r1
 800e0bc:	da69      	bge.n	800e192 <__kernel_rem_pio2+0x352>
 800e0be:	2a00      	cmp	r2, #0
 800e0c0:	f000 8086 	beq.w	800e1d0 <__kernel_rem_pio2+0x390>
 800e0c4:	ab0e      	add	r3, sp, #56	; 0x38
 800e0c6:	f1aa 0a18 	sub.w	sl, sl, #24
 800e0ca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 80aa 	beq.w	800e228 <__kernel_rem_pio2+0x3e8>
 800e0d4:	4652      	mov	r2, sl
 800e0d6:	4926      	ldr	r1, [pc, #152]	; (800e170 <__kernel_rem_pio2+0x330>)
 800e0d8:	2000      	movs	r0, #0
 800e0da:	f000 fb59 	bl	800e790 <scalbn>
 800e0de:	ab9a      	add	r3, sp, #616	; 0x268
 800e0e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	460f      	mov	r7, r1
 800e0e8:	00ec      	lsls	r4, r5, #3
 800e0ea:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e0ee:	46aa      	mov	sl, r5
 800e0f0:	f1ba 0f00 	cmp.w	sl, #0
 800e0f4:	f280 80d0 	bge.w	800e298 <__kernel_rem_pio2+0x458>
 800e0f8:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e160 <__kernel_rem_pio2+0x320>
 800e0fc:	462e      	mov	r6, r5
 800e0fe:	2e00      	cmp	r6, #0
 800e100:	f2c0 80fe 	blt.w	800e300 <__kernel_rem_pio2+0x4c0>
 800e104:	ab72      	add	r3, sp, #456	; 0x1c8
 800e106:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e10a:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e180 <__kernel_rem_pio2+0x340>
 800e10e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e112:	f04f 0800 	mov.w	r8, #0
 800e116:	1baf      	subs	r7, r5, r6
 800e118:	e0e4      	b.n	800e2e4 <__kernel_rem_pio2+0x4a4>
 800e11a:	f04f 0b02 	mov.w	fp, #2
 800e11e:	e759      	b.n	800dfd4 <__kernel_rem_pio2+0x194>
 800e120:	f8d8 3000 	ldr.w	r3, [r8]
 800e124:	b955      	cbnz	r5, 800e13c <__kernel_rem_pio2+0x2fc>
 800e126:	b123      	cbz	r3, 800e132 <__kernel_rem_pio2+0x2f2>
 800e128:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e12c:	f8c8 3000 	str.w	r3, [r8]
 800e130:	2301      	movs	r3, #1
 800e132:	3201      	adds	r2, #1
 800e134:	f108 0804 	add.w	r8, r8, #4
 800e138:	461d      	mov	r5, r3
 800e13a:	e752      	b.n	800dfe2 <__kernel_rem_pio2+0x1a2>
 800e13c:	1acb      	subs	r3, r1, r3
 800e13e:	f8c8 3000 	str.w	r3, [r8]
 800e142:	462b      	mov	r3, r5
 800e144:	e7f5      	b.n	800e132 <__kernel_rem_pio2+0x2f2>
 800e146:	1e62      	subs	r2, r4, #1
 800e148:	ab0e      	add	r3, sp, #56	; 0x38
 800e14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e152:	a90e      	add	r1, sp, #56	; 0x38
 800e154:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e158:	e751      	b.n	800dffe <__kernel_rem_pio2+0x1be>
 800e15a:	bf00      	nop
 800e15c:	f3af 8000 	nop.w
	...
 800e168:	0800f790 	.word	0x0800f790
 800e16c:	40200000 	.word	0x40200000
 800e170:	3ff00000 	.word	0x3ff00000
 800e174:	3e700000 	.word	0x3e700000
 800e178:	41700000 	.word	0x41700000
 800e17c:	3fe00000 	.word	0x3fe00000
 800e180:	0800f750 	.word	0x0800f750
 800e184:	1e62      	subs	r2, r4, #1
 800e186:	ab0e      	add	r3, sp, #56	; 0x38
 800e188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e190:	e7df      	b.n	800e152 <__kernel_rem_pio2+0x312>
 800e192:	a90e      	add	r1, sp, #56	; 0x38
 800e194:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e198:	3b01      	subs	r3, #1
 800e19a:	430a      	orrs	r2, r1
 800e19c:	e78c      	b.n	800e0b8 <__kernel_rem_pio2+0x278>
 800e19e:	3301      	adds	r3, #1
 800e1a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e1a4:	2900      	cmp	r1, #0
 800e1a6:	d0fa      	beq.n	800e19e <__kernel_rem_pio2+0x35e>
 800e1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1aa:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e1ae:	446a      	add	r2, sp
 800e1b0:	3a98      	subs	r2, #152	; 0x98
 800e1b2:	920a      	str	r2, [sp, #40]	; 0x28
 800e1b4:	9a08      	ldr	r2, [sp, #32]
 800e1b6:	18e3      	adds	r3, r4, r3
 800e1b8:	18a5      	adds	r5, r4, r2
 800e1ba:	aa22      	add	r2, sp, #136	; 0x88
 800e1bc:	f104 0801 	add.w	r8, r4, #1
 800e1c0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	9b04      	ldr	r3, [sp, #16]
 800e1c8:	4543      	cmp	r3, r8
 800e1ca:	da04      	bge.n	800e1d6 <__kernel_rem_pio2+0x396>
 800e1cc:	461c      	mov	r4, r3
 800e1ce:	e6ad      	b.n	800df2c <__kernel_rem_pio2+0xec>
 800e1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e7e4      	b.n	800e1a0 <__kernel_rem_pio2+0x360>
 800e1d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e1dc:	f7f6 f99a 	bl	8004514 <__aeabi_i2d>
 800e1e0:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e6:	46ab      	mov	fp, r5
 800e1e8:	461c      	mov	r4, r3
 800e1ea:	f04f 0900 	mov.w	r9, #0
 800e1ee:	2600      	movs	r6, #0
 800e1f0:	2700      	movs	r7, #0
 800e1f2:	9b06      	ldr	r3, [sp, #24]
 800e1f4:	4599      	cmp	r9, r3
 800e1f6:	dd06      	ble.n	800e206 <__kernel_rem_pio2+0x3c6>
 800e1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1fa:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e1fe:	f108 0801 	add.w	r8, r8, #1
 800e202:	930a      	str	r3, [sp, #40]	; 0x28
 800e204:	e7df      	b.n	800e1c6 <__kernel_rem_pio2+0x386>
 800e206:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e20a:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e20e:	f7f6 f9eb 	bl	80045e8 <__aeabi_dmul>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4630      	mov	r0, r6
 800e218:	4639      	mov	r1, r7
 800e21a:	f7f6 f82f 	bl	800427c <__adddf3>
 800e21e:	f109 0901 	add.w	r9, r9, #1
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	e7e4      	b.n	800e1f2 <__kernel_rem_pio2+0x3b2>
 800e228:	3d01      	subs	r5, #1
 800e22a:	e74b      	b.n	800e0c4 <__kernel_rem_pio2+0x284>
 800e22c:	f1ca 0200 	rsb	r2, sl, #0
 800e230:	4630      	mov	r0, r6
 800e232:	4639      	mov	r1, r7
 800e234:	f000 faac 	bl	800e790 <scalbn>
 800e238:	4ba0      	ldr	r3, [pc, #640]	; (800e4bc <__kernel_rem_pio2+0x67c>)
 800e23a:	2200      	movs	r2, #0
 800e23c:	4606      	mov	r6, r0
 800e23e:	460f      	mov	r7, r1
 800e240:	f7f6 fc58 	bl	8004af4 <__aeabi_dcmpge>
 800e244:	b1f8      	cbz	r0, 800e286 <__kernel_rem_pio2+0x446>
 800e246:	4b9e      	ldr	r3, [pc, #632]	; (800e4c0 <__kernel_rem_pio2+0x680>)
 800e248:	2200      	movs	r2, #0
 800e24a:	4630      	mov	r0, r6
 800e24c:	4639      	mov	r1, r7
 800e24e:	f7f6 f9cb 	bl	80045e8 <__aeabi_dmul>
 800e252:	f7f6 fc79 	bl	8004b48 <__aeabi_d2iz>
 800e256:	4680      	mov	r8, r0
 800e258:	f7f6 f95c 	bl	8004514 <__aeabi_i2d>
 800e25c:	4b97      	ldr	r3, [pc, #604]	; (800e4bc <__kernel_rem_pio2+0x67c>)
 800e25e:	2200      	movs	r2, #0
 800e260:	f7f6 f9c2 	bl	80045e8 <__aeabi_dmul>
 800e264:	460b      	mov	r3, r1
 800e266:	4602      	mov	r2, r0
 800e268:	4639      	mov	r1, r7
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7f6 f804 	bl	8004278 <__aeabi_dsub>
 800e270:	f7f6 fc6a 	bl	8004b48 <__aeabi_d2iz>
 800e274:	1c65      	adds	r5, r4, #1
 800e276:	ab0e      	add	r3, sp, #56	; 0x38
 800e278:	f10a 0a18 	add.w	sl, sl, #24
 800e27c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e280:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e284:	e726      	b.n	800e0d4 <__kernel_rem_pio2+0x294>
 800e286:	4630      	mov	r0, r6
 800e288:	4639      	mov	r1, r7
 800e28a:	f7f6 fc5d 	bl	8004b48 <__aeabi_d2iz>
 800e28e:	ab0e      	add	r3, sp, #56	; 0x38
 800e290:	4625      	mov	r5, r4
 800e292:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e296:	e71d      	b.n	800e0d4 <__kernel_rem_pio2+0x294>
 800e298:	ab0e      	add	r3, sp, #56	; 0x38
 800e29a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e29e:	f7f6 f939 	bl	8004514 <__aeabi_i2d>
 800e2a2:	4632      	mov	r2, r6
 800e2a4:	463b      	mov	r3, r7
 800e2a6:	f7f6 f99f 	bl	80045e8 <__aeabi_dmul>
 800e2aa:	4b85      	ldr	r3, [pc, #532]	; (800e4c0 <__kernel_rem_pio2+0x680>)
 800e2ac:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	4639      	mov	r1, r7
 800e2b6:	f7f6 f997 	bl	80045e8 <__aeabi_dmul>
 800e2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2be:	4606      	mov	r6, r0
 800e2c0:	460f      	mov	r7, r1
 800e2c2:	e715      	b.n	800e0f0 <__kernel_rem_pio2+0x2b0>
 800e2c4:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e2c8:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e2cc:	f7f6 f98c 	bl	80045e8 <__aeabi_dmul>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2d8:	f7f5 ffd0 	bl	800427c <__adddf3>
 800e2dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e2e0:	f108 0801 	add.w	r8, r8, #1
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	4598      	cmp	r8, r3
 800e2e8:	dc01      	bgt.n	800e2ee <__kernel_rem_pio2+0x4ae>
 800e2ea:	45b8      	cmp	r8, r7
 800e2ec:	ddea      	ble.n	800e2c4 <__kernel_rem_pio2+0x484>
 800e2ee:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e2f2:	ab4a      	add	r3, sp, #296	; 0x128
 800e2f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e2f8:	ed87 7b00 	vstr	d7, [r7]
 800e2fc:	3e01      	subs	r6, #1
 800e2fe:	e6fe      	b.n	800e0fe <__kernel_rem_pio2+0x2be>
 800e300:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e302:	2b02      	cmp	r3, #2
 800e304:	dc0b      	bgt.n	800e31e <__kernel_rem_pio2+0x4de>
 800e306:	2b00      	cmp	r3, #0
 800e308:	dc35      	bgt.n	800e376 <__kernel_rem_pio2+0x536>
 800e30a:	d059      	beq.n	800e3c0 <__kernel_rem_pio2+0x580>
 800e30c:	9b04      	ldr	r3, [sp, #16]
 800e30e:	f003 0007 	and.w	r0, r3, #7
 800e312:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e316:	ecbd 8b02 	vpop	{d8}
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e320:	2b03      	cmp	r3, #3
 800e322:	d1f3      	bne.n	800e30c <__kernel_rem_pio2+0x4cc>
 800e324:	ab4a      	add	r3, sp, #296	; 0x128
 800e326:	4423      	add	r3, r4
 800e328:	9306      	str	r3, [sp, #24]
 800e32a:	461c      	mov	r4, r3
 800e32c:	469a      	mov	sl, r3
 800e32e:	9502      	str	r5, [sp, #8]
 800e330:	9b02      	ldr	r3, [sp, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	f1aa 0a08 	sub.w	sl, sl, #8
 800e338:	dc6b      	bgt.n	800e412 <__kernel_rem_pio2+0x5d2>
 800e33a:	46aa      	mov	sl, r5
 800e33c:	f1ba 0f01 	cmp.w	sl, #1
 800e340:	f1a4 0408 	sub.w	r4, r4, #8
 800e344:	f300 8085 	bgt.w	800e452 <__kernel_rem_pio2+0x612>
 800e348:	9c06      	ldr	r4, [sp, #24]
 800e34a:	2000      	movs	r0, #0
 800e34c:	3408      	adds	r4, #8
 800e34e:	2100      	movs	r1, #0
 800e350:	2d01      	cmp	r5, #1
 800e352:	f300 809d 	bgt.w	800e490 <__kernel_rem_pio2+0x650>
 800e356:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e35a:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e35e:	f1bb 0f00 	cmp.w	fp, #0
 800e362:	f040 809b 	bne.w	800e49c <__kernel_rem_pio2+0x65c>
 800e366:	9b01      	ldr	r3, [sp, #4]
 800e368:	e9c3 5600 	strd	r5, r6, [r3]
 800e36c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e370:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e374:	e7ca      	b.n	800e30c <__kernel_rem_pio2+0x4cc>
 800e376:	3408      	adds	r4, #8
 800e378:	ab4a      	add	r3, sp, #296	; 0x128
 800e37a:	441c      	add	r4, r3
 800e37c:	462e      	mov	r6, r5
 800e37e:	2000      	movs	r0, #0
 800e380:	2100      	movs	r1, #0
 800e382:	2e00      	cmp	r6, #0
 800e384:	da36      	bge.n	800e3f4 <__kernel_rem_pio2+0x5b4>
 800e386:	f1bb 0f00 	cmp.w	fp, #0
 800e38a:	d039      	beq.n	800e400 <__kernel_rem_pio2+0x5c0>
 800e38c:	4602      	mov	r2, r0
 800e38e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e392:	9c01      	ldr	r4, [sp, #4]
 800e394:	e9c4 2300 	strd	r2, r3, [r4]
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e3a0:	f7f5 ff6a 	bl	8004278 <__aeabi_dsub>
 800e3a4:	ae4c      	add	r6, sp, #304	; 0x130
 800e3a6:	2401      	movs	r4, #1
 800e3a8:	42a5      	cmp	r5, r4
 800e3aa:	da2c      	bge.n	800e406 <__kernel_rem_pio2+0x5c6>
 800e3ac:	f1bb 0f00 	cmp.w	fp, #0
 800e3b0:	d002      	beq.n	800e3b8 <__kernel_rem_pio2+0x578>
 800e3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	9b01      	ldr	r3, [sp, #4]
 800e3ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e3be:	e7a5      	b.n	800e30c <__kernel_rem_pio2+0x4cc>
 800e3c0:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e3c4:	eb0d 0403 	add.w	r4, sp, r3
 800e3c8:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	2d00      	cmp	r5, #0
 800e3d2:	da09      	bge.n	800e3e8 <__kernel_rem_pio2+0x5a8>
 800e3d4:	f1bb 0f00 	cmp.w	fp, #0
 800e3d8:	d002      	beq.n	800e3e0 <__kernel_rem_pio2+0x5a0>
 800e3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e3de:	4619      	mov	r1, r3
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	e9c3 0100 	strd	r0, r1, [r3]
 800e3e6:	e791      	b.n	800e30c <__kernel_rem_pio2+0x4cc>
 800e3e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3ec:	f7f5 ff46 	bl	800427c <__adddf3>
 800e3f0:	3d01      	subs	r5, #1
 800e3f2:	e7ed      	b.n	800e3d0 <__kernel_rem_pio2+0x590>
 800e3f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e3f8:	f7f5 ff40 	bl	800427c <__adddf3>
 800e3fc:	3e01      	subs	r6, #1
 800e3fe:	e7c0      	b.n	800e382 <__kernel_rem_pio2+0x542>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	e7c5      	b.n	800e392 <__kernel_rem_pio2+0x552>
 800e406:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e40a:	f7f5 ff37 	bl	800427c <__adddf3>
 800e40e:	3401      	adds	r4, #1
 800e410:	e7ca      	b.n	800e3a8 <__kernel_rem_pio2+0x568>
 800e412:	e9da 8900 	ldrd	r8, r9, [sl]
 800e416:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e41a:	9b02      	ldr	r3, [sp, #8]
 800e41c:	3b01      	subs	r3, #1
 800e41e:	9302      	str	r3, [sp, #8]
 800e420:	4632      	mov	r2, r6
 800e422:	463b      	mov	r3, r7
 800e424:	4640      	mov	r0, r8
 800e426:	4649      	mov	r1, r9
 800e428:	f7f5 ff28 	bl	800427c <__adddf3>
 800e42c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e430:	4602      	mov	r2, r0
 800e432:	460b      	mov	r3, r1
 800e434:	4640      	mov	r0, r8
 800e436:	4649      	mov	r1, r9
 800e438:	f7f5 ff1e 	bl	8004278 <__aeabi_dsub>
 800e43c:	4632      	mov	r2, r6
 800e43e:	463b      	mov	r3, r7
 800e440:	f7f5 ff1c 	bl	800427c <__adddf3>
 800e444:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e448:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e44c:	ed8a 7b00 	vstr	d7, [sl]
 800e450:	e76e      	b.n	800e330 <__kernel_rem_pio2+0x4f0>
 800e452:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e456:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e45a:	4640      	mov	r0, r8
 800e45c:	4632      	mov	r2, r6
 800e45e:	463b      	mov	r3, r7
 800e460:	4649      	mov	r1, r9
 800e462:	f7f5 ff0b 	bl	800427c <__adddf3>
 800e466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4640      	mov	r0, r8
 800e470:	4649      	mov	r1, r9
 800e472:	f7f5 ff01 	bl	8004278 <__aeabi_dsub>
 800e476:	4632      	mov	r2, r6
 800e478:	463b      	mov	r3, r7
 800e47a:	f7f5 feff 	bl	800427c <__adddf3>
 800e47e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e486:	ed84 7b00 	vstr	d7, [r4]
 800e48a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e48e:	e755      	b.n	800e33c <__kernel_rem_pio2+0x4fc>
 800e490:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e494:	f7f5 fef2 	bl	800427c <__adddf3>
 800e498:	3d01      	subs	r5, #1
 800e49a:	e759      	b.n	800e350 <__kernel_rem_pio2+0x510>
 800e49c:	9b01      	ldr	r3, [sp, #4]
 800e49e:	9a01      	ldr	r2, [sp, #4]
 800e4a0:	601d      	str	r5, [r3, #0]
 800e4a2:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e4a6:	605c      	str	r4, [r3, #4]
 800e4a8:	609f      	str	r7, [r3, #8]
 800e4aa:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e4ae:	60d3      	str	r3, [r2, #12]
 800e4b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e4b4:	6110      	str	r0, [r2, #16]
 800e4b6:	6153      	str	r3, [r2, #20]
 800e4b8:	e728      	b.n	800e30c <__kernel_rem_pio2+0x4cc>
 800e4ba:	bf00      	nop
 800e4bc:	41700000 	.word	0x41700000
 800e4c0:	3e700000 	.word	0x3e700000
 800e4c4:	00000000 	.word	0x00000000

0800e4c8 <__kernel_sin>:
 800e4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	461f      	mov	r7, r3
 800e4ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e4d6:	ed2d 8b04 	vpush	{d8-d9}
 800e4da:	4604      	mov	r4, r0
 800e4dc:	460d      	mov	r5, r1
 800e4de:	4616      	mov	r6, r2
 800e4e0:	da03      	bge.n	800e4ea <__kernel_sin+0x22>
 800e4e2:	f7f6 fb31 	bl	8004b48 <__aeabi_d2iz>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d051      	beq.n	800e58e <__kernel_sin+0xc6>
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	462b      	mov	r3, r5
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4629      	mov	r1, r5
 800e4f2:	f7f6 f879 	bl	80045e8 <__aeabi_dmul>
 800e4f6:	4682      	mov	sl, r0
 800e4f8:	468b      	mov	fp, r1
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4620      	mov	r0, r4
 800e500:	4629      	mov	r1, r5
 800e502:	f7f6 f871 	bl	80045e8 <__aeabi_dmul>
 800e506:	a341      	add	r3, pc, #260	; (adr r3, 800e60c <__kernel_sin+0x144>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	4680      	mov	r8, r0
 800e50e:	4689      	mov	r9, r1
 800e510:	4650      	mov	r0, sl
 800e512:	4659      	mov	r1, fp
 800e514:	f7f6 f868 	bl	80045e8 <__aeabi_dmul>
 800e518:	a33e      	add	r3, pc, #248	; (adr r3, 800e614 <__kernel_sin+0x14c>)
 800e51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51e:	f7f5 feab 	bl	8004278 <__aeabi_dsub>
 800e522:	4652      	mov	r2, sl
 800e524:	465b      	mov	r3, fp
 800e526:	f7f6 f85f 	bl	80045e8 <__aeabi_dmul>
 800e52a:	a33c      	add	r3, pc, #240	; (adr r3, 800e61c <__kernel_sin+0x154>)
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f5 fea4 	bl	800427c <__adddf3>
 800e534:	4652      	mov	r2, sl
 800e536:	465b      	mov	r3, fp
 800e538:	f7f6 f856 	bl	80045e8 <__aeabi_dmul>
 800e53c:	a339      	add	r3, pc, #228	; (adr r3, 800e624 <__kernel_sin+0x15c>)
 800e53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e542:	f7f5 fe99 	bl	8004278 <__aeabi_dsub>
 800e546:	4652      	mov	r2, sl
 800e548:	465b      	mov	r3, fp
 800e54a:	f7f6 f84d 	bl	80045e8 <__aeabi_dmul>
 800e54e:	a337      	add	r3, pc, #220	; (adr r3, 800e62c <__kernel_sin+0x164>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	f7f5 fe92 	bl	800427c <__adddf3>
 800e558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e55a:	ec41 0b18 	vmov	d8, r0, r1
 800e55e:	b9e3      	cbnz	r3, 800e59a <__kernel_sin+0xd2>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4650      	mov	r0, sl
 800e566:	4659      	mov	r1, fp
 800e568:	f7f6 f83e 	bl	80045e8 <__aeabi_dmul>
 800e56c:	a324      	add	r3, pc, #144	; (adr r3, 800e600 <__kernel_sin+0x138>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	f7f5 fe81 	bl	8004278 <__aeabi_dsub>
 800e576:	4642      	mov	r2, r8
 800e578:	464b      	mov	r3, r9
 800e57a:	f7f6 f835 	bl	80045e8 <__aeabi_dmul>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4620      	mov	r0, r4
 800e584:	4629      	mov	r1, r5
 800e586:	f7f5 fe79 	bl	800427c <__adddf3>
 800e58a:	4604      	mov	r4, r0
 800e58c:	460d      	mov	r5, r1
 800e58e:	ecbd 8b04 	vpop	{d8-d9}
 800e592:	4620      	mov	r0, r4
 800e594:	4629      	mov	r1, r5
 800e596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59a:	4b1b      	ldr	r3, [pc, #108]	; (800e608 <__kernel_sin+0x140>)
 800e59c:	2200      	movs	r2, #0
 800e59e:	4630      	mov	r0, r6
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	f7f6 f821 	bl	80045e8 <__aeabi_dmul>
 800e5a6:	ec53 2b18 	vmov	r2, r3, d8
 800e5aa:	ec41 0b19 	vmov	d9, r0, r1
 800e5ae:	4640      	mov	r0, r8
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	f7f6 f819 	bl	80045e8 <__aeabi_dmul>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	ec51 0b19 	vmov	r0, r1, d9
 800e5be:	f7f5 fe5b 	bl	8004278 <__aeabi_dsub>
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	f7f6 f80f 	bl	80045e8 <__aeabi_dmul>
 800e5ca:	4632      	mov	r2, r6
 800e5cc:	463b      	mov	r3, r7
 800e5ce:	f7f5 fe53 	bl	8004278 <__aeabi_dsub>
 800e5d2:	a30b      	add	r3, pc, #44	; (adr r3, 800e600 <__kernel_sin+0x138>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	4606      	mov	r6, r0
 800e5da:	460f      	mov	r7, r1
 800e5dc:	4640      	mov	r0, r8
 800e5de:	4649      	mov	r1, r9
 800e5e0:	f7f6 f802 	bl	80045e8 <__aeabi_dmul>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	f7f5 fe46 	bl	800427c <__adddf3>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	f7f5 fe3e 	bl	8004278 <__aeabi_dsub>
 800e5fc:	e7c5      	b.n	800e58a <__kernel_sin+0xc2>
 800e5fe:	bf00      	nop
 800e600:	55555549 	.word	0x55555549
 800e604:	3fc55555 	.word	0x3fc55555
 800e608:	3fe00000 	.word	0x3fe00000
 800e60c:	5acfd57c 	.word	0x5acfd57c
 800e610:	3de5d93a 	.word	0x3de5d93a
 800e614:	8a2b9ceb 	.word	0x8a2b9ceb
 800e618:	3e5ae5e6 	.word	0x3e5ae5e6
 800e61c:	57b1fe7d 	.word	0x57b1fe7d
 800e620:	3ec71de3 	.word	0x3ec71de3
 800e624:	19c161d5 	.word	0x19c161d5
 800e628:	3f2a01a0 	.word	0x3f2a01a0
 800e62c:	1110f8a6 	.word	0x1110f8a6
 800e630:	3f811111 	.word	0x3f811111

0800e634 <with_errno>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	4604      	mov	r4, r0
 800e638:	460d      	mov	r5, r1
 800e63a:	4616      	mov	r6, r2
 800e63c:	f000 f92a 	bl	800e894 <__errno>
 800e640:	4629      	mov	r1, r5
 800e642:	6006      	str	r6, [r0, #0]
 800e644:	4620      	mov	r0, r4
 800e646:	bd70      	pop	{r4, r5, r6, pc}

0800e648 <xflow>:
 800e648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e64a:	4614      	mov	r4, r2
 800e64c:	461d      	mov	r5, r3
 800e64e:	b108      	cbz	r0, 800e654 <xflow+0xc>
 800e650:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e654:	e9cd 2300 	strd	r2, r3, [sp]
 800e658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f7f5 ffc2 	bl	80045e8 <__aeabi_dmul>
 800e664:	2222      	movs	r2, #34	; 0x22
 800e666:	b003      	add	sp, #12
 800e668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e66c:	f7ff bfe2 	b.w	800e634 <with_errno>

0800e670 <__math_uflow>:
 800e670:	2200      	movs	r2, #0
 800e672:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e676:	f7ff bfe7 	b.w	800e648 <xflow>

0800e67a <__math_oflow>:
 800e67a:	2200      	movs	r2, #0
 800e67c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e680:	f7ff bfe2 	b.w	800e648 <xflow>

0800e684 <finite>:
 800e684:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800e688:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e68c:	0fc0      	lsrs	r0, r0, #31
 800e68e:	4770      	bx	lr

0800e690 <floor>:
 800e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e694:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e698:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e69c:	2e13      	cmp	r6, #19
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	4680      	mov	r8, r0
 800e6a8:	dc33      	bgt.n	800e712 <floor+0x82>
 800e6aa:	2e00      	cmp	r6, #0
 800e6ac:	da14      	bge.n	800e6d8 <floor+0x48>
 800e6ae:	a334      	add	r3, pc, #208	; (adr r3, 800e780 <floor+0xf0>)
 800e6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b4:	f7f5 fde2 	bl	800427c <__adddf3>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f7f6 fa24 	bl	8004b08 <__aeabi_dcmpgt>
 800e6c0:	b138      	cbz	r0, 800e6d2 <floor+0x42>
 800e6c2:	2c00      	cmp	r4, #0
 800e6c4:	da57      	bge.n	800e776 <floor+0xe6>
 800e6c6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e6ca:	431d      	orrs	r5, r3
 800e6cc:	d001      	beq.n	800e6d2 <floor+0x42>
 800e6ce:	4c2e      	ldr	r4, [pc, #184]	; (800e788 <floor+0xf8>)
 800e6d0:	2500      	movs	r5, #0
 800e6d2:	4623      	mov	r3, r4
 800e6d4:	462a      	mov	r2, r5
 800e6d6:	e025      	b.n	800e724 <floor+0x94>
 800e6d8:	4f2c      	ldr	r7, [pc, #176]	; (800e78c <floor+0xfc>)
 800e6da:	4137      	asrs	r7, r6
 800e6dc:	ea01 0c07 	and.w	ip, r1, r7
 800e6e0:	ea5c 0c00 	orrs.w	ip, ip, r0
 800e6e4:	d01e      	beq.n	800e724 <floor+0x94>
 800e6e6:	a326      	add	r3, pc, #152	; (adr r3, 800e780 <floor+0xf0>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	f7f5 fdc6 	bl	800427c <__adddf3>
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	f7f6 fa08 	bl	8004b08 <__aeabi_dcmpgt>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d0ea      	beq.n	800e6d2 <floor+0x42>
 800e6fc:	2c00      	cmp	r4, #0
 800e6fe:	bfbe      	ittt	lt
 800e700:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e704:	fa43 f606 	asrlt.w	r6, r3, r6
 800e708:	19a4      	addlt	r4, r4, r6
 800e70a:	ea24 0407 	bic.w	r4, r4, r7
 800e70e:	2500      	movs	r5, #0
 800e710:	e7df      	b.n	800e6d2 <floor+0x42>
 800e712:	2e33      	cmp	r6, #51	; 0x33
 800e714:	dd0a      	ble.n	800e72c <floor+0x9c>
 800e716:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e71a:	d103      	bne.n	800e724 <floor+0x94>
 800e71c:	f7f5 fdae 	bl	800427c <__adddf3>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4610      	mov	r0, r2
 800e726:	4619      	mov	r1, r3
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e730:	f04f 3cff 	mov.w	ip, #4294967295
 800e734:	fa2c f707 	lsr.w	r7, ip, r7
 800e738:	4207      	tst	r7, r0
 800e73a:	d0f3      	beq.n	800e724 <floor+0x94>
 800e73c:	a310      	add	r3, pc, #64	; (adr r3, 800e780 <floor+0xf0>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	f7f5 fd9b 	bl	800427c <__adddf3>
 800e746:	2200      	movs	r2, #0
 800e748:	2300      	movs	r3, #0
 800e74a:	f7f6 f9dd 	bl	8004b08 <__aeabi_dcmpgt>
 800e74e:	2800      	cmp	r0, #0
 800e750:	d0bf      	beq.n	800e6d2 <floor+0x42>
 800e752:	2c00      	cmp	r4, #0
 800e754:	da02      	bge.n	800e75c <floor+0xcc>
 800e756:	2e14      	cmp	r6, #20
 800e758:	d103      	bne.n	800e762 <floor+0xd2>
 800e75a:	3401      	adds	r4, #1
 800e75c:	ea25 0507 	bic.w	r5, r5, r7
 800e760:	e7b7      	b.n	800e6d2 <floor+0x42>
 800e762:	2301      	movs	r3, #1
 800e764:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e768:	fa03 f606 	lsl.w	r6, r3, r6
 800e76c:	4435      	add	r5, r6
 800e76e:	4545      	cmp	r5, r8
 800e770:	bf38      	it	cc
 800e772:	18e4      	addcc	r4, r4, r3
 800e774:	e7f2      	b.n	800e75c <floor+0xcc>
 800e776:	2500      	movs	r5, #0
 800e778:	462c      	mov	r4, r5
 800e77a:	e7aa      	b.n	800e6d2 <floor+0x42>
 800e77c:	f3af 8000 	nop.w
 800e780:	8800759c 	.word	0x8800759c
 800e784:	7e37e43c 	.word	0x7e37e43c
 800e788:	bff00000 	.word	0xbff00000
 800e78c:	000fffff 	.word	0x000fffff

0800e790 <scalbn>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e796:	4604      	mov	r4, r0
 800e798:	460d      	mov	r5, r1
 800e79a:	4617      	mov	r7, r2
 800e79c:	460b      	mov	r3, r1
 800e79e:	b986      	cbnz	r6, 800e7c2 <scalbn+0x32>
 800e7a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e7a4:	4303      	orrs	r3, r0
 800e7a6:	d031      	beq.n	800e80c <scalbn+0x7c>
 800e7a8:	4b37      	ldr	r3, [pc, #220]	; (800e888 <scalbn+0xf8>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f7f5 ff1c 	bl	80045e8 <__aeabi_dmul>
 800e7b0:	4b36      	ldr	r3, [pc, #216]	; (800e88c <scalbn+0xfc>)
 800e7b2:	429f      	cmp	r7, r3
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	460d      	mov	r5, r1
 800e7b8:	da0d      	bge.n	800e7d6 <scalbn+0x46>
 800e7ba:	a32b      	add	r3, pc, #172	; (adr r3, 800e868 <scalbn+0xd8>)
 800e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c0:	e038      	b.n	800e834 <scalbn+0xa4>
 800e7c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e7c6:	4296      	cmp	r6, r2
 800e7c8:	d10a      	bne.n	800e7e0 <scalbn+0x50>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	f7f5 fd56 	bl	800427c <__adddf3>
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	460d      	mov	r5, r1
 800e7d4:	e01a      	b.n	800e80c <scalbn+0x7c>
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e7dc:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e7e0:	19b9      	adds	r1, r7, r6
 800e7e2:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e7e6:	4291      	cmp	r1, r2
 800e7e8:	dd08      	ble.n	800e7fc <scalbn+0x6c>
 800e7ea:	2d00      	cmp	r5, #0
 800e7ec:	a120      	add	r1, pc, #128	; (adr r1, 800e870 <scalbn+0xe0>)
 800e7ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7f2:	da1c      	bge.n	800e82e <scalbn+0x9e>
 800e7f4:	a120      	add	r1, pc, #128	; (adr r1, 800e878 <scalbn+0xe8>)
 800e7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7fa:	e018      	b.n	800e82e <scalbn+0x9e>
 800e7fc:	2900      	cmp	r1, #0
 800e7fe:	dd08      	ble.n	800e812 <scalbn+0x82>
 800e800:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e808:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e812:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e816:	da19      	bge.n	800e84c <scalbn+0xbc>
 800e818:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e81c:	429f      	cmp	r7, r3
 800e81e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e822:	dd0a      	ble.n	800e83a <scalbn+0xaa>
 800e824:	a112      	add	r1, pc, #72	; (adr r1, 800e870 <scalbn+0xe0>)
 800e826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e2      	bne.n	800e7f4 <scalbn+0x64>
 800e82e:	a310      	add	r3, pc, #64	; (adr r3, 800e870 <scalbn+0xe0>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f5 fed8 	bl	80045e8 <__aeabi_dmul>
 800e838:	e7ca      	b.n	800e7d0 <scalbn+0x40>
 800e83a:	a10b      	add	r1, pc, #44	; (adr r1, 800e868 <scalbn+0xd8>)
 800e83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d0ba      	beq.n	800e7ba <scalbn+0x2a>
 800e844:	a10e      	add	r1, pc, #56	; (adr r1, 800e880 <scalbn+0xf0>)
 800e846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e84a:	e7b6      	b.n	800e7ba <scalbn+0x2a>
 800e84c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e850:	3136      	adds	r1, #54	; 0x36
 800e852:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e856:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e85a:	4620      	mov	r0, r4
 800e85c:	4b0c      	ldr	r3, [pc, #48]	; (800e890 <scalbn+0x100>)
 800e85e:	4629      	mov	r1, r5
 800e860:	2200      	movs	r2, #0
 800e862:	e7e7      	b.n	800e834 <scalbn+0xa4>
 800e864:	f3af 8000 	nop.w
 800e868:	c2f8f359 	.word	0xc2f8f359
 800e86c:	01a56e1f 	.word	0x01a56e1f
 800e870:	8800759c 	.word	0x8800759c
 800e874:	7e37e43c 	.word	0x7e37e43c
 800e878:	8800759c 	.word	0x8800759c
 800e87c:	fe37e43c 	.word	0xfe37e43c
 800e880:	c2f8f359 	.word	0xc2f8f359
 800e884:	81a56e1f 	.word	0x81a56e1f
 800e888:	43500000 	.word	0x43500000
 800e88c:	ffff3cb0 	.word	0xffff3cb0
 800e890:	3c900000 	.word	0x3c900000

0800e894 <__errno>:
 800e894:	4b01      	ldr	r3, [pc, #4]	; (800e89c <__errno+0x8>)
 800e896:	6818      	ldr	r0, [r3, #0]
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop
 800e89c:	200001a0 	.word	0x200001a0

0800e8a0 <__libc_init_array>:
 800e8a0:	b570      	push	{r4, r5, r6, lr}
 800e8a2:	4d0d      	ldr	r5, [pc, #52]	; (800e8d8 <__libc_init_array+0x38>)
 800e8a4:	4c0d      	ldr	r4, [pc, #52]	; (800e8dc <__libc_init_array+0x3c>)
 800e8a6:	1b64      	subs	r4, r4, r5
 800e8a8:	10a4      	asrs	r4, r4, #2
 800e8aa:	2600      	movs	r6, #0
 800e8ac:	42a6      	cmp	r6, r4
 800e8ae:	d109      	bne.n	800e8c4 <__libc_init_array+0x24>
 800e8b0:	4d0b      	ldr	r5, [pc, #44]	; (800e8e0 <__libc_init_array+0x40>)
 800e8b2:	4c0c      	ldr	r4, [pc, #48]	; (800e8e4 <__libc_init_array+0x44>)
 800e8b4:	f000 fc9e 	bl	800f1f4 <_init>
 800e8b8:	1b64      	subs	r4, r4, r5
 800e8ba:	10a4      	asrs	r4, r4, #2
 800e8bc:	2600      	movs	r6, #0
 800e8be:	42a6      	cmp	r6, r4
 800e8c0:	d105      	bne.n	800e8ce <__libc_init_array+0x2e>
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8c8:	4798      	blx	r3
 800e8ca:	3601      	adds	r6, #1
 800e8cc:	e7ee      	b.n	800e8ac <__libc_init_array+0xc>
 800e8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8d2:	4798      	blx	r3
 800e8d4:	3601      	adds	r6, #1
 800e8d6:	e7f2      	b.n	800e8be <__libc_init_array+0x1e>
 800e8d8:	0800f7d8 	.word	0x0800f7d8
 800e8dc:	0800f7d8 	.word	0x0800f7d8
 800e8e0:	0800f7d8 	.word	0x0800f7d8
 800e8e4:	0800f7dc 	.word	0x0800f7dc

0800e8e8 <malloc>:
 800e8e8:	4b02      	ldr	r3, [pc, #8]	; (800e8f4 <malloc+0xc>)
 800e8ea:	4601      	mov	r1, r0
 800e8ec:	6818      	ldr	r0, [r3, #0]
 800e8ee:	f000 b88d 	b.w	800ea0c <_malloc_r>
 800e8f2:	bf00      	nop
 800e8f4:	200001a0 	.word	0x200001a0

0800e8f8 <free>:
 800e8f8:	4b02      	ldr	r3, [pc, #8]	; (800e904 <free+0xc>)
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	6818      	ldr	r0, [r3, #0]
 800e8fe:	f000 b819 	b.w	800e934 <_free_r>
 800e902:	bf00      	nop
 800e904:	200001a0 	.word	0x200001a0

0800e908 <memcpy>:
 800e908:	440a      	add	r2, r1
 800e90a:	4291      	cmp	r1, r2
 800e90c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e910:	d100      	bne.n	800e914 <memcpy+0xc>
 800e912:	4770      	bx	lr
 800e914:	b510      	push	{r4, lr}
 800e916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e91a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e91e:	4291      	cmp	r1, r2
 800e920:	d1f9      	bne.n	800e916 <memcpy+0xe>
 800e922:	bd10      	pop	{r4, pc}

0800e924 <memset>:
 800e924:	4402      	add	r2, r0
 800e926:	4603      	mov	r3, r0
 800e928:	4293      	cmp	r3, r2
 800e92a:	d100      	bne.n	800e92e <memset+0xa>
 800e92c:	4770      	bx	lr
 800e92e:	f803 1b01 	strb.w	r1, [r3], #1
 800e932:	e7f9      	b.n	800e928 <memset+0x4>

0800e934 <_free_r>:
 800e934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e936:	2900      	cmp	r1, #0
 800e938:	d044      	beq.n	800e9c4 <_free_r+0x90>
 800e93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e93e:	9001      	str	r0, [sp, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	f1a1 0404 	sub.w	r4, r1, #4
 800e946:	bfb8      	it	lt
 800e948:	18e4      	addlt	r4, r4, r3
 800e94a:	f000 f903 	bl	800eb54 <__malloc_lock>
 800e94e:	4a1e      	ldr	r2, [pc, #120]	; (800e9c8 <_free_r+0x94>)
 800e950:	9801      	ldr	r0, [sp, #4]
 800e952:	6813      	ldr	r3, [r2, #0]
 800e954:	b933      	cbnz	r3, 800e964 <_free_r+0x30>
 800e956:	6063      	str	r3, [r4, #4]
 800e958:	6014      	str	r4, [r2, #0]
 800e95a:	b003      	add	sp, #12
 800e95c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e960:	f000 b8fe 	b.w	800eb60 <__malloc_unlock>
 800e964:	42a3      	cmp	r3, r4
 800e966:	d908      	bls.n	800e97a <_free_r+0x46>
 800e968:	6825      	ldr	r5, [r4, #0]
 800e96a:	1961      	adds	r1, r4, r5
 800e96c:	428b      	cmp	r3, r1
 800e96e:	bf01      	itttt	eq
 800e970:	6819      	ldreq	r1, [r3, #0]
 800e972:	685b      	ldreq	r3, [r3, #4]
 800e974:	1949      	addeq	r1, r1, r5
 800e976:	6021      	streq	r1, [r4, #0]
 800e978:	e7ed      	b.n	800e956 <_free_r+0x22>
 800e97a:	461a      	mov	r2, r3
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	b10b      	cbz	r3, 800e984 <_free_r+0x50>
 800e980:	42a3      	cmp	r3, r4
 800e982:	d9fa      	bls.n	800e97a <_free_r+0x46>
 800e984:	6811      	ldr	r1, [r2, #0]
 800e986:	1855      	adds	r5, r2, r1
 800e988:	42a5      	cmp	r5, r4
 800e98a:	d10b      	bne.n	800e9a4 <_free_r+0x70>
 800e98c:	6824      	ldr	r4, [r4, #0]
 800e98e:	4421      	add	r1, r4
 800e990:	1854      	adds	r4, r2, r1
 800e992:	42a3      	cmp	r3, r4
 800e994:	6011      	str	r1, [r2, #0]
 800e996:	d1e0      	bne.n	800e95a <_free_r+0x26>
 800e998:	681c      	ldr	r4, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	6053      	str	r3, [r2, #4]
 800e99e:	4421      	add	r1, r4
 800e9a0:	6011      	str	r1, [r2, #0]
 800e9a2:	e7da      	b.n	800e95a <_free_r+0x26>
 800e9a4:	d902      	bls.n	800e9ac <_free_r+0x78>
 800e9a6:	230c      	movs	r3, #12
 800e9a8:	6003      	str	r3, [r0, #0]
 800e9aa:	e7d6      	b.n	800e95a <_free_r+0x26>
 800e9ac:	6825      	ldr	r5, [r4, #0]
 800e9ae:	1961      	adds	r1, r4, r5
 800e9b0:	428b      	cmp	r3, r1
 800e9b2:	bf04      	itt	eq
 800e9b4:	6819      	ldreq	r1, [r3, #0]
 800e9b6:	685b      	ldreq	r3, [r3, #4]
 800e9b8:	6063      	str	r3, [r4, #4]
 800e9ba:	bf04      	itt	eq
 800e9bc:	1949      	addeq	r1, r1, r5
 800e9be:	6021      	streq	r1, [r4, #0]
 800e9c0:	6054      	str	r4, [r2, #4]
 800e9c2:	e7ca      	b.n	800e95a <_free_r+0x26>
 800e9c4:	b003      	add	sp, #12
 800e9c6:	bd30      	pop	{r4, r5, pc}
 800e9c8:	20002998 	.word	0x20002998

0800e9cc <sbrk_aligned>:
 800e9cc:	b570      	push	{r4, r5, r6, lr}
 800e9ce:	4e0e      	ldr	r6, [pc, #56]	; (800ea08 <sbrk_aligned+0x3c>)
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	6831      	ldr	r1, [r6, #0]
 800e9d4:	4605      	mov	r5, r0
 800e9d6:	b911      	cbnz	r1, 800e9de <sbrk_aligned+0x12>
 800e9d8:	f000 f88c 	bl	800eaf4 <_sbrk_r>
 800e9dc:	6030      	str	r0, [r6, #0]
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	f000 f887 	bl	800eaf4 <_sbrk_r>
 800e9e6:	1c43      	adds	r3, r0, #1
 800e9e8:	d00a      	beq.n	800ea00 <sbrk_aligned+0x34>
 800e9ea:	1cc4      	adds	r4, r0, #3
 800e9ec:	f024 0403 	bic.w	r4, r4, #3
 800e9f0:	42a0      	cmp	r0, r4
 800e9f2:	d007      	beq.n	800ea04 <sbrk_aligned+0x38>
 800e9f4:	1a21      	subs	r1, r4, r0
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f000 f87c 	bl	800eaf4 <_sbrk_r>
 800e9fc:	3001      	adds	r0, #1
 800e9fe:	d101      	bne.n	800ea04 <sbrk_aligned+0x38>
 800ea00:	f04f 34ff 	mov.w	r4, #4294967295
 800ea04:	4620      	mov	r0, r4
 800ea06:	bd70      	pop	{r4, r5, r6, pc}
 800ea08:	2000299c 	.word	0x2000299c

0800ea0c <_malloc_r>:
 800ea0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea10:	1ccd      	adds	r5, r1, #3
 800ea12:	f025 0503 	bic.w	r5, r5, #3
 800ea16:	3508      	adds	r5, #8
 800ea18:	2d0c      	cmp	r5, #12
 800ea1a:	bf38      	it	cc
 800ea1c:	250c      	movcc	r5, #12
 800ea1e:	2d00      	cmp	r5, #0
 800ea20:	4607      	mov	r7, r0
 800ea22:	db01      	blt.n	800ea28 <_malloc_r+0x1c>
 800ea24:	42a9      	cmp	r1, r5
 800ea26:	d905      	bls.n	800ea34 <_malloc_r+0x28>
 800ea28:	230c      	movs	r3, #12
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	2600      	movs	r6, #0
 800ea2e:	4630      	mov	r0, r6
 800ea30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea34:	4e2e      	ldr	r6, [pc, #184]	; (800eaf0 <_malloc_r+0xe4>)
 800ea36:	f000 f88d 	bl	800eb54 <__malloc_lock>
 800ea3a:	6833      	ldr	r3, [r6, #0]
 800ea3c:	461c      	mov	r4, r3
 800ea3e:	bb34      	cbnz	r4, 800ea8e <_malloc_r+0x82>
 800ea40:	4629      	mov	r1, r5
 800ea42:	4638      	mov	r0, r7
 800ea44:	f7ff ffc2 	bl	800e9cc <sbrk_aligned>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	d14d      	bne.n	800eaea <_malloc_r+0xde>
 800ea4e:	6834      	ldr	r4, [r6, #0]
 800ea50:	4626      	mov	r6, r4
 800ea52:	2e00      	cmp	r6, #0
 800ea54:	d140      	bne.n	800ead8 <_malloc_r+0xcc>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	eb04 0803 	add.w	r8, r4, r3
 800ea60:	f000 f848 	bl	800eaf4 <_sbrk_r>
 800ea64:	4580      	cmp	r8, r0
 800ea66:	d13a      	bne.n	800eade <_malloc_r+0xd2>
 800ea68:	6821      	ldr	r1, [r4, #0]
 800ea6a:	3503      	adds	r5, #3
 800ea6c:	1a6d      	subs	r5, r5, r1
 800ea6e:	f025 0503 	bic.w	r5, r5, #3
 800ea72:	3508      	adds	r5, #8
 800ea74:	2d0c      	cmp	r5, #12
 800ea76:	bf38      	it	cc
 800ea78:	250c      	movcc	r5, #12
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	4638      	mov	r0, r7
 800ea7e:	f7ff ffa5 	bl	800e9cc <sbrk_aligned>
 800ea82:	3001      	adds	r0, #1
 800ea84:	d02b      	beq.n	800eade <_malloc_r+0xd2>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	442b      	add	r3, r5
 800ea8a:	6023      	str	r3, [r4, #0]
 800ea8c:	e00e      	b.n	800eaac <_malloc_r+0xa0>
 800ea8e:	6822      	ldr	r2, [r4, #0]
 800ea90:	1b52      	subs	r2, r2, r5
 800ea92:	d41e      	bmi.n	800ead2 <_malloc_r+0xc6>
 800ea94:	2a0b      	cmp	r2, #11
 800ea96:	d916      	bls.n	800eac6 <_malloc_r+0xba>
 800ea98:	1961      	adds	r1, r4, r5
 800ea9a:	42a3      	cmp	r3, r4
 800ea9c:	6025      	str	r5, [r4, #0]
 800ea9e:	bf18      	it	ne
 800eaa0:	6059      	strne	r1, [r3, #4]
 800eaa2:	6863      	ldr	r3, [r4, #4]
 800eaa4:	bf08      	it	eq
 800eaa6:	6031      	streq	r1, [r6, #0]
 800eaa8:	5162      	str	r2, [r4, r5]
 800eaaa:	604b      	str	r3, [r1, #4]
 800eaac:	4638      	mov	r0, r7
 800eaae:	f104 060b 	add.w	r6, r4, #11
 800eab2:	f000 f855 	bl	800eb60 <__malloc_unlock>
 800eab6:	f026 0607 	bic.w	r6, r6, #7
 800eaba:	1d23      	adds	r3, r4, #4
 800eabc:	1af2      	subs	r2, r6, r3
 800eabe:	d0b6      	beq.n	800ea2e <_malloc_r+0x22>
 800eac0:	1b9b      	subs	r3, r3, r6
 800eac2:	50a3      	str	r3, [r4, r2]
 800eac4:	e7b3      	b.n	800ea2e <_malloc_r+0x22>
 800eac6:	6862      	ldr	r2, [r4, #4]
 800eac8:	42a3      	cmp	r3, r4
 800eaca:	bf0c      	ite	eq
 800eacc:	6032      	streq	r2, [r6, #0]
 800eace:	605a      	strne	r2, [r3, #4]
 800ead0:	e7ec      	b.n	800eaac <_malloc_r+0xa0>
 800ead2:	4623      	mov	r3, r4
 800ead4:	6864      	ldr	r4, [r4, #4]
 800ead6:	e7b2      	b.n	800ea3e <_malloc_r+0x32>
 800ead8:	4634      	mov	r4, r6
 800eada:	6876      	ldr	r6, [r6, #4]
 800eadc:	e7b9      	b.n	800ea52 <_malloc_r+0x46>
 800eade:	230c      	movs	r3, #12
 800eae0:	603b      	str	r3, [r7, #0]
 800eae2:	4638      	mov	r0, r7
 800eae4:	f000 f83c 	bl	800eb60 <__malloc_unlock>
 800eae8:	e7a1      	b.n	800ea2e <_malloc_r+0x22>
 800eaea:	6025      	str	r5, [r4, #0]
 800eaec:	e7de      	b.n	800eaac <_malloc_r+0xa0>
 800eaee:	bf00      	nop
 800eaf0:	20002998 	.word	0x20002998

0800eaf4 <_sbrk_r>:
 800eaf4:	b538      	push	{r3, r4, r5, lr}
 800eaf6:	4d06      	ldr	r5, [pc, #24]	; (800eb10 <_sbrk_r+0x1c>)
 800eaf8:	2300      	movs	r3, #0
 800eafa:	4604      	mov	r4, r0
 800eafc:	4608      	mov	r0, r1
 800eafe:	602b      	str	r3, [r5, #0]
 800eb00:	f7f7 fed4 	bl	80068ac <_sbrk>
 800eb04:	1c43      	adds	r3, r0, #1
 800eb06:	d102      	bne.n	800eb0e <_sbrk_r+0x1a>
 800eb08:	682b      	ldr	r3, [r5, #0]
 800eb0a:	b103      	cbz	r3, 800eb0e <_sbrk_r+0x1a>
 800eb0c:	6023      	str	r3, [r4, #0]
 800eb0e:	bd38      	pop	{r3, r4, r5, pc}
 800eb10:	200029a0 	.word	0x200029a0

0800eb14 <siprintf>:
 800eb14:	b40e      	push	{r1, r2, r3}
 800eb16:	b500      	push	{lr}
 800eb18:	b09c      	sub	sp, #112	; 0x70
 800eb1a:	ab1d      	add	r3, sp, #116	; 0x74
 800eb1c:	9002      	str	r0, [sp, #8]
 800eb1e:	9006      	str	r0, [sp, #24]
 800eb20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eb24:	4809      	ldr	r0, [pc, #36]	; (800eb4c <siprintf+0x38>)
 800eb26:	9107      	str	r1, [sp, #28]
 800eb28:	9104      	str	r1, [sp, #16]
 800eb2a:	4909      	ldr	r1, [pc, #36]	; (800eb50 <siprintf+0x3c>)
 800eb2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb30:	9105      	str	r1, [sp, #20]
 800eb32:	6800      	ldr	r0, [r0, #0]
 800eb34:	9301      	str	r3, [sp, #4]
 800eb36:	a902      	add	r1, sp, #8
 800eb38:	f000 f874 	bl	800ec24 <_svfiprintf_r>
 800eb3c:	9b02      	ldr	r3, [sp, #8]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	701a      	strb	r2, [r3, #0]
 800eb42:	b01c      	add	sp, #112	; 0x70
 800eb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb48:	b003      	add	sp, #12
 800eb4a:	4770      	bx	lr
 800eb4c:	200001a0 	.word	0x200001a0
 800eb50:	ffff0208 	.word	0xffff0208

0800eb54 <__malloc_lock>:
 800eb54:	4801      	ldr	r0, [pc, #4]	; (800eb5c <__malloc_lock+0x8>)
 800eb56:	f000 baf9 	b.w	800f14c <__retarget_lock_acquire_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	200029a4 	.word	0x200029a4

0800eb60 <__malloc_unlock>:
 800eb60:	4801      	ldr	r0, [pc, #4]	; (800eb68 <__malloc_unlock+0x8>)
 800eb62:	f000 baf4 	b.w	800f14e <__retarget_lock_release_recursive>
 800eb66:	bf00      	nop
 800eb68:	200029a4 	.word	0x200029a4

0800eb6c <__ssputs_r>:
 800eb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb70:	688e      	ldr	r6, [r1, #8]
 800eb72:	429e      	cmp	r6, r3
 800eb74:	4682      	mov	sl, r0
 800eb76:	460c      	mov	r4, r1
 800eb78:	4690      	mov	r8, r2
 800eb7a:	461f      	mov	r7, r3
 800eb7c:	d838      	bhi.n	800ebf0 <__ssputs_r+0x84>
 800eb7e:	898a      	ldrh	r2, [r1, #12]
 800eb80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb84:	d032      	beq.n	800ebec <__ssputs_r+0x80>
 800eb86:	6825      	ldr	r5, [r4, #0]
 800eb88:	6909      	ldr	r1, [r1, #16]
 800eb8a:	eba5 0901 	sub.w	r9, r5, r1
 800eb8e:	6965      	ldr	r5, [r4, #20]
 800eb90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb98:	3301      	adds	r3, #1
 800eb9a:	444b      	add	r3, r9
 800eb9c:	106d      	asrs	r5, r5, #1
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	bf38      	it	cc
 800eba2:	461d      	movcc	r5, r3
 800eba4:	0553      	lsls	r3, r2, #21
 800eba6:	d531      	bpl.n	800ec0c <__ssputs_r+0xa0>
 800eba8:	4629      	mov	r1, r5
 800ebaa:	f7ff ff2f 	bl	800ea0c <_malloc_r>
 800ebae:	4606      	mov	r6, r0
 800ebb0:	b950      	cbnz	r0, 800ebc8 <__ssputs_r+0x5c>
 800ebb2:	230c      	movs	r3, #12
 800ebb4:	f8ca 3000 	str.w	r3, [sl]
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebbe:	81a3      	strh	r3, [r4, #12]
 800ebc0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebc8:	6921      	ldr	r1, [r4, #16]
 800ebca:	464a      	mov	r2, r9
 800ebcc:	f7ff fe9c 	bl	800e908 <memcpy>
 800ebd0:	89a3      	ldrh	r3, [r4, #12]
 800ebd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebda:	81a3      	strh	r3, [r4, #12]
 800ebdc:	6126      	str	r6, [r4, #16]
 800ebde:	6165      	str	r5, [r4, #20]
 800ebe0:	444e      	add	r6, r9
 800ebe2:	eba5 0509 	sub.w	r5, r5, r9
 800ebe6:	6026      	str	r6, [r4, #0]
 800ebe8:	60a5      	str	r5, [r4, #8]
 800ebea:	463e      	mov	r6, r7
 800ebec:	42be      	cmp	r6, r7
 800ebee:	d900      	bls.n	800ebf2 <__ssputs_r+0x86>
 800ebf0:	463e      	mov	r6, r7
 800ebf2:	6820      	ldr	r0, [r4, #0]
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	4641      	mov	r1, r8
 800ebf8:	f000 faaa 	bl	800f150 <memmove>
 800ebfc:	68a3      	ldr	r3, [r4, #8]
 800ebfe:	1b9b      	subs	r3, r3, r6
 800ec00:	60a3      	str	r3, [r4, #8]
 800ec02:	6823      	ldr	r3, [r4, #0]
 800ec04:	4433      	add	r3, r6
 800ec06:	6023      	str	r3, [r4, #0]
 800ec08:	2000      	movs	r0, #0
 800ec0a:	e7db      	b.n	800ebc4 <__ssputs_r+0x58>
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	f000 fab9 	bl	800f184 <_realloc_r>
 800ec12:	4606      	mov	r6, r0
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1e1      	bne.n	800ebdc <__ssputs_r+0x70>
 800ec18:	6921      	ldr	r1, [r4, #16]
 800ec1a:	4650      	mov	r0, sl
 800ec1c:	f7ff fe8a 	bl	800e934 <_free_r>
 800ec20:	e7c7      	b.n	800ebb2 <__ssputs_r+0x46>
	...

0800ec24 <_svfiprintf_r>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	4698      	mov	r8, r3
 800ec2a:	898b      	ldrh	r3, [r1, #12]
 800ec2c:	061b      	lsls	r3, r3, #24
 800ec2e:	b09d      	sub	sp, #116	; 0x74
 800ec30:	4607      	mov	r7, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	4614      	mov	r4, r2
 800ec36:	d50e      	bpl.n	800ec56 <_svfiprintf_r+0x32>
 800ec38:	690b      	ldr	r3, [r1, #16]
 800ec3a:	b963      	cbnz	r3, 800ec56 <_svfiprintf_r+0x32>
 800ec3c:	2140      	movs	r1, #64	; 0x40
 800ec3e:	f7ff fee5 	bl	800ea0c <_malloc_r>
 800ec42:	6028      	str	r0, [r5, #0]
 800ec44:	6128      	str	r0, [r5, #16]
 800ec46:	b920      	cbnz	r0, 800ec52 <_svfiprintf_r+0x2e>
 800ec48:	230c      	movs	r3, #12
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec50:	e0d1      	b.n	800edf6 <_svfiprintf_r+0x1d2>
 800ec52:	2340      	movs	r3, #64	; 0x40
 800ec54:	616b      	str	r3, [r5, #20]
 800ec56:	2300      	movs	r3, #0
 800ec58:	9309      	str	r3, [sp, #36]	; 0x24
 800ec5a:	2320      	movs	r3, #32
 800ec5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec64:	2330      	movs	r3, #48	; 0x30
 800ec66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee10 <_svfiprintf_r+0x1ec>
 800ec6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec6e:	f04f 0901 	mov.w	r9, #1
 800ec72:	4623      	mov	r3, r4
 800ec74:	469a      	mov	sl, r3
 800ec76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec7a:	b10a      	cbz	r2, 800ec80 <_svfiprintf_r+0x5c>
 800ec7c:	2a25      	cmp	r2, #37	; 0x25
 800ec7e:	d1f9      	bne.n	800ec74 <_svfiprintf_r+0x50>
 800ec80:	ebba 0b04 	subs.w	fp, sl, r4
 800ec84:	d00b      	beq.n	800ec9e <_svfiprintf_r+0x7a>
 800ec86:	465b      	mov	r3, fp
 800ec88:	4622      	mov	r2, r4
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4638      	mov	r0, r7
 800ec8e:	f7ff ff6d 	bl	800eb6c <__ssputs_r>
 800ec92:	3001      	adds	r0, #1
 800ec94:	f000 80aa 	beq.w	800edec <_svfiprintf_r+0x1c8>
 800ec98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec9a:	445a      	add	r2, fp
 800ec9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ec9e:	f89a 3000 	ldrb.w	r3, [sl]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f000 80a2 	beq.w	800edec <_svfiprintf_r+0x1c8>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f04f 32ff 	mov.w	r2, #4294967295
 800ecae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb2:	f10a 0a01 	add.w	sl, sl, #1
 800ecb6:	9304      	str	r3, [sp, #16]
 800ecb8:	9307      	str	r3, [sp, #28]
 800ecba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecbe:	931a      	str	r3, [sp, #104]	; 0x68
 800ecc0:	4654      	mov	r4, sl
 800ecc2:	2205      	movs	r2, #5
 800ecc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecc8:	4851      	ldr	r0, [pc, #324]	; (800ee10 <_svfiprintf_r+0x1ec>)
 800ecca:	f7f5 fa81 	bl	80041d0 <memchr>
 800ecce:	9a04      	ldr	r2, [sp, #16]
 800ecd0:	b9d8      	cbnz	r0, 800ed0a <_svfiprintf_r+0xe6>
 800ecd2:	06d0      	lsls	r0, r2, #27
 800ecd4:	bf44      	itt	mi
 800ecd6:	2320      	movmi	r3, #32
 800ecd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecdc:	0711      	lsls	r1, r2, #28
 800ecde:	bf44      	itt	mi
 800ece0:	232b      	movmi	r3, #43	; 0x2b
 800ece2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ece6:	f89a 3000 	ldrb.w	r3, [sl]
 800ecea:	2b2a      	cmp	r3, #42	; 0x2a
 800ecec:	d015      	beq.n	800ed1a <_svfiprintf_r+0xf6>
 800ecee:	9a07      	ldr	r2, [sp, #28]
 800ecf0:	4654      	mov	r4, sl
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	f04f 0c0a 	mov.w	ip, #10
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecfe:	3b30      	subs	r3, #48	; 0x30
 800ed00:	2b09      	cmp	r3, #9
 800ed02:	d94e      	bls.n	800eda2 <_svfiprintf_r+0x17e>
 800ed04:	b1b0      	cbz	r0, 800ed34 <_svfiprintf_r+0x110>
 800ed06:	9207      	str	r2, [sp, #28]
 800ed08:	e014      	b.n	800ed34 <_svfiprintf_r+0x110>
 800ed0a:	eba0 0308 	sub.w	r3, r0, r8
 800ed0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ed12:	4313      	orrs	r3, r2
 800ed14:	9304      	str	r3, [sp, #16]
 800ed16:	46a2      	mov	sl, r4
 800ed18:	e7d2      	b.n	800ecc0 <_svfiprintf_r+0x9c>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	1d19      	adds	r1, r3, #4
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	9103      	str	r1, [sp, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bfbb      	ittet	lt
 800ed26:	425b      	neglt	r3, r3
 800ed28:	f042 0202 	orrlt.w	r2, r2, #2
 800ed2c:	9307      	strge	r3, [sp, #28]
 800ed2e:	9307      	strlt	r3, [sp, #28]
 800ed30:	bfb8      	it	lt
 800ed32:	9204      	strlt	r2, [sp, #16]
 800ed34:	7823      	ldrb	r3, [r4, #0]
 800ed36:	2b2e      	cmp	r3, #46	; 0x2e
 800ed38:	d10c      	bne.n	800ed54 <_svfiprintf_r+0x130>
 800ed3a:	7863      	ldrb	r3, [r4, #1]
 800ed3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed3e:	d135      	bne.n	800edac <_svfiprintf_r+0x188>
 800ed40:	9b03      	ldr	r3, [sp, #12]
 800ed42:	1d1a      	adds	r2, r3, #4
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	9203      	str	r2, [sp, #12]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	bfb8      	it	lt
 800ed4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed50:	3402      	adds	r4, #2
 800ed52:	9305      	str	r3, [sp, #20]
 800ed54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ee20 <_svfiprintf_r+0x1fc>
 800ed58:	7821      	ldrb	r1, [r4, #0]
 800ed5a:	2203      	movs	r2, #3
 800ed5c:	4650      	mov	r0, sl
 800ed5e:	f7f5 fa37 	bl	80041d0 <memchr>
 800ed62:	b140      	cbz	r0, 800ed76 <_svfiprintf_r+0x152>
 800ed64:	2340      	movs	r3, #64	; 0x40
 800ed66:	eba0 000a 	sub.w	r0, r0, sl
 800ed6a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed6e:	9b04      	ldr	r3, [sp, #16]
 800ed70:	4303      	orrs	r3, r0
 800ed72:	3401      	adds	r4, #1
 800ed74:	9304      	str	r3, [sp, #16]
 800ed76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed7a:	4826      	ldr	r0, [pc, #152]	; (800ee14 <_svfiprintf_r+0x1f0>)
 800ed7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed80:	2206      	movs	r2, #6
 800ed82:	f7f5 fa25 	bl	80041d0 <memchr>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d038      	beq.n	800edfc <_svfiprintf_r+0x1d8>
 800ed8a:	4b23      	ldr	r3, [pc, #140]	; (800ee18 <_svfiprintf_r+0x1f4>)
 800ed8c:	bb1b      	cbnz	r3, 800edd6 <_svfiprintf_r+0x1b2>
 800ed8e:	9b03      	ldr	r3, [sp, #12]
 800ed90:	3307      	adds	r3, #7
 800ed92:	f023 0307 	bic.w	r3, r3, #7
 800ed96:	3308      	adds	r3, #8
 800ed98:	9303      	str	r3, [sp, #12]
 800ed9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed9c:	4433      	add	r3, r6
 800ed9e:	9309      	str	r3, [sp, #36]	; 0x24
 800eda0:	e767      	b.n	800ec72 <_svfiprintf_r+0x4e>
 800eda2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eda6:	460c      	mov	r4, r1
 800eda8:	2001      	movs	r0, #1
 800edaa:	e7a5      	b.n	800ecf8 <_svfiprintf_r+0xd4>
 800edac:	2300      	movs	r3, #0
 800edae:	3401      	adds	r4, #1
 800edb0:	9305      	str	r3, [sp, #20]
 800edb2:	4619      	mov	r1, r3
 800edb4:	f04f 0c0a 	mov.w	ip, #10
 800edb8:	4620      	mov	r0, r4
 800edba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edbe:	3a30      	subs	r2, #48	; 0x30
 800edc0:	2a09      	cmp	r2, #9
 800edc2:	d903      	bls.n	800edcc <_svfiprintf_r+0x1a8>
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d0c5      	beq.n	800ed54 <_svfiprintf_r+0x130>
 800edc8:	9105      	str	r1, [sp, #20]
 800edca:	e7c3      	b.n	800ed54 <_svfiprintf_r+0x130>
 800edcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800edd0:	4604      	mov	r4, r0
 800edd2:	2301      	movs	r3, #1
 800edd4:	e7f0      	b.n	800edb8 <_svfiprintf_r+0x194>
 800edd6:	ab03      	add	r3, sp, #12
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	462a      	mov	r2, r5
 800eddc:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <_svfiprintf_r+0x1f8>)
 800edde:	a904      	add	r1, sp, #16
 800ede0:	4638      	mov	r0, r7
 800ede2:	f3af 8000 	nop.w
 800ede6:	1c42      	adds	r2, r0, #1
 800ede8:	4606      	mov	r6, r0
 800edea:	d1d6      	bne.n	800ed9a <_svfiprintf_r+0x176>
 800edec:	89ab      	ldrh	r3, [r5, #12]
 800edee:	065b      	lsls	r3, r3, #25
 800edf0:	f53f af2c 	bmi.w	800ec4c <_svfiprintf_r+0x28>
 800edf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edf6:	b01d      	add	sp, #116	; 0x74
 800edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfc:	ab03      	add	r3, sp, #12
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	462a      	mov	r2, r5
 800ee02:	4b06      	ldr	r3, [pc, #24]	; (800ee1c <_svfiprintf_r+0x1f8>)
 800ee04:	a904      	add	r1, sp, #16
 800ee06:	4638      	mov	r0, r7
 800ee08:	f000 f87a 	bl	800ef00 <_printf_i>
 800ee0c:	e7eb      	b.n	800ede6 <_svfiprintf_r+0x1c2>
 800ee0e:	bf00      	nop
 800ee10:	0800f7a0 	.word	0x0800f7a0
 800ee14:	0800f7aa 	.word	0x0800f7aa
 800ee18:	00000000 	.word	0x00000000
 800ee1c:	0800eb6d 	.word	0x0800eb6d
 800ee20:	0800f7a6 	.word	0x0800f7a6

0800ee24 <_printf_common>:
 800ee24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee28:	4616      	mov	r6, r2
 800ee2a:	4699      	mov	r9, r3
 800ee2c:	688a      	ldr	r2, [r1, #8]
 800ee2e:	690b      	ldr	r3, [r1, #16]
 800ee30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	bfb8      	it	lt
 800ee38:	4613      	movlt	r3, r2
 800ee3a:	6033      	str	r3, [r6, #0]
 800ee3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee40:	4607      	mov	r7, r0
 800ee42:	460c      	mov	r4, r1
 800ee44:	b10a      	cbz	r2, 800ee4a <_printf_common+0x26>
 800ee46:	3301      	adds	r3, #1
 800ee48:	6033      	str	r3, [r6, #0]
 800ee4a:	6823      	ldr	r3, [r4, #0]
 800ee4c:	0699      	lsls	r1, r3, #26
 800ee4e:	bf42      	ittt	mi
 800ee50:	6833      	ldrmi	r3, [r6, #0]
 800ee52:	3302      	addmi	r3, #2
 800ee54:	6033      	strmi	r3, [r6, #0]
 800ee56:	6825      	ldr	r5, [r4, #0]
 800ee58:	f015 0506 	ands.w	r5, r5, #6
 800ee5c:	d106      	bne.n	800ee6c <_printf_common+0x48>
 800ee5e:	f104 0a19 	add.w	sl, r4, #25
 800ee62:	68e3      	ldr	r3, [r4, #12]
 800ee64:	6832      	ldr	r2, [r6, #0]
 800ee66:	1a9b      	subs	r3, r3, r2
 800ee68:	42ab      	cmp	r3, r5
 800ee6a:	dc26      	bgt.n	800eeba <_printf_common+0x96>
 800ee6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee70:	1e13      	subs	r3, r2, #0
 800ee72:	6822      	ldr	r2, [r4, #0]
 800ee74:	bf18      	it	ne
 800ee76:	2301      	movne	r3, #1
 800ee78:	0692      	lsls	r2, r2, #26
 800ee7a:	d42b      	bmi.n	800eed4 <_printf_common+0xb0>
 800ee7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee80:	4649      	mov	r1, r9
 800ee82:	4638      	mov	r0, r7
 800ee84:	47c0      	blx	r8
 800ee86:	3001      	adds	r0, #1
 800ee88:	d01e      	beq.n	800eec8 <_printf_common+0xa4>
 800ee8a:	6823      	ldr	r3, [r4, #0]
 800ee8c:	68e5      	ldr	r5, [r4, #12]
 800ee8e:	6832      	ldr	r2, [r6, #0]
 800ee90:	f003 0306 	and.w	r3, r3, #6
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	bf08      	it	eq
 800ee98:	1aad      	subeq	r5, r5, r2
 800ee9a:	68a3      	ldr	r3, [r4, #8]
 800ee9c:	6922      	ldr	r2, [r4, #16]
 800ee9e:	bf0c      	ite	eq
 800eea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eea4:	2500      	movne	r5, #0
 800eea6:	4293      	cmp	r3, r2
 800eea8:	bfc4      	itt	gt
 800eeaa:	1a9b      	subgt	r3, r3, r2
 800eeac:	18ed      	addgt	r5, r5, r3
 800eeae:	2600      	movs	r6, #0
 800eeb0:	341a      	adds	r4, #26
 800eeb2:	42b5      	cmp	r5, r6
 800eeb4:	d11a      	bne.n	800eeec <_printf_common+0xc8>
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	e008      	b.n	800eecc <_printf_common+0xa8>
 800eeba:	2301      	movs	r3, #1
 800eebc:	4652      	mov	r2, sl
 800eebe:	4649      	mov	r1, r9
 800eec0:	4638      	mov	r0, r7
 800eec2:	47c0      	blx	r8
 800eec4:	3001      	adds	r0, #1
 800eec6:	d103      	bne.n	800eed0 <_printf_common+0xac>
 800eec8:	f04f 30ff 	mov.w	r0, #4294967295
 800eecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed0:	3501      	adds	r5, #1
 800eed2:	e7c6      	b.n	800ee62 <_printf_common+0x3e>
 800eed4:	18e1      	adds	r1, r4, r3
 800eed6:	1c5a      	adds	r2, r3, #1
 800eed8:	2030      	movs	r0, #48	; 0x30
 800eeda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eede:	4422      	add	r2, r4
 800eee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eee8:	3302      	adds	r3, #2
 800eeea:	e7c7      	b.n	800ee7c <_printf_common+0x58>
 800eeec:	2301      	movs	r3, #1
 800eeee:	4622      	mov	r2, r4
 800eef0:	4649      	mov	r1, r9
 800eef2:	4638      	mov	r0, r7
 800eef4:	47c0      	blx	r8
 800eef6:	3001      	adds	r0, #1
 800eef8:	d0e6      	beq.n	800eec8 <_printf_common+0xa4>
 800eefa:	3601      	adds	r6, #1
 800eefc:	e7d9      	b.n	800eeb2 <_printf_common+0x8e>
	...

0800ef00 <_printf_i>:
 800ef00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	7e0f      	ldrb	r7, [r1, #24]
 800ef06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ef08:	2f78      	cmp	r7, #120	; 0x78
 800ef0a:	4691      	mov	r9, r2
 800ef0c:	4680      	mov	r8, r0
 800ef0e:	460c      	mov	r4, r1
 800ef10:	469a      	mov	sl, r3
 800ef12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ef16:	d807      	bhi.n	800ef28 <_printf_i+0x28>
 800ef18:	2f62      	cmp	r7, #98	; 0x62
 800ef1a:	d80a      	bhi.n	800ef32 <_printf_i+0x32>
 800ef1c:	2f00      	cmp	r7, #0
 800ef1e:	f000 80d8 	beq.w	800f0d2 <_printf_i+0x1d2>
 800ef22:	2f58      	cmp	r7, #88	; 0x58
 800ef24:	f000 80a3 	beq.w	800f06e <_printf_i+0x16e>
 800ef28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef30:	e03a      	b.n	800efa8 <_printf_i+0xa8>
 800ef32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef36:	2b15      	cmp	r3, #21
 800ef38:	d8f6      	bhi.n	800ef28 <_printf_i+0x28>
 800ef3a:	a101      	add	r1, pc, #4	; (adr r1, 800ef40 <_printf_i+0x40>)
 800ef3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef40:	0800ef99 	.word	0x0800ef99
 800ef44:	0800efad 	.word	0x0800efad
 800ef48:	0800ef29 	.word	0x0800ef29
 800ef4c:	0800ef29 	.word	0x0800ef29
 800ef50:	0800ef29 	.word	0x0800ef29
 800ef54:	0800ef29 	.word	0x0800ef29
 800ef58:	0800efad 	.word	0x0800efad
 800ef5c:	0800ef29 	.word	0x0800ef29
 800ef60:	0800ef29 	.word	0x0800ef29
 800ef64:	0800ef29 	.word	0x0800ef29
 800ef68:	0800ef29 	.word	0x0800ef29
 800ef6c:	0800f0b9 	.word	0x0800f0b9
 800ef70:	0800efdd 	.word	0x0800efdd
 800ef74:	0800f09b 	.word	0x0800f09b
 800ef78:	0800ef29 	.word	0x0800ef29
 800ef7c:	0800ef29 	.word	0x0800ef29
 800ef80:	0800f0db 	.word	0x0800f0db
 800ef84:	0800ef29 	.word	0x0800ef29
 800ef88:	0800efdd 	.word	0x0800efdd
 800ef8c:	0800ef29 	.word	0x0800ef29
 800ef90:	0800ef29 	.word	0x0800ef29
 800ef94:	0800f0a3 	.word	0x0800f0a3
 800ef98:	682b      	ldr	r3, [r5, #0]
 800ef9a:	1d1a      	adds	r2, r3, #4
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	602a      	str	r2, [r5, #0]
 800efa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800efa8:	2301      	movs	r3, #1
 800efaa:	e0a3      	b.n	800f0f4 <_printf_i+0x1f4>
 800efac:	6820      	ldr	r0, [r4, #0]
 800efae:	6829      	ldr	r1, [r5, #0]
 800efb0:	0606      	lsls	r6, r0, #24
 800efb2:	f101 0304 	add.w	r3, r1, #4
 800efb6:	d50a      	bpl.n	800efce <_printf_i+0xce>
 800efb8:	680e      	ldr	r6, [r1, #0]
 800efba:	602b      	str	r3, [r5, #0]
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	da03      	bge.n	800efc8 <_printf_i+0xc8>
 800efc0:	232d      	movs	r3, #45	; 0x2d
 800efc2:	4276      	negs	r6, r6
 800efc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efc8:	485e      	ldr	r0, [pc, #376]	; (800f144 <_printf_i+0x244>)
 800efca:	230a      	movs	r3, #10
 800efcc:	e019      	b.n	800f002 <_printf_i+0x102>
 800efce:	680e      	ldr	r6, [r1, #0]
 800efd0:	602b      	str	r3, [r5, #0]
 800efd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800efd6:	bf18      	it	ne
 800efd8:	b236      	sxthne	r6, r6
 800efda:	e7ef      	b.n	800efbc <_printf_i+0xbc>
 800efdc:	682b      	ldr	r3, [r5, #0]
 800efde:	6820      	ldr	r0, [r4, #0]
 800efe0:	1d19      	adds	r1, r3, #4
 800efe2:	6029      	str	r1, [r5, #0]
 800efe4:	0601      	lsls	r1, r0, #24
 800efe6:	d501      	bpl.n	800efec <_printf_i+0xec>
 800efe8:	681e      	ldr	r6, [r3, #0]
 800efea:	e002      	b.n	800eff2 <_printf_i+0xf2>
 800efec:	0646      	lsls	r6, r0, #25
 800efee:	d5fb      	bpl.n	800efe8 <_printf_i+0xe8>
 800eff0:	881e      	ldrh	r6, [r3, #0]
 800eff2:	4854      	ldr	r0, [pc, #336]	; (800f144 <_printf_i+0x244>)
 800eff4:	2f6f      	cmp	r7, #111	; 0x6f
 800eff6:	bf0c      	ite	eq
 800eff8:	2308      	moveq	r3, #8
 800effa:	230a      	movne	r3, #10
 800effc:	2100      	movs	r1, #0
 800effe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f002:	6865      	ldr	r5, [r4, #4]
 800f004:	60a5      	str	r5, [r4, #8]
 800f006:	2d00      	cmp	r5, #0
 800f008:	bfa2      	ittt	ge
 800f00a:	6821      	ldrge	r1, [r4, #0]
 800f00c:	f021 0104 	bicge.w	r1, r1, #4
 800f010:	6021      	strge	r1, [r4, #0]
 800f012:	b90e      	cbnz	r6, 800f018 <_printf_i+0x118>
 800f014:	2d00      	cmp	r5, #0
 800f016:	d04d      	beq.n	800f0b4 <_printf_i+0x1b4>
 800f018:	4615      	mov	r5, r2
 800f01a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f01e:	fb03 6711 	mls	r7, r3, r1, r6
 800f022:	5dc7      	ldrb	r7, [r0, r7]
 800f024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f028:	4637      	mov	r7, r6
 800f02a:	42bb      	cmp	r3, r7
 800f02c:	460e      	mov	r6, r1
 800f02e:	d9f4      	bls.n	800f01a <_printf_i+0x11a>
 800f030:	2b08      	cmp	r3, #8
 800f032:	d10b      	bne.n	800f04c <_printf_i+0x14c>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	07de      	lsls	r6, r3, #31
 800f038:	d508      	bpl.n	800f04c <_printf_i+0x14c>
 800f03a:	6923      	ldr	r3, [r4, #16]
 800f03c:	6861      	ldr	r1, [r4, #4]
 800f03e:	4299      	cmp	r1, r3
 800f040:	bfde      	ittt	le
 800f042:	2330      	movle	r3, #48	; 0x30
 800f044:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f04c:	1b52      	subs	r2, r2, r5
 800f04e:	6122      	str	r2, [r4, #16]
 800f050:	f8cd a000 	str.w	sl, [sp]
 800f054:	464b      	mov	r3, r9
 800f056:	aa03      	add	r2, sp, #12
 800f058:	4621      	mov	r1, r4
 800f05a:	4640      	mov	r0, r8
 800f05c:	f7ff fee2 	bl	800ee24 <_printf_common>
 800f060:	3001      	adds	r0, #1
 800f062:	d14c      	bne.n	800f0fe <_printf_i+0x1fe>
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	b004      	add	sp, #16
 800f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06e:	4835      	ldr	r0, [pc, #212]	; (800f144 <_printf_i+0x244>)
 800f070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f074:	6829      	ldr	r1, [r5, #0]
 800f076:	6823      	ldr	r3, [r4, #0]
 800f078:	f851 6b04 	ldr.w	r6, [r1], #4
 800f07c:	6029      	str	r1, [r5, #0]
 800f07e:	061d      	lsls	r5, r3, #24
 800f080:	d514      	bpl.n	800f0ac <_printf_i+0x1ac>
 800f082:	07df      	lsls	r7, r3, #31
 800f084:	bf44      	itt	mi
 800f086:	f043 0320 	orrmi.w	r3, r3, #32
 800f08a:	6023      	strmi	r3, [r4, #0]
 800f08c:	b91e      	cbnz	r6, 800f096 <_printf_i+0x196>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	f023 0320 	bic.w	r3, r3, #32
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	2310      	movs	r3, #16
 800f098:	e7b0      	b.n	800effc <_printf_i+0xfc>
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	f043 0320 	orr.w	r3, r3, #32
 800f0a0:	6023      	str	r3, [r4, #0]
 800f0a2:	2378      	movs	r3, #120	; 0x78
 800f0a4:	4828      	ldr	r0, [pc, #160]	; (800f148 <_printf_i+0x248>)
 800f0a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0aa:	e7e3      	b.n	800f074 <_printf_i+0x174>
 800f0ac:	0659      	lsls	r1, r3, #25
 800f0ae:	bf48      	it	mi
 800f0b0:	b2b6      	uxthmi	r6, r6
 800f0b2:	e7e6      	b.n	800f082 <_printf_i+0x182>
 800f0b4:	4615      	mov	r5, r2
 800f0b6:	e7bb      	b.n	800f030 <_printf_i+0x130>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	6826      	ldr	r6, [r4, #0]
 800f0bc:	6961      	ldr	r1, [r4, #20]
 800f0be:	1d18      	adds	r0, r3, #4
 800f0c0:	6028      	str	r0, [r5, #0]
 800f0c2:	0635      	lsls	r5, r6, #24
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	d501      	bpl.n	800f0cc <_printf_i+0x1cc>
 800f0c8:	6019      	str	r1, [r3, #0]
 800f0ca:	e002      	b.n	800f0d2 <_printf_i+0x1d2>
 800f0cc:	0670      	lsls	r0, r6, #25
 800f0ce:	d5fb      	bpl.n	800f0c8 <_printf_i+0x1c8>
 800f0d0:	8019      	strh	r1, [r3, #0]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	6123      	str	r3, [r4, #16]
 800f0d6:	4615      	mov	r5, r2
 800f0d8:	e7ba      	b.n	800f050 <_printf_i+0x150>
 800f0da:	682b      	ldr	r3, [r5, #0]
 800f0dc:	1d1a      	adds	r2, r3, #4
 800f0de:	602a      	str	r2, [r5, #0]
 800f0e0:	681d      	ldr	r5, [r3, #0]
 800f0e2:	6862      	ldr	r2, [r4, #4]
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	f7f5 f872 	bl	80041d0 <memchr>
 800f0ec:	b108      	cbz	r0, 800f0f2 <_printf_i+0x1f2>
 800f0ee:	1b40      	subs	r0, r0, r5
 800f0f0:	6060      	str	r0, [r4, #4]
 800f0f2:	6863      	ldr	r3, [r4, #4]
 800f0f4:	6123      	str	r3, [r4, #16]
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0fc:	e7a8      	b.n	800f050 <_printf_i+0x150>
 800f0fe:	6923      	ldr	r3, [r4, #16]
 800f100:	462a      	mov	r2, r5
 800f102:	4649      	mov	r1, r9
 800f104:	4640      	mov	r0, r8
 800f106:	47d0      	blx	sl
 800f108:	3001      	adds	r0, #1
 800f10a:	d0ab      	beq.n	800f064 <_printf_i+0x164>
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	079b      	lsls	r3, r3, #30
 800f110:	d413      	bmi.n	800f13a <_printf_i+0x23a>
 800f112:	68e0      	ldr	r0, [r4, #12]
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	4298      	cmp	r0, r3
 800f118:	bfb8      	it	lt
 800f11a:	4618      	movlt	r0, r3
 800f11c:	e7a4      	b.n	800f068 <_printf_i+0x168>
 800f11e:	2301      	movs	r3, #1
 800f120:	4632      	mov	r2, r6
 800f122:	4649      	mov	r1, r9
 800f124:	4640      	mov	r0, r8
 800f126:	47d0      	blx	sl
 800f128:	3001      	adds	r0, #1
 800f12a:	d09b      	beq.n	800f064 <_printf_i+0x164>
 800f12c:	3501      	adds	r5, #1
 800f12e:	68e3      	ldr	r3, [r4, #12]
 800f130:	9903      	ldr	r1, [sp, #12]
 800f132:	1a5b      	subs	r3, r3, r1
 800f134:	42ab      	cmp	r3, r5
 800f136:	dcf2      	bgt.n	800f11e <_printf_i+0x21e>
 800f138:	e7eb      	b.n	800f112 <_printf_i+0x212>
 800f13a:	2500      	movs	r5, #0
 800f13c:	f104 0619 	add.w	r6, r4, #25
 800f140:	e7f5      	b.n	800f12e <_printf_i+0x22e>
 800f142:	bf00      	nop
 800f144:	0800f7b1 	.word	0x0800f7b1
 800f148:	0800f7c2 	.word	0x0800f7c2

0800f14c <__retarget_lock_acquire_recursive>:
 800f14c:	4770      	bx	lr

0800f14e <__retarget_lock_release_recursive>:
 800f14e:	4770      	bx	lr

0800f150 <memmove>:
 800f150:	4288      	cmp	r0, r1
 800f152:	b510      	push	{r4, lr}
 800f154:	eb01 0402 	add.w	r4, r1, r2
 800f158:	d902      	bls.n	800f160 <memmove+0x10>
 800f15a:	4284      	cmp	r4, r0
 800f15c:	4623      	mov	r3, r4
 800f15e:	d807      	bhi.n	800f170 <memmove+0x20>
 800f160:	1e43      	subs	r3, r0, #1
 800f162:	42a1      	cmp	r1, r4
 800f164:	d008      	beq.n	800f178 <memmove+0x28>
 800f166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f16a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f16e:	e7f8      	b.n	800f162 <memmove+0x12>
 800f170:	4402      	add	r2, r0
 800f172:	4601      	mov	r1, r0
 800f174:	428a      	cmp	r2, r1
 800f176:	d100      	bne.n	800f17a <memmove+0x2a>
 800f178:	bd10      	pop	{r4, pc}
 800f17a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f17e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f182:	e7f7      	b.n	800f174 <memmove+0x24>

0800f184 <_realloc_r>:
 800f184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f188:	4680      	mov	r8, r0
 800f18a:	4614      	mov	r4, r2
 800f18c:	460e      	mov	r6, r1
 800f18e:	b921      	cbnz	r1, 800f19a <_realloc_r+0x16>
 800f190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f194:	4611      	mov	r1, r2
 800f196:	f7ff bc39 	b.w	800ea0c <_malloc_r>
 800f19a:	b92a      	cbnz	r2, 800f1a8 <_realloc_r+0x24>
 800f19c:	f7ff fbca 	bl	800e934 <_free_r>
 800f1a0:	4625      	mov	r5, r4
 800f1a2:	4628      	mov	r0, r5
 800f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a8:	f000 f81b 	bl	800f1e2 <_malloc_usable_size_r>
 800f1ac:	4284      	cmp	r4, r0
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	d802      	bhi.n	800f1b8 <_realloc_r+0x34>
 800f1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1b6:	d812      	bhi.n	800f1de <_realloc_r+0x5a>
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	4640      	mov	r0, r8
 800f1bc:	f7ff fc26 	bl	800ea0c <_malloc_r>
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	2800      	cmp	r0, #0
 800f1c4:	d0ed      	beq.n	800f1a2 <_realloc_r+0x1e>
 800f1c6:	42bc      	cmp	r4, r7
 800f1c8:	4622      	mov	r2, r4
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	bf28      	it	cs
 800f1ce:	463a      	movcs	r2, r7
 800f1d0:	f7ff fb9a 	bl	800e908 <memcpy>
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	4640      	mov	r0, r8
 800f1d8:	f7ff fbac 	bl	800e934 <_free_r>
 800f1dc:	e7e1      	b.n	800f1a2 <_realloc_r+0x1e>
 800f1de:	4635      	mov	r5, r6
 800f1e0:	e7df      	b.n	800f1a2 <_realloc_r+0x1e>

0800f1e2 <_malloc_usable_size_r>:
 800f1e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1e6:	1f18      	subs	r0, r3, #4
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	bfbc      	itt	lt
 800f1ec:	580b      	ldrlt	r3, [r1, r0]
 800f1ee:	18c0      	addlt	r0, r0, r3
 800f1f0:	4770      	bx	lr
	...

0800f1f4 <_init>:
 800f1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f6:	bf00      	nop
 800f1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1fa:	bc08      	pop	{r3}
 800f1fc:	469e      	mov	lr, r3
 800f1fe:	4770      	bx	lr

0800f200 <_fini>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	bf00      	nop
 800f204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f206:	bc08      	pop	{r3}
 800f208:	469e      	mov	lr, r3
 800f20a:	4770      	bx	lr
 800f20c:	0000      	movs	r0, r0
	...
